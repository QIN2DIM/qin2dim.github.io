[{"content":"Preview 如何在中国大陆获取 ChatGPT 的试用权限？你需要一个代理 IP 以及一个可接码的其他地区的手机号。\n目前，OpenAI 未向中国大陆以及港澳台提供 ChatGPT 服务，你需要使用其他地区的代理 IP （优先使用日韩美新）进入注册页面并使用其他地区的手机号进行接码验证，注意：港澳台地区无法使用 OpenAI。\nChatGPT 屏蔽了虚拟号码，类似 Google Voice 的服务无法正常使用，但接码平台的屏蔽策略仍是基于数据库匹配，所以有些平台成了漏网之鱼，如 sms-activate。\n快速注册 准备阶段 准备接码\n打开 sms-activate 注册一个账号，请使用真实邮箱注册。接受验证邮件可能用时略久。\n注册 OpenAI 账号\n访问 OpenAI 认证界面，如果你已有账号，选择 Continue with xxx 或者点击 LogIn 即可，否则填写邮箱走流程，跟着步骤操作走就行。\n跟着操作直到 Verify Your Phone Number 界面。\n购买接码账号\n使用 AliPay 对账号充值，每个接码手机号 10 卢布左右，20分钟有效，有效期内未接收到验证码，手机号将被回收，付款退回账号。\n购买 OpenAI 接码账号，选一个便宜的，这些手机号在本文首发时还剩下十几万个，用完就没了~由于账号有效期内没有活动会被回收，不用担心黄牛批量买入，这些账号用于真实注册 OpenAI。\n填写手机号，接受验证码\n账户余额足够时，点击购物车图表，自动跳转到接码界面，复制手机号填写到 ChatGPT 的验证界面中，地区选择印度，等待验证短信即可。\n​\t选择个人用途。如果操作流程丢失，访问 ChatGPT 回到操作流程中。\n首次使用 注册完成后，访问 ChatGPT (openai.com)，点击 LogIN 即可。在下方的搜索框中开始你的奇思妙想。\n问答案例 注意，ChatGPT 不能联网，基础知识构建工作在 2021 年完成，擅长知识型问答，它有一定的接受边界：\n不能用于撰写实时性较强的时政性质的答案； 不能用于回答权限受限的问题； 不能用于回答政策、政治等专业领域的问题； 不能有效应对 2021 年之后的新知识； 禁黄赌毒； 联合对话 ChatGPT 可以结合上下文信息回复你的提问。\n编程用例 不必像使用搜素引擎那样为了精确结果而使用精简的语法和特殊字符，只需要礼貌且准确地描述你的问题，像这样：\n经测试，ChatGPT 还能妙解 LeetCode 困难算法题，能给出适合某个小需求的代码片段，代码中会有「对应语种」的行内注释，也会在用例下方解释代码的运行逻辑。\n钓鱼提问 尝试提出一些钓鱼问题，即，一般权限玩家无法访问的机密信息。比如：诶隆马斯克的中间名，美国驻日军事基地的经纬度坐标等等。这些是边界问题，「答不出来」才是正确答案。\n范文模版 英文（标准格式）邮件，作文范文，辞职信，请假条等等。\n场景对话 让通识性客服感受到行业危机的一个重要特性，ChatGPT 可以和用户愉快地交流，这远比一口一个“亲”来的爽快。\n梦幻联动 我们可以把 ChatGPT 和 Stable Diffusion 结合使用，如果你暂时不知道如何向 imagine 提供准确的 prompt 或者没啥思路，ChatGPT 也许能为你提供灵感。\n我们通过 ChatGPT 询问了一些描述「动漫女孩」的可行方向，并嫖了一份中文翻译。我们稍微操作一下，拼凑成 扩散模型可以识别的句式，最后通过 ImaginAIry 生成图片。\n1 /imagine prompt: 机械翅膀，魔法能量纹身，彩虹色头发，法杖，猫咪伴侣，artstation, 4k, --ar 2:3 推荐阅读 我们在问答案例中提出了一些有趣的用例，篇幅有限，这里列出一些精彩的 thread 纪录 ChatGPT 更多的精彩用法，建议阅读😁\nChatGPT: Optimizing Language Models for Dialogue\nforrestchang/gptlang: A new programming language running in ChatGPT (github.com)\nJiayuan Thread ChatGPT 花活\n","date":"2022-12-04T16:56:02+08:00","image":"https://blog.echosec.top/p/chatgpt-register/lixin-yin-e6tbaezuuaal46n_hub61807a84e13a72e03127d9d91db1097_437671_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/chatgpt-register/","title":"『Blog』Chatgpt Helloworld"},{"content":"概念界定 账号为什么会被标记（flagged） GitHub 内部实现了一个严格的反机器人/反滥用监测系统，这是一套标准化的风控系统，它会自动标记高威胁目标。被封禁的用户会看到 Your account has been flagged 的标志。\n这套监测系统的实现逻辑处于保密状态，但其监听的行为规则可以大致总结为：\n频繁创建 Git 仓库（速率极大，非人类操作）； 在社区中发表骚扰、辱骂、威胁或煽动性言论，被举报； 滥用。借助 Actions，Codespaes 等服务发送诈骗/广告/垃圾邮；基于这些基础设施运行的高频次的并行自动化任务，长时间占用公共资源等。 访问攻击。试图以可能损害 GitHub 网站或服务的方式扰乱或篡改 GitHub 的服务器，通过自动化的方式给 GitHub 服务器带来不必要的负担，进而达到超出授权边界的行为目的。 冒充任何个人或实体，侵犯第三方隐私。 大多数误封来自第 3 条，显然「滥用」的边界难以界定。而本文阐述的 GitHub Flag Attack 出自第 4 条规则的反向利用。\n什么是标记攻击 GitHub Flag Attack 统称为一系列利用风控规则致使目标账号被针对性封禁的访问攻击，是一种名副其实的「借刀杀人」式网络攻击。\n从正向规则来看，一个机器人被创建后给数千个项目点赞，如果开发者把握不好请求速率和指纹数据的反射频率，这个机器人会被秒封。值得一提的是，这种请求通常是基于 Access Token 的 full-request 而非基于 Playwright 或 Selenium 的网页自动化，所以请求速率非常快，仅受权限上限控制。\n同样的规则可以反向利用，创建数百个机器人，向同一个靶向账号灌入恶意流量，如：follow，star，fork，watch，这些行为是多向的，如：follow 和 unfollow 高频次交替进行，机器人会互赞 fork 下来的仓库等。目标用户通常是 Create/Fork 仓库数几十上百的玩家，这对恶意流量是种利好，可交互对象更多，窗口期更小。短时间内，被攻击账号将收到数万的「点赞」（以及「取消点赞」）的请求，被攻击玩家甚至察觉不到这些异常。标记攻击通常仅需数分钟就可以将目标账号关入小黑屋。\n事发时，我的 GitHub Dashboard 正好停留在主屏上，无意间记录下了这个让我目瞪口呆的过程，这让我陷入了对人与社会的思考……\n被标记 vs 被停用 标记通常针对账号，而停用通常针对某个具体的项目仓库。\n账号被标记期间，除了账号所有者外，其他访客/无法查看被标记账号的 profile 及其所有的附属域资源，看起来像是这个账号不曾存在一样。此时，账号所有者仍能（或通过 Git）操作账户数据，如 push commit，export account data 等，即，账号所有者仍保留对上游数据的读写权限。\n某个仓库被停用后，包括账号所有者在内的所有普通用户均无法正常访问仓库地址，仓库页会显示警告 This repository has been disabled。账号所有者彻底失去该项目的控制权，所有下游 fork 分支被一并删除，母仓库的 Releases 被重置到不可访问域。\n解决方案 移除账号的标记 目前，仅能通过联系技术支持的方式解除账号的标记状态。可供参考的正文内容如下：\nHello, Mr. or Ms. I don’t understand what happened to my account. Would you tell me what to do now? Thank you very much for your support. I don’t know why my account has been flagged.\n如果工单积累过多，可能至多要 7 天才能得到首次回复（remote work 的效率是真的低）如果是闲时请求，至少也需要等个半天。这种恶意攻击引发的封禁案例并不少见，技术支持可能还要甄别是否是「有意为之」。\n重定向 GitHub Pages 如果你使用 GitHub Pages 搭建个人博客站点，当你的账号处于被标记状态时，username.github.io 仓库地址处于不可访问状态，你的博客会被重置到 404 页面。\n你需要另一个未被标记的 GitHub 账号，按同样的方法创建一个 public repo，将站点静态输出 push 到新仓库中，GitHub Pages Custom Domain 仍填写博客站的自定义域名，然后将你的博客站的 CNAME recode 指向新的仓库地址，即，username2.github.io。这么说有点抽象，但这对于使用 GitHub Pages 搭建博客的玩家来说并不难理解。这样操作可接燃眉之急，访问你的站点域名，实际上会被解析到新仓库地址。\n如果你依赖 GitHub Pages 搭建了其他静态内容，也可以照葫芦画瓢完成同样的操作。这也意味着博客站的源码非常关键，持有源码，可以在任何时间点通过渲染引擎生成静态站点。\n因果链分析 动机分析 显然，攻击者组织起一批足以扰动 GitHub 风控系统的机器人集群需要不少的时间和金钱开销，若不是出于测试目的，很难想象攻击者会发起无差别攻击。可以认为，这种「恶作剧」是种「报复行为」。可以预见的动机有：恶意竞争，社会工程学攻击，某些群体的嫉妒行为等等。（有待展开\u0026hellip;）\n影响分析 GitHub Flag Attack 对被攻击对象的影响是不可估计的，必然会间接影响到玩家的现实生活，比如：\n部分求职者喜欢在简历或个人宣传页中附上自己的 GitHub Profile 链接； 部分研究者会在自己的论文预印刊页面以及正刊附件中添加源码实现的索引，而项目仓库八成是放在 GitHub 上的。 部分玩家依赖 GitHub Pages 部署自己的个人静态站点，如博客站，导航站，在线简历等等。 部分玩家基于 GitHub Issues 编排日志或周报月刊系统，纪录打卡数据和突发事件等等。 账号被标记后，这些链接将被路由至 404 页面。一些可预见的概率事件有：候选人向 HR 描述了一个可靠的架构模型然后展示了一个无法访问的仓库链接；或是审稿人发现投稿中的附件链接不可达或是「查无此人」；尽管是个人使用的静态站点，也会造成诸多不便，站长可能需要花费数个小时的时间用于重建镜像仓库、解析 DNS 以及部署 CDN。\n结语及预案 我们在工程上设计「预案」时通常会分为「监」「控」两个方面，既要准确捕捉到攻击发起的状态，也要尽可能减少攻击带来的损失。遗憾的是，在本文描述的案例中，似乎很难找到一种完美的权衡，我们不可能做出将所有仓库私有化这种极端的行为；也很难将毫不相干的个人仓库划分到多个组织账号中，这样维护和管理都十分麻烦；尽管是设置其他人不可查看自己的项目列表，攻击者仍可通过 GitHub API 绕过这层限制直接获取目标用户持有的仓库链接，进而发起攻击。\n此外，我们还需注意 GitHub 是一家美国公司，其运营活动受美国法律限制，其品牌形象受美国利益影响。早在俄乌冲突早期，GitHub 就站队乌方，将一大批俄罗斯组织账号及少量的俄罗斯个人开发者账号标记；同样的操作在中东地区开发者账号上也发生过（这也是我支持实名制的国产 Gitee 的主要原因之一，尽管现在仍有许多进步空间）。事出有因，我们不能脱离上下文去批判 GitHub 的这些「制裁措施」，但我想 GitHub 对于大多数中国程序员来说，其存在意义等同于 QQ空间与朋友圈，有太多的大牛在这片交界之地见证自己逐渐成长的过程。\n无论如何，我不希望这份仅属于开发者自己的珍贵回忆最终仅会流向互联网历史归档馆。你也许需要更可靠的 Git 系统， 也许你需要养成良好的备份习惯避免某些珍贵的东西悄然流失，也许你需要一个可靠的备案来保证某些流行项目的可用性。\n回到文章标题「Git Myself」，如何理解它呢？你可以说「守住我的饭碗」也可以是「留住我的影响力」或是「自建 Git Service」。如果你之前没有做过与「舆情」相关的工作，你也许很难作为当事人去想像：朋友圈/QQ空间被永久封禁，百万微博粉丝账号被限流或是呕心沥血数年构建的社区被恶意攻击淹没。这对他们来说，意味着青春记忆的停顿，他们在这里分享自己的小学中学大学，分享生活槽点与职场高光时刻；这对他们来说，是一个打造人设的绝佳平台，是供粉丝亲近自己的机会，是一个见证自己从草根进军娱乐圈的重要盈利工具；这对他们来说，是N多个熬夜通宵敲代码，投入巨额时间成本的满意作品。作为一个遵守 WEB2.0 游戏规则的人，你可能很难想象自己视为珍宝的东西其实是可以被其他人轻易夺走的。\n当然，本文不会去深究这些话题，这些领域知识过于错综复杂（水太深），但无论如何，我希望本文读者都能重视起自己的网络数据，在符合游戏规则的前提下，将属于自己的东西牢牢抓住。\n","date":"2022-11-19T17:56:01+08:00","image":"https://blog.echosec.top/p/git-myself/village_hucb7071e95cb9e87085ef884eac41912d_646429_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/git-myself/","title":"『Blog』Git Myself"},{"content":"摘要 本文先介绍基于 TUIC 实现的双端代理敏捷部署方案，以 Ubuntu20.04 为例介绍服务端代理架设的步骤，再分别介绍在 Windows（V2RayN/NekoRay），Android（SagerNet/Matsuri） 以及 iOS（Shadowrocket） 启动客户端代理的方案。最后介绍 TUIC 协议的特性、适用场景以及与 Hysteria 协议的区别。\n本文涉及的开源项目如下：\n项目名 发行版本号 备注 EAimTY/tuic v0.8.5 双端代理核心 acmesh-official/acme.sh v3.0.4 证书申请 2dust/v2rayN v5.36 核心承载客户端（Windows） MatsuriDayo/nekoray v2.3 核心承载客户端（Windows） SagerNet/SagerNet v0.8.1-rc03 核心承载客户端（Android） MatsuriDayo/Matsuri v0.5.2 暂不支持 服务端配置 Step1: 下载预编译的 tuic-server\n创建工作目录 /home/tuic/，拉取预编译的 tuic-server v0.8.5，安装 ACME，调整默认 CA letsencrypt。\n1 2 3 4 5 6 7 mkdir --parents /home/tuic \\ \u0026amp;\u0026amp; wget -O /home/tuic/tuic https://github.com/EAimTY/tuic/releases/download/0.8.5/tuic-server-0.8.5-x86_64-linux-gnu \\ \u0026amp;\u0026amp; chmod +x /home/tuic/tuic \\ \u0026amp;\u0026amp; apt install -y socat \\ \u0026amp;\u0026amp; curl https://get.acme.sh | sh \\ \u0026amp;\u0026amp; ~/.acme.sh/acme.sh --upgrade --auto-upgrade \\ \u0026amp;\u0026amp; ~/.acme.sh/acme.sh --set-default-ca --server letsencrypt Step2: 申请证书\n申请证书，将证书移至 /home/tuic/ 工作目录。\n一个 A 域名每 170h 最多申请 5 次证书，如果你玩的太花被限制了，开一个新的 A 域名到本机 IPv4 即可。\n1 2 3 read -p \u0026#34;请输入解析到本机 IPv4 的域名：\u0026#34; DOMAIN \\ \u0026amp;\u0026amp; ~/.acme.sh/acme.sh --issue -d $DOMAIN --standalone --keylength ec-256 \\ \u0026amp;\u0026amp; ~/.acme.sh/acme.sh --install-cert --ecc -d $DOMAIN --fullchain-file /home/tuic/fullchain.crt --key-file /home/tuic/private.key Step3: 编辑服务配置文件\n1 vim /home/tuic/config.json 添加配置信息：\n1 2 3 4 5 6 7 8 { \u0026#34;port\u0026#34;: 16387, \u0026#34;token\u0026#34;: [\u0026#34;how-dare-you\u0026#34;], \u0026#34;certificate\u0026#34;: \u0026#34;/home/tuic/fullchain.crt\u0026#34;, \u0026#34;private_key\u0026#34;: \u0026#34;/home/tuic/private.key\u0026#34;, \u0026#34;congestion_controller\u0026#34;: \u0026#34;bbr\u0026#34;, \u0026#34;alpn\u0026#34;: [\u0026#34;h3\u0026#34;] } Step4: 添加系统服务\n1 vim /etc/systemd/system/tuic.service 创建并编辑配置文件：\n1 2 3 4 5 6 7 8 9 10 11 12 [Unit] Description=TUIC Documentation=https://github.com/EAimTY/tuic After=network.target [Service] User=root ExecStart=/home/tuic/tuic -c /home/tuic/config.json Restart=on-failure [Install] WantedBy=multi-user.target 更新系统服务缓存，允许 tuic service 开机自启\n1 systemctl daemon-reload \u0026amp;\u0026amp; systemctl enable tuic 启动系统服务\n1 systemctl start tuic 其他常用命令\n1 2 3 4 5 6 7 8 # 查看运行状态 systemctl status tuic # 实时日志 journalctl -u tuic --output cat -f # 查看服务端配置 cat /home/tuic/config.json # 查看证书，其中 \u0026#34;~/.acme.sh/acme.sh\u0026#34; 可替换为别名 \u0026#34;acme.sh\u0026#34; ~/.acme.sh/acme.sh --info --ecc -d [YOUR_DOMAIN] 客户端配置 配置模版 建议在开始配置之前将客户端升级到最新版本。在文档中未出现的 field 将保持默认设置。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \u0026#34;relay\u0026#34;: { \u0026#34;server\u0026#34;: \u0026#34;YOUR SERVER DOMAIN\u0026#34;, \u0026#34;port\u0026#34;: 16387, \u0026#34;token\u0026#34;: \u0026#34;how-dare-you\u0026#34;, \u0026#34;ip\u0026#34;: \u0026#34;YOUR SERVER IP\u0026#34;, \u0026#34;congestion_controller\u0026#34;: \u0026#34;bbr\u0026#34;, \u0026#34;alpn\u0026#34;: [\u0026#34;h3\u0026#34;], \u0026#34;reduce_rtt\u0026#34;: true }, \u0026#34;local\u0026#34;: { \u0026#34;port\u0026#34;: %socks_port% }, \u0026#34;log_level\u0026#34;: \u0026#34;off\u0026#34; } NekoRay[推荐] 如果你是首次使用 NekoRay，可看这篇文章以及官方文档快速上手。\n下载预编译的 tuic-client(windows-gnu)，放置到 NekoRay config 目录下。务必下载 client，而不是 server。\n「首选项 - 基本设置 - 核心」添加自定义核心，命名「tuic」，添加 tuic-client 的绝对路径，如果你已将核心放置在 config 目录下，点击「选择」可以直接看见。\n在空白处右键「手动输入配置 - 编辑」在「类型」中选择「自定义（其他核心）」，模版配置如下图所示。替换掉占位符 YOUR SERVER DOMAIN以及 YOUR SERVER IP。如果你改变了上文给出的服务端口 ip 以及身份令牌 token，则此处对照改变即可。 V2RayN 下载预编译的 tuic-client(windows-gnu)，放置到 V2RayN 工程根目录下。 添加自定义配置服务器，复制粘贴配置模版，替换掉占位符 YOUR SERVER DOMAIN以及 YOUR SERVER IP，修改 local port 为 50001。如果你改变了上文给出的服务端口 ip 以及身份令牌 token，则此处对照改变即可。 SagerNet 从 Google Play 下载软件（搜索关键词 SagerNet），或从项目仓库拉取 apk 程序。\n添加服务器配置「手动输入 - TUIC」，对照配置模版填入必要信息：\n首次使用时根据提示下载 SagerNet - TUIC 插件，主流安卓设备选择 arm64-v8a 的版本。参考这篇文章的软件配置，解除插件和主程序的限制。首先，长按 SagertNet，设置应用信息，提供自启动，联网控制和无限制省电的权限，然后再通过「系统设置 - 应用管理」查找 TUIC Plugin，给予自启动和无限制省电的权限。 网络对比测试 使用 NekoRay 对同一服务器上监听不同端口的代理服务进行对比测试，核心版本及客户端配置如下：\n1 2 3 4 5 6 7 { \u0026#34;relay\u0026#34;: { \u0026#34;congestion_controller\u0026#34;: \u0026#34;bbr\u0026#34;, \u0026#34;alpn\u0026#34;: [\u0026#34;h3\u0026#34;], \u0026#34;reduce_rtt\u0026#34;: true }, } 下方对比中，选用来自 PacificRack 提供商的网络环境较有挑战的云服务器，本地带宽 300Mbps，调整 Hysteria down_mbps: 110，YouTube 4K 视频，大文件下载速度测试选用 Open Images Dataset V7 的 Boxes 训练集。\nSpeedtest ：两种协议均能跑满理论上限，微量损耗误差忽略不计。 YouTube4K：两种协议连接速度均溢出（一般认为连接速度超过 2W Kbps 即可流畅播放）。其中，Hysteria 略有优势，但实测中连接速度不稳定，出现「间接抽风」的情况，波动非常大。 FileDownload：Hysteria 下载速度接近down_mbps理论上限，而 TUIC 的下载速度则稳定在 3~5 MB/s。 来源/协议 TUIC Hysteria Speedtest YouTube Connection Speed Download 现将服务器调整为 V.PS 提供的线路质量较好的 Tokyo Micro Pro 服务器，调整 Hysteria down_mbps: 187，其他环境条件不变。\nSpeedtest：趋势相同。 YouTube4K：连接速度同样已溢出，但 Hysteria 已能跑出一倍之差的测试成绩 FileDownload：Hysteria 下载速度接近down_mbps理论上限，而 TUIC 的下载速度稳定在 9MB/s 左右。 值得一提的是，先前 Hysteria 在 YouTube 测试中的抖动情况不再出现。\n来源/协议 TUIC Hysteria Speedtest YouTube Connection Speed Download TUIC 协议简介 REF: https://github.com/EAimTY/tuic/tree/dev/protocol\nTUIC 是一个基于 QUIC 的有状态协议，目前的版本是 0x04。\n协议特性 REF: https://github.com/EAimTY/tuic#design\n1-RTT TCP 中继 0-RTT UDP 中继，且 NAT 类型为 FullCone 在用户空间的拥塞控制，也就是说可以在任何系统平台实现双向的 BBR 两种 UDP 中继模式: native （原生 UDP 特性，数据仍被 TLS 加密）和 quic (100% 送达率，每个包单独单独作为一个 QUIC 「流」，一个包的确认重传不会阻塞其它包) 完全多路复用，服务器和客户端之间始终只需要一条 QUIC 连接，所有任务作为这个连接中的 “流” 进行传输（一个流的暂时阻塞不会影响其它流），所以除连接第一个中继任务外的其它任务都不需要经过 QUIC 握手和 TUIC 的鉴权 网络切换时的会话平滑转移，例如在从 Wi-Fi 切换到移动数据时连接不会像 TCP 一样直接断开 0-RTT 、与中继任务并行的鉴权 支持 QUIC 的 0-RTT 握手（开启之后能达到 真・ 1 -RTT TCP 和 0-RTT UDP ，但是就算不开启，多路复用的特性也能保证在绝大多数情况下 1-RTT 和 0-RTT ） 总结对比 TUIC 设计目标是「尽可能减少握手造成的网络往返时延」，相比之下，更加适合「湍流」应用场景，即，快速响应的持续不断的小流量请求，如快速加载 YouTube/TikTok/Twitter 首帧内容，访问素材网站快速加载缩略图等。\nHysteria 的设计目标是「最大化数据吞吐量」，相比之下，社区更加活跃，协议完成度更高，例如：已于 1.3.0 支持 port-hopping，可在一定程度上缓解 UDP 单端口长连接被运营商丢包的风险；支持 obfs 流量混淆；内部实现 TUN 以及ACL路由；相比之下，Hysteria 更加适合「激流」应用场景，即，非即时响应的高速流量，如数据集拉取，YouTube 8K 视频播放。\n总得来说，TUIC 更适合移动端（蜂窝流量）使用场景。TUIC 的较低的网络往返时延，性能损耗以及带宽开销能够在短视频，即时通信等应用场景带来不错的体感升级，而当 VPS 线路质量较差时（如骨干网晚高峰）TUIC 发挥的作用非常有限。\nHysteria 更适合大流量应用场景，绝大多数的单节点 VPS 直连线路质量都很一般，Hysteria 微调后的拥塞控制策略的确能给劣质网络环境带来质变，但也需警惕错误的客户端配置带来的负优化。在服务器带宽盈余时，Hysteria 更符合大多数普通用户的综合需求，尤其在链路拥堵时段，代理中继延时在用户层面感知不强，反倒是数倍之差的下载速度体验成为矛盾焦点。\n最后，在条件允许的情况下，直连线路搭配使用 QUIC 变种协议簇而非 VMESS，Trojan，VLESS 是更加明智的选择。如果你喜欢或依赖 CDN/Relay 则可以选择 「Shadowsocks + ShadowTLS」 或 「VMESS + TLS + WS + CDN」 等更加复杂的解决方案。\nReference 基于 QUIC 的代理软件：TUIC - EAimTY 的博客\nchika0801/tuic-install: TUIC安装指南\n","date":"2022-11-10T07:23:04+08:00","image":"https://blog.echosec.top/p/tuic/alexander_hua83816487f8e494d5b3a7f9a6fbaea2b_1647930_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/tuic/","title":"『Blog』TUIC 敏捷部署"},{"content":"前言 本文内容较为硬核，读者不应是 Linux 小白且应对 NekoRay ，VMware 以及操作系统代理有基本的了解。\n本文探讨的场景是 Linux 图形化操作系统，在命令行系统无法运行 NekoRay（也没有必要）直接运行代理核心即可。\n简介 我们曾在 『Blog』VMware 虚拟机流量代理 介绍过一种虚拟机借助宿主机局域网代理实现「间接代理」的方案，it works fine 但不够优雅，代理端口的配置让人摸不着头脑，宿主机内网 IP:PORT 变动后，虚拟机代理设置也需要跟着变动，非常繁琐。\n如今，我们可以借助一些优秀的开源项目直接在 Linux 操作系统上管理代理服务器，即，直接在虚拟机上启动客户端代理内核实现流量代理。此时，虚拟机代理和宿主机代理相互独立，虚拟机系统代理无需跟随宿主机网络环境变动。本文以 VMware Ubuntu20.04LTS 为例介绍虚拟机流量代理的最佳实践，这是目前个人使用场景代理效率最高且配置最简单的方案（暴论）。\n本文涉及的开源项目如下：\n项目名 版本号 用途 MatsuriDayo/nekoray v2.2 图形化代理客户端 HyNetwork/hysteria v1.2.2 代理核心 klzgrad/naiveproxy v106.0.5249.91-1 代理核心 虚拟机设置 将虚拟机镜像的网络适配器的网络连接模式改成 NAT 模式。\n代理设置 从这一步开始均为玄学的操作，因为后文中涉及到的开源项目均部署在 GitHub 上，需要优先使用代理才能下载。\n这里有两种解决方法，要么先在宿主机上下载好必要的软件，再把它们「拖入」虚拟机窗口传输文件；要么通过反代服务解决 wget 等命令的路由问题。下文以「命令行」方案为例梳理配置思路。若随时间推移反代接口失效或脚本执行错误，读者可手动分步执行命令或基于第一种方案照葫芦画瓢。\nScript: 如果你使用 Ubuntu 20.04 以及 python3 开发环境，可以运行一键安装脚本，直接跳过 NekoRay 下载以及代理核心下载步骤。\n1 wget -qO- https://gitee.com/yaoqinse/hello-world/raw/develop/npstart.py | python3 Download NekoRay 行为链：从 GitHub 下载 NekoRay 预编译压缩包，解压到桌面，修改控制权限，启动 NekoRay。\n其中 https://dl.capoo.xyz/ 为作者开放使用的反代接口，去掉这段内容后剩下的部分为正常的 GitHub 的资源链接。如果你的虚拟机此时不存在路由问题，应该去掉这段内容。\n此外，为保证操作的连贯性，这里写死了 NekoRay v2.2 的下载地址，你可以在部署完毕后通过 NekoRay 内置的在线更新功能追平最新特性。\n1 2 3 4 5 6 cd ~/Desktop/ \\ \u0026amp;\u0026amp; wget https://dl.capoo.xyz/https://github.com/MatsuriDayo/nekoray/releases/download/2.2/nekoray-2.2-2022-10-30-linux64.zip \\ \u0026amp;\u0026amp; unzip nekoray-2.2-2022-10-30-linux64.zip \\ \u0026amp;\u0026amp; rm nekoray-2.2-2022-10-30-linux64.zip \\ \u0026amp;\u0026amp; cd ~/Desktop/nekoray \\ \u0026amp;\u0026amp; ./launcher 如果你是第一次使用 NekoRay ，可以在 之前的文章 中了解更多的使用细节，此处不再赘述。\nDownload Proxy Core 下文以 Hysteria 及 Naiveproxy 作演示，同样，相关文章可在本站历史查找。\n行为链：从 GitHub 上游仓库下载预编译代理核心并存放至 NekoRay 的配置路径下，最后赋予 hysteria-core 额外的执行权限。\n1 2 3 4 5 6 7 8 cd ~/Desktop/nekoray/config \\ \u0026amp;\u0026amp; wget https://dl.capoo.xyz/https://github.com/HyNetwork/hysteria/releases/download/v1.2.2/hysteria-linux-amd64 \\ \u0026amp;\u0026amp; chmod +x ./hysteria-linux-amd64 \\ \u0026amp;\u0026amp; wget -O naiveproxy.tar.xz https://dl.capoo.xyz/https://github.com/klzgrad/naiveproxy/releases/download/v106.0.5249.91-1/naiveproxy-v106.0.5249.91-1-linux-x64.tar.xz \\ \u0026amp;\u0026amp; tar -xvf naiveproxy.tar.xz \\ \u0026amp;\u0026amp; mv naiveproxy-v106.0.5249.91-1-linux-x64/naive . \\ \u0026amp;\u0026amp; rm naiveproxy.tar.xz \\ \u0026amp;\u0026amp; rm -r naiveproxy-v106.0.5249.91-1-linux-x64 下载完后，参照 之前的文章 启用 HTTP 监听端口 并 指定 hysteria-core 以及 naive-core 的绝对路径。\nEnable System Proxy 至此， NekoRay 已配置完毕可以直接投入使用。接下来，以你喜欢的方式添加 Hysteria 或 Naiveproxy 的代理服务器，例如从宿主机已配置好的 NekoRay 中导出分享链接并粘贴过来。\n选中需要激活的服务器，启动系统代理。你可以访问 Google 或 YouTube 等站点检测系统代理连通性，也可以通过 fast.com 或 speedtest.net 甚至是 YouTube 码流速度估算代理最大下行速度，如图 3,4,5 所示。\n之后，你可以通过双击 ~/Desktop/nekoray/launcher 启动软件本体，也可以设置开机自启。\n开发中的代理问题 介绍常见的虚拟机代理错误设置并给出相应的解决方法。\n浏览器代理\n浏览器代理选择系统代理即可。Google，Edge 默认走系统代理（且不可更改），Firefox 则给出眼花缭乱的选项，将「配置访问互联网的代理服务器」手动置为「使用系统代理」即可。\nwget | git | pip |curl 等命令的路由通路\n这些命令默认走系统代理。如果你配置了优先级更高的回源代理（如 pip 清华镜像源）那么它大概率会和系统代理打架，针对回源代理的说明可看后文小节部分。\napt 等命令的路由通路\n建议保持国内镜像源。本地与 Ubuntu 软件源服务器是直连关系，流量不走系统代理，选择国内镜像源直连是不错的选择。当然你也可以修改 Ubuntu 软件源指回主根服务器，并保持 NekoRay VPN 模式为开启状态。\nping 命令的连通性\n我想你应该不会惊讶于「为什么我开启了系统代理，能 ping 通 baidu.com 却 ping 不通 google.com」。\nJetBrains 家族产品的代理设置\n（如：PyCharm，Goland，IDE）\n这类软件设置项中的代理仅对软件本身有效，如插件商城，而软件运行代码是通过 shell 脚本命令执行的，即，你的代码中的网络请求是否使用代理与这个库的底层逻辑以及你是否传入代理参数有关，而与软件设置的代理无关。\n比如 Python3 的 requests.get() 在你不指定参数 proxies 时会检索环境变量 *_proxy 自动填充 proxies 参数，即，reqeusts 流量默认走系统代理。而 aiohttp 中基于 ClientSession 对象的网络请求默认直连，即，不指定参数 proxy 代理不生效。但无论如何，它们都与软件设置的代理无关。\nTLS in TLS 陷阱\n如果你使用 Python3 进行开发，你一定经历过： pip 下载速度慢；换源；镜像源和系统代理打架；自己写的网络请求没法过墙，指定了系统代理却出现了连锁的 SSLError 异常。这是一个史前巨坑，是一个仅会在中国大陆发生的奇妙化学反应，urllib3 的导演组都自愧不如。这一切的一切都指向一个 TLS in TLS 陷阱。你可以在 conda issues 继续吃瓜。\n解决方法如下，根据你的需求和应用场景择优：\nSolution1：调整 urllib3 版本，即，pip install urllib3==1.25.11；\nSolution2：调整代理软件配置\nv2rayN v5.36+, 「参数设置 \u0026ndash; 系统代理设置 \u0026ndash; 高级代理设置」选择 http=http://{ip}:{http_port};https=http://{ip}:{http_port}。在「例外」中添加 pypi.tuna.tsinghua.edu.cn; 绕过 pip 清华源的代理请求，如果你使用其他 pip 源，填写相应的域名即可。\nClash（cfw/verge/\u0026hellip;）开启 TAP/TUN。\nNekoRay 切换至 VPN 模式。\nSolution3：以你喜欢的方式调整系统代理的协议格式\n核心操作是让 HTTPS 与 HTTP 的代理流量公用一个端口，并且绕过系统代理的 TLS 认证问题。\n1 2 3 4 proxies = { \u0026#34;http\u0026#34;: \u0026#34;http://127.0.0.1:10809\u0026#34;, \u0026#34;https\u0026#34;: \u0026#34;http://127.0.0.1:10809\u0026#34; } 相关文章 『Blog』Use Hysteria through NekoRay in Windows\n『Blog』Naiveproxy Quick Start\n『Blog』V2rayN 配置 Hysteria\n","date":"2022-10-30T00:54:18+08:00","image":"https://blog.echosec.top/p/vmware-proxy-2023/anato1_hu23989a1e0bca40ae170d6e6b64c8bf24_438660_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/vmware-proxy-2023/","title":"『Blog』VMware 虚拟机流量代理最佳实践"},{"content":"Introduce 本文以 Ubuntu20.04 为例简要介绍 Naiveproxy 服务端的敏捷部署流程，再分别借助 NekoRay/v2rayN 在 Windows 以及 Matsuri（茉莉） 在 Android 启动图形化代理的解决方案。\n下文均以 Matsuri \u0026amp; NekoRay 统称 NekoRay 以及 Matsuri。这两个项目拥有同样的维护社区和协议解析后端，服务器导入操作无需额外声明。\n本文涉及的开源项目如下：\n项目名 发行版本号 用途 klzgrad/naiveproxy v106.0.5249.91-1 双端代理核心 QIN2DIM/np-start main-branch Naiveproxy 服务端自动编译脚本 MatsuriDayo/nekoray v2.0 GUI 客户端（Windows/Linux） MatsuriDayo/Matsuri v0.5.1 GUI 客户端（Android） caddyserver/caddy v2.6.2 承载代理的 Web 服务器 caddyserver/xcaddy v0.3.1 编译携带 Naiveproxy 插件的 Caddy2 服务器 Caddy Server Agile Development Compile the Naiveproxy Server 在 Ubuntu20.04+ 环境中自动编译 Naiveproxy，其他环境可参见「原理及步骤说明」进行配置。\n首次运行后，你可以通过快捷指令 npstart 运行脚本。\n1 wget -qO /home/npstart.py https://raw.githubusercontent.com/QIN2DIM/np-start/main/main.py \u0026amp;\u0026amp; python3 /home/npstart.py 首次运行时，除敏捷部署外的功能被锁定，Naiveproxy 编译成功后解锁。自动编译耗时取决于硬件性能和网络带宽配置，一般 1 ~ 5 分钟内可以完成。\n下图为 npstart 的命令行控制面板，可以实现基本的 Naiveproxy 生命周期管理工作。\nCheck the Generated Configuration 脚本编译结束后，按任意键自动部署 Naiveproxy 系统服务。\n脚本会在 /home/naiveproxy 目录下生成编译产出的 caddy 以及 Caddyfile并在屏幕上依次打印：\n用于启动 V2rayN Custom Server 的配置信息 用于启动 Matsuri \u0026amp; NekoRay Naiveproxy 的分享链接 用于启动 Shadowrocket HTTP/2 代理的分享链接 对于 Matsuri \u0026amp; NekoRay 以及 Shadowrocket，复制分享链接后，可以通过粘贴或从剪贴板导入的方式直接在图形化客户端中导入节点；而 V2rayN 则需要编写自定义配置，复制粘贴配置信息即可。\nMatsuri \u0026amp; NekoRay 以及 V2rayN 需要在客户端安装 naive-core 或 naive plugin 才能正常使用，详细内容文末介绍。\nWindows PC Configuration 建议每间隔一个月主动更替 naive-core 以追平上游的最新特性\nV2rayN Custom Server 访问 Releases · klzgrad/naiveproxy 下载匹配操作系统的最新发行客户端。解压后将其中的 naive.exe 放置到 v2rayN 工程根目录下。 添加自定义配置服务器，复制粘贴 v2rayN custom server 的配置信息， Core类型 选择 naiveproxy，Socks端口 与配置文件给出的 listen-port 保持一致。下图为参考配置： NekoRay Naiveproxy Node 如果你从未使用过 NekoRay，可通过 这篇博客 了解预热内容。\n访问 Releases · klzgrad/naiveproxy 下载匹配操作系统的最新发行客户端。解压后将其中的 naive.exe 放置到 NekoRay 工程目录下的 config 文件夹。\n打开 NekoRay，依次选择 「首选项 → 基本设置 → 核心」添加 naive-core。\n复制 NekoRay/Matsuri 分享链接 ，CTRL + V 从剪切板导入 naiveproxy node。\nMatsuri Configuration Matsuri with Naiveproxy Plugin\n如果你从未使用过 Matsuri，可通过 这篇博客 了解预热内容。若首次使用 Naiveproxy，依据提示安装 naive-plugin 即可（导入并启动服务器后自动弹出提示）。\nShadowrocket Configuration 软件自带插件，无需手动安装，直接复制粘贴分享链接即可。\n","date":"2022-10-19T20:09:33+08:00","image":"https://blog.echosec.top/p/naiveproxy/anato-finnstark_hu04c8a42ff8d847444a47992e0b4adbdb_545972_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/naiveproxy/","title":"『Blog』Naiveproxy Quick Start"},{"content":"前言 本文以 Windows 为例介绍使用 Clash Verge 启动 Hysteria 代理核心的快速入门步骤并列举一些注意事项。下文以 Verge 代称 Clash Verge。\nVerge 是一个基于 tauri 编写的 Clash系列图形化客户端，支持跨平台（Windows x64, Linux x86_64 and macOS 11+）。Verge 支持更换至 Meta-core，即，支持多平台的 Hysteria 代理核心的管理。您可以查阅下表列出的 Documentation 了解有关 Verge（Meta）组合的诸多特性。\n项目名 发行版本号 用途 zzzgydi/clash-verge v1.0.5 图形化客户端 Loyalsoldier/clash-rules 202208302241 开源规则集 Dreamacro/clash Wiki / Documentation Clash.Meta Wiki / Documentation Clash for Windows Wiki / Documentation emptysuns/Hi_Hysteria v0.4.0 服务端安装脚本 快速上手 下载设置现象 Verge 访问 Releases · zzzgydi/clash-verge，下载最新发行版本。建议 Windows 用户选择 _zh-CN.msi。\n编排配置文件 因为 Verge 也是基于 Meta 运行 Hysteria 代理核心，我们在 Clash.Meta 这篇博客介绍的配置模版可以重用，配置项完全一致。如果你通过 hihy 在服务器上维护 Hysteria，那么可以非常方便地导出包含预设规则的 Meta YAML 配置文件，你可以将该配置文件导入到 Verge 或 CMFA（Clash Meta for Android） 等客户端直接使用。\n配置 Verge 假设已获取配置文件并存到本地\u0026hellip;\n从主界面进入到「配置」页，选择「新建」，调整配置类型为 Local，加上合理的 Name 以及 Descriptions，点击「选择文件」找到存在本地的 YAML 配置文件，点击「保存」导入配置。Verge 会拷贝一份配置文件存储到目录 ~/.config/clash-verge-prfiles 。\n图 1 新建配置\r回到「配置」页，选中刚创建的配置激活代理组（或「右键」目标代理组选择「使用」）。\n图 2 激活配置\r可以在「代理」页查看当前激活的代理组。\n图 3 Verge 代理组\r进入「设置」页，检查 「Clash 设置」，切换内核至 Clash.Meta。\n在当前页面检查「系统设置」，如下图所示，开启「服务模式」，开启「系统代理」。若服务模式下载异常，可以先开启系统代理后再下载启用服务模式。访问 Google 或 YouTube 等站点进行行为检测，「流量图显」正常波动说明网络代理工作正常。\n图 4 Verge 系统代理\r进阶操作 检查网络连接 进入「连接」页中检查经由 Verge 的网络活动（即不开启代理时「连接」和「日志」不工作）。在下图中，我们筛选了经由 Verge 前往以 api.bilibili 为前缀的域名的流量去向，可以看到使用的传输协议是 HTTPS，访问策略是 DIRECT，直译为「直接连接」表示访问数据包不经由远程代理服务器转发而是直接去往B站。\n图 5 Verge 网络连接 - DIRECT\r同样，我们筛选 youtube 可以看到如下内容：\n图 6 Verge 网络连接 - PROXY\r图中的标签 PROXY 对应着配置文件中的代理组名称，此处直译为「通用代理」表示 Verge 使用 PROXY 这个代理组中的节点处理面向当前连接的网络请求。我们切换到「日志」页面，可以进一步地查看访问细节，如下图所示：\n图 7 Verge logs\r以 09-02 21:24:15 INFO 这条日志为例，其表述了一个数据包的行为链：数据包从「本地系统代理」7890 端口转发到本地 44391 端口“准备发往” Youtube（HTTPS），又因为当前站点触发了（域名）匹配规则 RuleSet(proxy) ，意味着这次“发送”需要使用规则所指定的代理组 PROXY，而具体使用该代理组中的哪个节点呢？默认是我们手动选中（Select）的节点，在配置文件中它的别名（name）是 CA Clone\nTUN 模式 ","date":"2022-09-02T20:04:10+08:00","image":"https://blog.echosec.top/p/clash-verge-hysteria/anato_hu83e8ab04b4c79752d046f14d85932d36_727831_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/clash-verge-hysteria/","title":"『Blog』Use Hysteria through Clash Verge"},{"content":"前言 本文涉及的开源项目：\n项目名 发行版本号 用途 MetaCubeX/ClashMetaForAndroid v2.5.11-pre02 图形化客户端 Loyalsoldier/clash-rules 202208302241 开源规则集 下文均以 CMFA 代称 Clash Meta for Android。\n快速上手 下载 CMFA 推荐从 Releases 下载最新发行版软件。\n通常，主流安卓手机使用带有 arm64-v8a 标签的 APK 文件。以你喜欢的方式在移动设备上安装 CMFA，不要点击多余的东西。\nFig1. - Download CMFA release through GitHub.\r导入配置文件 参考 文末附件 编写你的配置信息，导入移动设备。从 CMFA 应用主界面点击「配置」进入创建配置页面，导入配置文件，点击保存。\n值得一提的是，目前 Hysteria 仍未被普及使用，你可能缺少一种合理的方式部署 URI 服务用于定时更新 Hysteria 配置信息。目前的最佳实践仍是通过配置文件导入相关数据，通过链接导入反而有订阅泄漏的风险。\nFig2. - Import rules from external YAML file.\rFig3. - Waiting for rule-providers to load.\rFig4. - Select the (hysteria) configuration item.\r启动代理 返回 CMFA 应用主界面，点击「启动」即可。\nFig5. - Startup proxy.\r黑名单访问控制模式 黑名单模式，意为「只有命中规则的网络流量，才使用代理」，这是一个大幅度提升网上冲浪体验的关键操作。在 Kotlin 系列的软件中，该选项还被称为「分应用代理」。\n由于每个人的设备环境大相径庭，很难用一套模版覆盖所有环境，所以我们只说明操作方法以及注意事项，提供的 rules 仅供参考，你需要根据具体情况进一步调教。\n关闭代理，从应用界面依次进入「设置 \u0026ndash; 网络 」，将访问控制模式调整为「仅允许已选择的应用」，其他选项保持默认即可，具体内容如下所示：\nFig6. - Access control mode of VpnService. 打开「访问控制应用包列表」，开始点选需要使用代理的应用软件。可供参考的应用包列表如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 com.azure.authenticator com.android.chrome com.discord com.microsoft.office.excel com.github.android com.google.android.gm com.google.ar.core com.instagram.android com.medium.reader com.microsoft.office.officehubrow com.picsart.studio com.microsoft.office.powerpoint com.reddit.frontpage com.spotify.music org.telegram.messenger com.twitter.android twittervideosaver.twittervideodownloader.twimate.savetwittergif com.microsoft.office.word com.google.android.youtube photo.editor.photoeditor.photoeditorpro com.google.earth com.android.vending com.google.android.gms com.google.android.gsf 你可以在「访问控制应用包列表」中从外部（剪切板）导入以上内容，部分应用需要关闭包列表的系统应用过滤器才能看到。我们以上述内容为例阐述黑名单访问控制模式的最佳实践案例。\n代理类 备注 谷歌商店 Google Play Store，Google Play 服务 以及 Google 服务框架。 浏览器 主用的浏览器，如 Google，Edge，Firefox，DuckGo 等，否则应用内的多种服务无法正常使用。 邮箱 Gmail，Protonmail 等需要代理才能正常收发件的产品。 Authenticator 用于二步验证或多因素验证的软件，若您使用的是国外产品（这类生态在国内不成熟），它们的云服务备份功能自然是需要通过代理的。 其他 （1）各种需要代理的国外应用。如 YouTube，Twitter，Telegram，Instagram，Reddit，Spotify，Google Earth ，Microsoft Office 等人尽皆知的国外御三家应用；（2）Twitter、Instagram下载器（用于下载推文视频）之类的软件；（3）需要代理才能正常使用的游戏、流媒体及协作服务。 反模式警告，除非是特殊用途（比如装逼、连入公司内网、开发），否则你不应在任何情况下使用境外代理访问支付宝、微信、反炸中心、百度/高德地图、Bilibili、电商软件、抖音等知名国内御三家应用。\n这种反模式的行为会不会带来意料之外的惊喜暂且不谈，就上网体验本身就非常糟糕，也许是出入公共场合地点码半分钟加载不出来，也许是 B站 的下饭体验极其恶劣，但无论如何，长期「异地登录人」的用户画像会给你今后的网上冲浪生活留下浓墨重彩的一笔。\n附件 参考项目 HyNetwork/hysteria Wiki Loyalsoldier/clash-rules 配置文件\n根据注释修改配置信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 mixed-port: 7890 allow-lan: true mode: rule log-level: info ipv6: true dns: enable: true listen: 0.0.0.0:53 ipv6: true default-nameserver: - 114.114.114.114 - 223.5.5.5 enhanced-mode: redir-host nameserver: - https://dns.alidns.com/dns-query - https://doh.pub/dns-query fallback: - 114.114.114.114 - 223.5.5.5 # 编写 Hysteria 客户端的协商配置信息 proxies: - name: \u0026#34;CN2 GIA-E\u0026#34; type: hysteria server: # Hysteria 服务域名 port: # Hysteria 服务端口 auth_str: # 字符串校验密钥 alpn: h3 protocol: wechat-video # udp/wechat-video up: 25 down: 125 sni: # Hysteria 服务域名 skip-cert-verify: false recv_window_conn: 12320768 recv_window: 49283072 disable_mtu_discovery: true # 服务注册 # 将上文配置的 proxies-name 的值依次编排到下方的 proxies 列表中 proxy-groups: - name: \u0026#34;PROXY\u0026#34; type: select proxies: - \u0026#34;CN2 GIA-E\u0026#34; rule-providers: reject: type: http behavior: domain url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/reject.txt\u0026#34; path: ./ruleset/reject.yaml interval: 86400 icloud: type: http behavior: domain url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/icloud.txt\u0026#34; path: ./ruleset/icloud.yaml interval: 86400 apple: type: http behavior: domain url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/apple.txt\u0026#34; path: ./ruleset/apple.yaml interval: 86400 proxy: type: http behavior: domain url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/proxy.txt\u0026#34; path: ./ruleset/proxy.yaml interval: 86400 direct: type: http behavior: domain url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/direct.txt\u0026#34; path: ./ruleset/direct.yaml interval: 86400 private: type: http behavior: domain url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/private.txt\u0026#34; path: ./ruleset/private.yaml interval: 86400 gfw: type: http behavior: domain url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/gfw.txt\u0026#34; path: ./ruleset/gfw.yaml interval: 86400 greatfire: type: http behavior: domain url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/greatfire.txt\u0026#34; path: ./ruleset/greatfire.yaml interval: 86400 telegramcidr: type: http behavior: ipcidr url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/telegramcidr.txt\u0026#34; path: ./ruleset/telegramcidr.yaml interval: 86400 cncidr: type: http behavior: ipcidr url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/cncidr.txt\u0026#34; path: ./ruleset/cncidr.yaml interval: 86400 lancidr: type: http behavior: ipcidr url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/lancidr.txt\u0026#34; path: ./ruleset/lancidr.yaml interval: 86400 applications: type: http behavior: classical url: \u0026#34;https://ghproxy.com/https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/applications.txt\u0026#34; path: ./ruleset/applications.yaml interval: 86400 rules: - DOMAIN,clash.razord.top,DIRECT - DOMAIN,yacd.haishan.me,DIRECT - RULE-SET,proxy,PROXY - RULE-SET,telegramcidr,PROXY - RULE-SET,direct,DIRECT - RULE-SET,applications,DIRECT - RULE-SET,private,DIRECT - RULE-SET,icloud,DIRECT - RULE-SET,apple,DIRECT - RULE-SET,lancidr,DIRECT - RULE-SET,cncidr,DIRECT - RULE-SET,reject,RECEJT - GEOIP,LAN,DIRECT - GEOIP,CN,DIRECT - MATCH,PROXY ","date":"2022-09-01T01:59:39+08:00","image":"https://blog.echosec.top/p/clash-meta-for-android-hysteria/finnstark-1_huca5aaa1e34b5a6fc237ed06e2fafe34e_1606099_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/clash-meta-for-android-hysteria/","title":"『Blog』Use Hysteria through Clash.Meta in Android"},{"content":"前言 在以往文章中我们介绍了在 Windows 上以图形化界面的形式管理 Hysteria 的解决方案：\n『Blog』NekoRay 配置 Hysteria 『Blog』V2rayN 配置 Hysteria 本文继续介绍有关 Hysteria 代理核心更多内容。本篇以 Matsuri 为切入点，介绍在 Android 手机上启动 Hysteria 代理核心的 quick-start 入门步骤，开箱即用。\n如果你已持有一枚可用的 Hysteria 节点链接，只需要花费不到 3 分钟的时间便可在自己的手机上架起代理与互联国际完成「友好交互」。\n注意事项 本文涉及的开源项目如下：\n项目名 发行版本号 用途 HyNetwork/hysteria v1.2.0 代理核心 MatsuriDayo/Matsuri v0.4.1 图形化客户端 MatsuriDayo/Hysteria-Plugin v1.2.0-2 兼容性插件 注意 →\n本文不面向零基础的小白读者，且仅涉及与 Matsuri Android 客户端相关的操作演示，hysteria 服务端的配置详见『Blog』V2rayN 配置 Hysteria。 该项目仍处于成长期，且因开发者精力有限，无法保证 SagerNet 的最新特性得到及时迁移。本人在相关测试后认为该项目已能实现有关 Hysteria 代理的核心功能，可以正常使用，也即，本文不涉及该软件兼容的其他代理类型的介绍，玩家需要根据自己的喜好和需求选择适合自己的产品。 简介 如果你已是 Hysteria 其他桌面系统的玩家，那你一定参阅过 Hysteria 的 Wiki 文档，你会发现，早在一年前， SagerNet 就以插件的形式支持了 Hysteria 在安卓手机上的运行。然而，该上游项目欠缺维护，实际情况是大量型号的安卓设备并不能正常启动 Hysteria 代理核心，乃至在作者撰文的现在，大量潜在 BUG 仍未得到妥善处理，常见的问题是弹出如下提示：\n缺少插件：\u0026hellip; 专有设备提供商篡改了你的安卓系统，使该插件无法使用。\n那么，该主角出场了！\nMatsuri，是一个用 Kotlin 编写的 Android 代理工具链，是 SagerNet 的一个子分支。Matsuri 继承了 SagerNet 的诸多优良特性，并在此基础上修补了一些历史遗留问题。相关内容可访问 Matsuri 仓库文档，本文仅介绍有关 Hysteria 代理核心相关的内容。\n快速上手 下载 Matsuri Matsuri 支持从 GitHub Releases 以及 Google Play 两种途径下载。目前，谷歌商店上架的版本与 GitHub 发行版的版本号一致，两者均支持在线更新。如果条件允许，从谷歌商店下载比较方便。\n从 GitHub 下载 访问 GitHub Releases ，下载最新发行版即可。主流的安卓手机适合使用 arm64-v8a 类型 APK 客户端。\n从 Google Play 下载 访问内联链接 Google Play 或手动搜索关键词 Matsuri Makubaro 。\n导入 Hysteria 节点 此处推荐的操作是先导入一个可用的 Hysteria 节点，再进行插件的（自动）安装。\n与同世代项目操作逻辑一致，Matsuri 支持从二维码，剪切板，配置文件以及手动编辑 4 种方式导入代理。推荐从剪切板导入 Hysteria 节点分享链接。\n下载 Hysteria-Plugin 选中导入的节点，点击下方的启动开关，此时会弹出如下警告交互框：\n点击「下载」自动打开浏览器前往 Hysteria 插件页面，根据你自己的设备情况选择最新发行版的软件即可。如骁龙系列产品通常选择 arm64-v8a.apk，相关截屏如下所示：\n下载完后正常安装即可，不要点击多余的东西。\r配置 Matsuri 代理核心 解除插件限制 首先，下载好的 plugin 在桌面上不显示快捷方式，需要在你自己设备中的「应用管理」中查找（不同设备操作路径不一致，此处不多赘述，大体上从设置界面进入）Hysteria Plugin，如下图所示：\n解除主程序限制 同样，需要在应用信息界面调整 Matsuri 的软件权限。具体来说有 3 点，联网权限，自启动以及省电策略。\n最后，你需要锁定驻台进程，防止一键清除后台缓存时退出代理。\n启用 HTTP 入站 回到主程序界面，从侧边栏中进入到「设置」界面，下滑找到「入站设置」板块，勾选「启动 HTTP 入站」。\n软件默认的 SOCKS5 入站代理端口为 2080，本地 DNS 端口为 6540，HTTP 代理端口为 9080。若有端口冲突更改代理端口即可。\n启动 Hysteria 节点 配置完成后回到主程序界面，点击启动开关。若节点服务正常，此时已能正常通过代理连接互联网。你可以访问 Google 以及 YouTube 等站点进行行为测试。\n网络优化 介绍推荐使用的最佳实践方案，可在网络质量较差时明显提升网路冲浪体验，下文未提及的配置项保持默认即可。\n设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Matsuri v0.5.2 play 软件设置: 运行模式: VPN TUN实现: Tun2Socket MTU: 1500 路由设置: 分应用代理: true 域名解析策略: AsIs 启动流量探测: true IPv6路由: 禁用 路由资源更新: 官方 协议设置: 复用最大并发: 8 # If enable DNS设置: 增强域名解析: false 远程DNS: https://8.8.8.8/dns-query 直连DNS: https+local://233.5.5.5/dns-query 启动DNS路由: true 入站设置: 启用HTTP入站: true 追加HTTP代理至VPN: true 杂项: 首选插件提供者: Matsuri 路由规则 Matsuri 提供了一些默认的路由规则，路由规则的优先级高于分应用代理。改动路由规则和分应用代理都需要重启代理服务才能生效。\n1 2 3 4 5 6 屏蔽QUIC:（屏蔽）: false 屏蔽跟踪器（屏蔽）: true 屏蔽广告（屏蔽）: true 中国Play商店规则（代理）: true 中国域名规则（绕过）: false 中国IP规则（绕过）: false 场景优化：\n通用场景。建议在「设置 - 分应用代理」中绕过「国产应用」并将「中国域名」以及「中国 IP 」的路由规则关闭。你可以借助软件内置的「扫描中国应用」一键添加。\n覆盖某些国产应用中的 IP 位置显示。先保持通用场景设置，再将指定的国产应用从绕过列表中移除。\n","date":"2022-08-31T06:57:23+08:00","image":"https://blog.echosec.top/p/matsuri-hysteria/webpti_hu0526451ce5bf7900412cf2ca390485ca_933983_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/matsuri-hysteria/","title":"『Blog』Use Hysteria through Matsuri in Android"},{"content":"前言 2022年3月，我们在《V2rayN 配置 Hysteria》 一文中简要介绍了一种 Windows 环境下借助 V2rayN 运行并管理 Hysteria 代理核心的可视化解决方案。行文中，我们提到了一些该种解决方案未能处理的问题，即，无法将 Hysteria 节点的启动与测试集成到一个 action 上，需要自行添加一个 Socks5 驻台线程并手动运行 hysteria-core 才能完成节点测试。在 V2rayN v5.32 中，软件作者 2dust 使用了一种妥协的方法尝试处理这种需求，但仍不够优雅，且方案可行性有待考究。\n为了达成上述「检测 + 管理」的集成体验，本文介绍一个仍处于成长期的开源项目——NekoRay，基于 Qt/C++ 跨平台代理配置管理器。NekoRay 不仅能优雅地解决这个问题，还先于 V2rayN 支持了 hysteria:// 协议头的解析，在一定程度上促进 hysteria 节点的社区传播。\n本文从「快速上手」及「进阶指南」两个阶段介绍这个项目。你如果已持有一枚可以使用的 hysteria 节点分享链接，那么只需 1 分钟即可完成与启动系统代理有关的一切操作，开箱机用，十分方便。\n注意事项 本文最后更新时间 2022-08-26， 请注意甄别本文中可能过时的内容，谨慎参考。\n本文涉及的开源项目如下：\n项目名 发行版本号 用途 HyNetwork/hysteria v1.2.0 代理核心 MatsuriDayo/nekoray v1.4 图形化客户端 注意 →\n本文不面向零基础的小白读者，且仅涉及与 NekoRay Win10+ 客户端相关的操作演示，hysteria 服务端的配置详见『Blog』V2rayN 配置 Hysteria。\n该项目仍处于成长期，其成熟度仍与 V2rayN 有较大差距。本文仅提供解决方案的演示说明，玩家需要根据自己的喜好和需求选择适合自己的产品。\n快速上手 下载 NekoRay 进入 Releases · MatsuriDayo/nekoray，下载最新版的 NekoRay Windows 压缩包。免安装，开箱即用。此处假设解压目录为 C:\\\\nekoray，则主程序路径为 C:\\\\nekoray\\\\nekoray.exe。\n下载 hysteria-windows 进入 Releases · HyNetwork/hysteria，下载最新版的 hysteria-windows-amd64.exe，将其放置在解压后的 NekoRay 配置目录下，例如：C:\\\\nekoray\\\\config\\\\hysteria-windows-amd64.exe（此处随意，但 config 为核心界面的默认启动路径，这样放置方面找文件）。\n配置 NekoRay 代理核心 持续进入「首选项」「基本设置」「核心」界面，选择 hysteria-core 的绝对路径，即刚下载的 hysteria-windows-amd64.exe 文件绝对路径。\n选定后切换到「基本设置 - 通用」界面，将 HTTP 监听端口启用。其他设置保持默认，点击确定，保存设置。\n需要注意的是，若在后续操作中出现端口重用或冲突的弹窗警告，需要回到「基本设置 - 通用」中修改 Socks 监听端口或 HTTP 监听端口。下图为改变后的端口值：\n导入 hysteria 节点 从分享链接或剪切板添加 NekoRay 支持 hysteria:// 协议头的解析，可以直接将订阅链接粘贴进来自动获取节点的配置信息，如下图所示:\n值得一提的是，我们在经典的 hysteria 客户端配置文件中设定字段 acl以及 mmdb 用以调取分流策略，还能额外设置 recv_window_conn ，recv_window以及 resolver 等参数更细粒度地控制代理行为。但我们观察hysteria:// 的节点分享链接的参数后发现，其只保留了 C/S 通信的必要参数，即 host，protocol，auth_str 等字段。\n显然，在最佳实践中，我们不应在为传播的设计的参数结构体中携带诸如文件路径等奇怪的东西，这会让整个分享体系变得非常冗余，十分不优雅。但我又偏有分流这样的需求怎么办呢？非常简单，我们可以通过 NekoRay 间接地为代理核心提供相关的配置信息（相关操作其实也非常简单，自己玩一玩就会了，具体操作我会在下文的进阶部分补充）。\n手动编辑 有关 hysteria 服务端的配置介绍及最佳实践可见另一篇博客。\n相关配置的注释及生成后的面板预览结果如下图所示：\n此处出现了被称为 替换串 的占位符，即 %mapping_port% 与 %socks_port% ，不需要修改，保持默认即可。\n启动 hysteria 节点 初次使用时，选中目标节点，并依次点击「程序 \u0026ndash; 系统代理 \u0026ndash; 启动系统代理」。当控制台开始持续输出来自 hysteria-core 的日志信息时，说明节点启动成功，你可以访问 Google 或 YouTube 等站点进行行为校验。\n值得一提的是，NekoRay 的 \u0026lt;系统代理启动\u0026gt; 及 \u0026lt;代理核心运行\u0026gt; 的业务是分离的，也即对着节点敲回车的作用是启动/重启代理核心，只有勾选「启动系统代理」后才能连接互联网，这点与 V2rayN 相似。\n测试 hysteria 节点 在合理配置前置代理选项后，你可以将「节点激活 + 节点测试」集成到一个 action 中，这比 V2rayN 目前(~v5.32)的解决方案要更加优雅。\n若你按照本文档介绍的步骤走，你只需要在默认分组状态下，依次点击「服务器 – 当前分组」即可调出测试控件的接口，如下图所示：\nNekoRay 集成了一些主流的测试工具，直接运行「完整测试」即可。测试包含以下四个项目（点击跳转源码）：\n测试项目 简介 Latency 延迟测试 下载速度测试 使用代理下载 10MiB 文件，计算下载速度。 入口IP， 出口IP NAT类型 常见的（玄学）速度测试分布如下：\n0~5 MiB/s，绝大多数免费节点，山路十八弯的自建节点\n4~6 MiB/s，优选IP，反代优选IP，机场普通节点，自建普通线路节点\n~10MiB/s，机场上游质量节点，自建优质线路节点，hysteria+自建普通线路节点\n\u0026gt;18MiB/s，机场上游至最贵一档的机场节点，hysteria+自建优质线路节点（家宽 200Mpbs 起且服务端未限制 100Mbps 的下行速度）\n上不封顶，hysteria 一般用于普通或劣质线路的环境改善，在G口档做 UDP 发包是非常睿智的行为。\n测试的输出结果如下图所示：\n我们在经典的 hysteria 代理拓扑中使用的是最简单的 QUIC 直连方案，也即入口地址 In 和出口地址 Out 是相同的，其值均为你的代理服务器的真实 IP。\n需要注意的是，hysteria 的通信协议是基于 quic-go 实现的，TCPing 测试不可用。\n进阶教程 （必读）官方文档：Nekoray-配置 - Matsuri \u0026amp; NekoRay VPN模式 服务器组 NekoRay 以组的形式管理和编排代理对象，因此，所有的测试都是基于组进行的，即，所有组内节点都会被测。\n[必读]分流策略 在 Windows 上，NekoRay 默认以全局代理的形式启动。因此，我们需要通过设置基础的路由策略来提升网上冲浪的体验，否则会有大量的代理流量被浪费，还会无端加大断流风险。\n此处举个简单的例子说明设置分流的必要性。如果你使用过 Bilibili 你应该知道 B站番剧对「不同地区」用户有着不一样的版权策略，而界定「不同地区」用户的规则是基于「访客IP」编写的（目前），即，使用不同的 IP 访问 B站，推荐系统，搜索引擎，页面布局等服务的响应均有所不同。\nUS Global Proxy GEOIP-CN Bypass（简单理解为访问B站不用代理） 访问国内站点却绕行国外代理除了在评论区装逼我想不出任何动机。由于本篇文章属于「入门介绍」，不过多深入自定义规则或高级路由分流策略之类的东西，只需要按照下图所示操作开启 NekoRay 预设的路由规则即可。\nTL;TD\n进入「首选项 \u0026ndash; 路由 VPN 设置」，选择预设「绕过局域网和大陆」，确定保存，重启代理。\n","date":"2022-08-26T05:51:00+08:00","image":"https://blog.echosec.top/p/nekoray-hysteria/finnstark_hufc1dd6e3a16b2d6799c66864ebd379cf_1210961_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/nekoray-hysteria/","title":"『Blog』Use Hysteria through NekoRay in Windows"},{"content":"(填坑中\u0026hellip;)\n前言 矛与盾的界定，双向时间线，停一下，畅想未来。\nCAPTCHA的前世今生 字符验证码 以 text-to-image 为例\n行为验证码 以国内的极验、网易易盾、阿里安全、京东安全为例，涉及高强度的逆向防护，滑动拼图，文字点选，推理拼图，轨迹涂抹，语音验证等丰富的行为验证方案，相关技术步入「感官挑战」阶段。\n曾被信息技术从业人员戏称为 HelloWorld 的 request-based Spider 早已成为村头树下的豚骨拉面。能否处理行为验证，成为爬虫开发者的分水岭。\n问答式验证码 以国外的 hCAPTCHA，reCAPTCHA v2，等前沿服务为例，涉及认知问答、AI对抗、行为检测多点防御。相关技术上升到全新的「人机挑战」阶段。此阶段给出的挑战难题足以放倒人类。\n我，不是人类 以国外的 hCAPTCHA，reCAPTCHA v3，Talon service of Epic 等前沿服务为例，涉及驱动特征检测，运动数据检测，威胁等级计算，访客信用水平统计等技术，此处涉及的多种检测策略在国内多以「无感验证」统称。\n无畏的挑战者 领域技术迭代过快，乃至自学爬虫的玩家，驾校网培生以及跨行业的零基础开发者，抱着刚学会即淘汰的《Python爬虫错题本》欲哭无泪。这类开发者在这场逐渐内卷的博弈中连「小镇做题家」都算不上，充其量只能是「乡村错题本」。\n各位读者可以脑补以下颇有戏剧性的演化场景：\n刚学会网络请求以及基础的伪装，发现获取不到数据\n刚学会如何逆向前端代码，发现实战中的出题人是行业中最聪明的一批算法工程师\n发现无法绕过，需要额外学习使用 Selenium/WebDriver 发起模拟请求\n发现即使是模拟请求，也“不得不”处理行为验证。于是，开发者开始像机器一样思考，制作能够识别图像，识别语音，理解语义的AI，让网络驱动携带着这些模块上前线答题\n一段时间后，开发者逐渐发现即使 AI 能够答对题目，验证仍无法通过，折腾一阵子后发现需要像人类一样思考，制作符合人类上网习惯的鼠标轨迹行为链，然后呢，学都学了，顺带把键盘输入的模仿也专精了吧！\n过了不久，开发者发现一切都回到了原点，但凡是 Selenium 启动的网页，即使是自己手动答题也无法通过验证。折腾一阵子后发现需要让机器人认为「我」是人，开始研究 Chrome 开发者工具以及 BiDi 通信，隐藏浏览器的各项异常特征，尽可能地让 Selenium 启动的网页与手动打开的网页特征一致，甚至不惜自行编译浏览器客户端。\n到此，开发者回顾往昔，发现路上已有绝大多数的同道之人倒下了。但秉持“不忘初心”的信念，开发者仍需在「自证为人」的道路上继续前行。再过不久，开发者已能熟练使用与网页驱动相关的工具技术，随时都能制作深度学习赋能的高性能机器人，秒解所有行为验证难题。\n某一天，「问答式验证」出现了，在这场以「常识对决」为游戏规则的博弈中，开发者受到了来自「彼岸」的满满恶意，如果自己不知道这些生而为人就该知道的「常识」，自然也无法培养出优秀的小镇做题家。\n至此，作为防守方的「挨打人」开始主动出击，在世界各地崭露头角，人机挑战时代拉开序幕。\n回望往昔，这是一场尚无硝烟的战争，本是机器人之间的对抗，上升为「挑战者」与「彼岸玩家」之间的对决；本是脑力劳动主导的工作，逐渐演化成了纯粹的体力劳动。无畏的挑战者与彼岸的玩家们凭借着自己对工作负责的态度以及对行业的热爱，在场无限轮回的游戏中，推动着人机验证领域高速发展。\n时至今日，「挑战者」与「彼岸玩家」共同开辟了计算机网络空间安全的一个全新分支。在这场对决中，它们分别饰演着「矛」与「盾」的角色，在对立统一中，它们互相吸取和利用有利于自己的因素而得到发展，在矛盾斗争中，它们相互排斥不断变化最终破坏自身统一，在这场形式多样性的对抗中，矛盾双方协同运动，融合成一个新事物。\n从上帝视角来看，这是一场颇具戏剧性的博弈。如果没有「搅局者」的加入，「反爬虫工程师」至今仍会是地球上的一小股极客团体，但我也无法想象没有人机验证的互联网该如何良性发展。\n当下，对抗恶意流量的安全团队仍是所有技术岗位中最神秘的一批人，有时他们化身白客，守护资本家和客户仅有的数字资产；但有时他们化身黑客，能够组织规模庞大的流量淹没仍处于萌芽阶段的潜在竞争对手。\n这群秉持着技术中立精神却向网络空间安全不断发起挑战的神秘人到底什么来头？风云激荡的二十年里，网络爬虫的形式经历了怎样的升级迭代？本章节以顺向时间线的形式，浅聊一下作为「矛」的网络机器人技术及其相关的行业领军人物。\n待序\u0026hellip;\n追赶时代的乡村错题本 来自网络驱动的虚假流量 像人类一样思考 我，不是机器人 既见未来，为何不拜？ 灰度空间的失衡与洗牌 防火长城与大航海时代 畅想「矛」与「盾」的未来 年轻人的游戏，但是适老化 熊掌与鱼，兼收并蓄的农场主 搅局者，Web3.0的韭菜收割机 挣脱形态桎梏，奔向虚拟现实社会 图灵测试2.0，意识与人格的考验 ","date":"2022-07-07T02:22:14+08:00","image":"https://blog.echosec.top/p/spider_performance/pexels-geometric-photography-13271914_hu3d03a01dcc18bc5be0e67db3d8d209a6_3049271_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/spider_performance/","title":"『Blog』爬虫之巅，畅想「矛」与「盾」的未来"},{"content":"前言 本系列博客以 VMware Workstation 16 pro 为例，分享在 Windows11 上启动 Ubuntu 20.04 LTS 虚拟机进行 Python3 项目开发的最佳实践。本章节内容涉及网络连接中较为关键的环节 —— 流量代理。\n推荐阅读：\n『Blog』Python 应用开发最佳实践@环境搭建篇\n注意事项 本文首发于 2022-05，如果你是若干年后到访的读者，请注意甄别文章中可能过时的内容，如有其他问题可在评论区提出； 本文不面向零基础的小白读者，不会涉及软件下载安装等细枝末节的内容，不再赘述相关解决方案中涉及到的主流软件的使用细节。 虚拟机设置 在 VMware 「虚拟机设置」中修改「网络适配器（网络连接）」，选择「桥接模式」但不复制物理网络连接状态。这是接管虚拟机代理流量最简单的方式，后文会详细介绍一些基于桥接模式的主流的流量代理解决方案。\n局域网代理方案 v2rayN 介绍使用 v2rayN 接管虚拟机全局流量的方法。操作前请确保虚拟机网络已被设为「桥接模式」。\n注意：使用的演示版本为 v5.16；在这个版本中，v2rayN 区分了本地代理以及局域网代理所用的监听的端口。\n启动主机系统代理\n在 v2rayN 中主机上开启「自动配置系统代理」，用你喜欢的方式确认系统代理的运行状态。\n启动局域网代理\n在 v2rayN 中依次点击「设置」「参数设置」在「Core：基础设置」中开启 允许来自局域网的连接。\n查看无线局域网适配器 WLAN\n在主机命令行窗口输入 ipconfig，找到其中的无线局域网适配器 WLAN 的 IPv4 地址。如果你是有线连接上网，寻找「以太网适配器」的 IPv4 地址即可（可能会打印很多选项，找有默认网关的那一条）。\n查看 v2rayN 的局域网代理端口\n通常在软件视图的最下方的边框处可见，找到 HTTP 以及 SOCKS 的局域网代理端口。若你使用的是更早的版本，默认情况下的代理端口是 http:10809 socks:10808，而在 v5.16 或更高版本中，软件区分了系统代理和局域网代理，此时的局域网代理端口默认是 http:10811 socks:10810，如下图所示。\n配置虚拟机网络代理\n打开 Ubuntu 的网络设置，将「网络代理」切换为手动模式，将我们刚才搜集到的（http 以及 socks）路由参数填入即可。下图为参考的填写格式，这与你的网络情况一定不一样，仅供参考。\n检查虚拟机网络连接\n查看能否正常访问Youtube。此外，你还可以 显示查询自己的IP地址 (ip111.cn) 。\n使用系统自带的 Firefox 浏览器访问 Youtube 的结果如下图所示：\nClash for Windows 介绍使用 Clash for Windows 接管虚拟机全局流量的方法，其他「类 Clash」产品均可举一反三。操作前请确保虚拟机网络已被设为「桥接模式」。\n注意：以下使用的演示版本为 Clash for Windows v0.19.17 ，Clash Core 2022.04.17 Premium(10538)，所有设置均保持“出厂状态” 。\n启动主机系统代理\n在 Clash for Windows 中启动「System Proxy」，用你喜欢的方式确认系统代理的运行状态。\n启动局域网代理\n在 Clash for Windows 中启动「Allow LAN」，并将鼠标移动到「Allow LAN」的位置上，悬停，可以看到窗口弹出了一则提示信息，如下图所示。你需要记下这个 WLAN IPv4 以及 Port。\n配置虚拟机网络代理\n打开 Ubuntu 的网络设置，将「网络代理」切换为手动模式，将我们刚才搜集到的路由参数填入即可。下图为参考的填写格式，仅供参考。\n检查虚拟机网络连接\n查看能否正常访问一些热门站点。此外，你还可以 显示查询自己的IP地址 (ip111.cn) 。\n使用 Firefox 访问 Google Scholar 检索关键词 Neurocompositional computing 的结果如下图所示：\n错误排查 浏览器使用系统代理 如果上文所述的局域网代理方案无法达到预期，你可能需要进一步调整 Firefox 浏览器代理。\n打开浏览器的「Settings」并依次访问「General」「Network Settings」。在弹出的「Connection Settings」中将代理选项切换至「use system proxy settings」也即使用系统代理，点击「OK」保存配置。新建标签页检查网络连接。\n（当然，如果你是用的是其他浏览器产品，你不应该在 Firefox 里面配置浏览器代理\u0026hellip;\u0026hellip;\n虚拟机网络代理设置 若你在调整 Firefox 浏览器代理为「系统代理」后仍无法正常访问外网，很有可能是你的 IPv4 地址或局域网代理端口填写错误，也有可能是你的软件没有开启「允许局域网连接」的选项，控制变量逐一排查即可。\n局域网动态 IPv4 如果你出现「昨天都可以上网今天怎么就不行了」的情况，请检查你的 WLAN IPv4 是否有变化。\n通常情况下国内家用终端物联网设备的局域网 IPv4 地址 是动态分发的，如果你的物联网设备（如笔记本）从之前的 WIFI 热点（如卧室）中断出重连到其他的 WIFI 热点下（如星巴克），局域网 IPv4 地址 很可能发生变化。此时按照流程重新检查一下变更后的地址，手动修改虚拟机的网络代理既可。\n","date":"2022-05-07T13:15:46+08:00","image":"https://blog.echosec.top/p/vmware-proxy/unsplash_hu28c8a8bd94e85a9393a63ebe5a01d637_240960_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/vmware-proxy/","title":"『Blog』VMware 虚拟机流量代理"},{"content":"背景介绍 路透社数字新闻报告（ Reuters Digital News Report ）会在每年度的国家市场数据（ Country and market data ）中统计部分地区的常驻人口对当地主流媒体的信任度以及了解新闻资讯的方式与渠道。\n该份报告从 2012 至今已将调研对象逐渐拓展至 46 个国家或地区，并于 2017 年首次将台湾市场纳入调查范围。立项以来，台湾市场报告均由国立台湾大学的林麗雲（ Lihyun Lin ） 主笔。\n媒体整体信任度 历年报告显示，台媒新闻信任度常居倒数。2017~2021 台湾民众对当地新闻媒体的整体信任度（ Trust in news overall ）分别为 31%(30/36) ，32%(32/37)，28%(34/38)，24%(38/40)，31%(42/46)，前为算法得分，括号内为得分排位。\n2021 年度报告显示，在统计的 15 个媒体中，最受台湾民众信赖的当地媒体是「公共电视台 (52%)」「商业周刊（51%）」以及「天下杂志（51%）」。被台湾本地人戏称为“地摊报纸”的「蘋果日報（37%）」位列“第四”。此外，最不受待见的媒体则是「三立新闻台」不信任度最高，达到了 26%。\nLihyun Lin 在报告中强调「在特殊时期，民众对新闻的整体信任度相较去年上升了七个百分点。在我们的调查中，Public Television Service 仍然是最受信任的信源，其次是经济新闻类媒体（常见的如《天下杂志》和《商业周刊》）。在两极分化的媒体环境中，其余的新闻品牌被一个群体信任，但被另一个群体不信任」。\n相信了解中国国情的各位读者都知道这里的「两极」具体涵义，此处不多赘述，而「特殊时期」指的则是新冠疫情爆发以来的这段时期，也即 Lihyun Lin 在综述中提到的「台湾民众对新闻的信任度历来很低，但媒体在强调公共卫生信息方面的作用可能促使今年的信任度大幅上升至31%（+7个百分点）」。\n快讯平台使用频率 该年度报告还指出，台湾民众于线下渠道了解新闻时，使用率最高的是「TVBS News」使用率最低的是「华视全球资讯」；线上使用率最高的平台是「Yahoo! News」「ETtoday online」以及「Line News」，使用率最低的是「风暴传媒」以及「台湾电视新闻」。\n相关链接 Taiwan | Digital News Report 2021\n","date":"2022-04-10T12:13:43+08:00","image":"https://blog.echosec.top/p/digital-news-report-2021-taiwan/Snipaste_2022-04-10_12-35-43_hu09799b40a1355ebcfba76a6c8cff26d3_774212_120x120_fill_box_smart1_3.png","permalink":"https://blog.echosec.top/p/digital-news-report-2021-taiwan/","title":"『Blog』台媒，信任危机！"},{"content":"注意事项 截至 2022-04-05 该解决方案仍处于测试阶段，未来短期内会有大量的版本更新，请注意甄别本文中可能过时的内容，谨慎参考。如有错误歧义之处欢迎指正。\n进阶配置 Hysteria 高级用法的拓展描述，原文已有的不再赘述。\nLinux 服务端配置 Windows 客户端配置 必填参数为 server（或 host and port ） ，up_mbps 以及 down_mbps，其余配置与服务端的设置相匹配既可。\nserver：服务器地址。如domain.com:52025，在部分图形化代理软件中将此项拆分成「服务器」与「服务器端口」，注意甄别。\nprotocol：传输协议。可选项为 udp，wechat-video，faketcp。\nup_mbps：最大上行（Mbps）。此项限制的是当前客户端的最大上传速度。\ndown_mbps：最大下行（Mbps）。此项限制的是当前客户端的最大下载速度。\nretry：启动时连接服务器异常后的重试次数。0 为不重试，负数为无限重试。\nretry_interval：重试间隔，单位为秒。\nacl：分流规则。通过一系列语法决定访问指定「端点」的流量是否是用代理。\nmmdb：MaxMind IP 库。\nobfs：混淆密码。与服务端保持一致。一般不必混淆通信。若开启混淆，极端情况下会略微影响性能。\nauth | auth_str：认证类型，其值通常称为「认证载荷」。二选一，与服务端保持一致。auth 为 BASE64 验证密钥，auth_str 为自定义的认证字符串。\nalpn：QUIC TLS ALPN。\nserver_name：服务器名称指示，用于验证服务端的 hostname。填写服务端域名既可（申请证书时解析的域名）。\ninsecure：允许不安全的连接。禁用证书检查，启用后该配置安全性相当于明文。\nca：自定义证书（链）。\nrecv_window_conn：QUIC 连接接收窗口。\nrecv_window：QUIC 流接收窗口。\ndisable_mtu_discovery：禁用路径MTU发现。此处的 mtu_discovery 指的是 Path MTU Discovery(PMTUD)。\n","date":"2022-04-10T12:12:09+08:00","image":"https://blog.echosec.top/p/hysteria-advanced/207983_hu3d03a01dcc18bc5be0e67db3d8d209a6_3306100_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/hysteria-advanced/","title":"『Blog』Hysteria Advanced"},{"content":"注意事项 截至本文最后更新时间 2022-08-24 ，该解决方案仍处于测试阶段，未来短期内会有大量的版本更新，请注意甄别本文中可能过时的内容，谨慎参考。\n本文涉及到的开源项目如下：\n项目名 发行版本号 用途 HyNetwork/hysteria v1.2.0 代理核心 2dust/v2rayN v5.32 图形化客户端 emptysuns/Hi_Hysteria v0.4.0 服务端安装脚本 注意 本文不面向零基础的小白读者，开始前，请确保你已了解 v2rayN 的基本用法，备有一台国外 VPS 以及可解析的域名，最后你需要了解基本的 Linux 操作指令用以解决本文尚未提及的偶发性异常。\n快速上手 以 V2rayN 图形客户端为例，介绍在 Windows 上启动 hysteria 客户端的具体方法。\n前期准备 关闭服务器防火墙\n域名解析，关闭 CDN\n关闭冲突服务\n若服务器此前运行过或正在运行 xray-core 及其他代理核心服务，你需要先暂停或关闭这些服务。\n注意： hysteria 与 xray-core 等服务并不冲突，可以同时运行，此处关闭仅为控制查错变量。\n更新 v2rayN 客户端至最新版\nLinux 服务端配置 通过脚本拉取基础设施\n如下指令需要在 superuser env 下执行，使用 sudo su root 切换至管理员上下文（如有必要）。\n1 bash \u0026lt;(curl -fsSL https://git.io/hysteria.sh) 脚本配置\n在弹出的菜单中选择「安装 hysteria」。首次安装后，可通过全局脚手架指令 hihy 调出菜单。\n配置介绍\n此处仅描述脚本运行所涉及到的基础配置项，更多高级参数详见 高级配置\n域名：输入解析到本服务器 IP 的域名即可，解析前不可开启 CDN 。另外，确保已处理「前期准备」否则后续步骤必然报错。\n端口： 无特殊要求，按回车随机选取即可。\n协议类型： 经本人测试，仅有 wechat-video 能够较好地兼容 v2rayN 运行，其他协议类型大概率不可用（留意时效性）。\n转发延迟： 在本地调出控制台，ping 服务器 IP，执行 3 轮，每轮间隔 5 秒，取平均值即可。服务对此项配置并不敏感，保持在相交于真实值略低的区间即可（留意时效性）。\n下行速度： 限制每个客户端的最大下载速率（mbps）。留有 1.25 倍的冗余，也即填入 50，最后配置为 62.5。此项不宜过大，否则会导致客户端频繁遇到「Google reCAPTCHA 异常流量」的提示。\n取\u0026lt;本地带宽理想值\u0026gt;以及\u0026lt;服务器带宽上限\u0026gt;的最小值，如服务器限速 100mbps，这里填 100 即可，若服务器带宽上限严重溢出，根据本地带宽取值。如：家宽 300Mbps 但你在阳台用笔记本的 WIFI 上网，实际网速可能只有 50Mbps ，这里填什么？好吧我也不知道，影响网速的东西可太多了Orz，一般情况下个人使用填 100 足足有余。\n上行速度： 限制每个客户端的最大上传速率（mbps），同「下行速度」。\n认证口令： 输入一串用于身份认证的指令， 如 fuck me till the daylight。\n复制输出\n脚本解析结束后会打印客户端的 json 配置信息以及 Shadowrocket/Sagernet/Passwall 一键链接。此处，你需要复制其中的 json 配置信息。\n上述的「一键链接」是以 hysteria:// 打头的分别可用于 iOS/Andoid/软路由等嵌入式设备进行代理的 URI Scheme。\nWindows 客户端配置 操作前，请确保你的 v2rayN 客户端已更新至最新版本。\n下载 hysteria-core 访问 hysteria releases，在「Assets」找到最新版本的hysteria-tun-windows-6.0.amd64.exe，下载。文件名随着时间推移可能会有所变更，留意时效性。\n下载 hihy 分流文件 访问 hihy releases，在「Assets」找到最新版的压缩文件，如 v2rayN-hysteriaCore.rar，下载解压。这个包中的文件我们只会用到 acl ，此处先按下不表。\n启动 v2rayN 添加自定义配置服务器 在界面的「服务器」一栏中选择「添加自定义配置服务器」。 在「自定义配置中」点击「预览」，弹出一个窗口，访问 v2rayN 的项目根目录。\n将 hihy 中的 acl 文件夹以及 hysteria-tun-windows-6.0.amd64.exe 拖入到此窗口中（也即拖入到 v2rayN 的根目录下）。\n在 v2rayN 的根目录下选中 config.json模版文件，点击 「打开」 自动拷贝一份配置文件。\n在自定义配置窗口下点击 「编辑」，弹出 UUID 源文件窗口，将刚才复制的 json 配置信息复制进来。\n注意： 若你使用 hihy v3.7+ 版本，自动生成的客户端配置（http，socks5）已自动适配 v2rayN 的系统代理监听端口，无需更改。\nModify listen port。将 http 以及 socks5 字段改为如下内容。也即将 http 监听端口改为 10809，将 socks5 监听端口改为 10808（对接 v2rayN 的端口配置即可）。\n1 2 3 4 5 6 7 8 9 10 \u0026#34;http\u0026#34;: { \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1:10809\u0026#34;, \u0026#34;timeout\u0026#34;: 300, \u0026#34;disable_udp\u0026#34;: false }, \u0026#34;socks5\u0026#34;: { \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1:10808\u0026#34;, \u0026#34;timeout\u0026#34;: 300, \u0026#34;disable_udp\u0026#34;: false } Select Core Type。修改端口后保存并关闭配置文件。回到此处，在「Core 类型」中选择 hysteria ，确定，保存。完整配置后的参考截图如下： 连接测试 选中新加入的代理服务器并启动系统代理。若配置正常，即可正常访问互联网。\n[可选] Socks5 系统代理 这里介绍一种通用的客户端代理方法，同样是凭借 v2rayN 图形化客户端启动 hysteria 代理。\n修改节点客户端配置\n以同样的方法打开 uuid 配置文件，将 http 的监听配置删去，修改 socks5 的监听端口，建议不与常见端口冲突，如可设为 8889。\n启动 hysteria 服务\n从 v2rayN 根目录启动 shell，运行 hysteria 服务，配置文件在“当前目录”的 guiConfigs 文件夹下。\n假设 v2rayN 根目录路径为 C:\\v2rayn，hysteria 文件名为 hysteria-tun-windows-6.0.amd64.exe，节点客户端配置文件名为 UUID.json，那么可以假设的命令行如下：\n1 C:\\\\v2rayn\u0026gt; hysteria-tun-windows-6.0.amd64.exe -c guiConfigs\\\\UUID.json 运行成功后可以看到如下输出日志，说明服务启动成功。\n1 2 时间 [INFO] [addr:服务端IP:服务端port] Connected 时间 [INFO] [addr:127.0.0.1:8889] SOCKS5 server up and running 添加 Socks5 服务器\n唤出 v2rayN 主界面，右键空白处，在弹出的菜单中选择「添加 Socks 服务器」。\n以上文所述内容为例，此处分别在地址（address）以及端口（port）处填写 127.0.0.1 以及 8889，别名（remarks）随意，其余不动。\n注意： 如果你额外设置了用户名及密码，在配置窗口中对应填写即可。\n连接测试\n选中刚创建的类型为「Socks」的 inner-hysteria “套娃节点”，启动系统代理，以你喜欢的方式运行一系列的指标检测。\n值得一提的是，使用本方法在 v2rayN 中添加的配置项，可以使用 v2rayN 内置的测速功能（如真延迟，速度测试等），而根据上一节创建的类型为「Custom」的节点则不行（留意时效性）。\n组合推荐\n通常情况下推荐使用 2.3 介绍的方法直接添加服务器。\n如果你依赖 v2rayN 的内置工具完成一些必要的测试工作，我建议你将指向同一个服务端的客户端配置文件分写，既使用完整的配置用于直接启动 hysteria 客户端代理，另起一个配置文件仅用于添加 Socks5 服务，在需要测速时按照 2.4.2 中介绍的方法手动运行 hysteria 服务，最后进行测速。\nSpeedtest 测试 本人使用多个代理节点进行对比测试后发现，hysteria 对素质较差的代理节点有较大提升，尤其在网络拥堵时间段。如下测试仅为不严谨的「玄学对比定性分析」，请忽视各种所谓的「测不准」因素。\n以下测试中，左组均使用 hysteria-core 进行 100Mbps 下行，10Mbps 上行的带宽限制（有 1.25 倍冗余溢出）；右组均使用 xray-core ，拥塞算法 bbr，队列算法 fq。\nVPS/Solution hysteria-core \u0026amp;\u0026amp; wechat-video xray-core \u0026amp;\u0026amp; Trojan TLS CloudPowerall Racknerd PacificRack BandwagonHost Youtube 测试 如下测试使用同上文一样的限制策略。\n测试方法是，播放 Youtube 视频 Switzerland in 8K ULTRA HD HDR - Heaven of Earth (60 FPS) - YouTube ，播放源 7680x4320@60 ， 从 1:30 持续播放至 2:50，取 2:50 时刻的截图（在这段时间内我会关注连接速度的取值，如果截停瞬间出现了偏离正常区间的异常数值，我会剔除这个样本并继续播放视频 1~2s 并取位于正常区间或附近的正常值）。不同节点和代理策略切换时，使用控制台清除本地缓存。测试时间段并非晚高峰。\nVPS/Solution xray-core \u0026amp;\u0026amp; Trojan TLS hysteria-core \u0026amp;\u0026amp; wechat-video CloudPowerall Racknerd PacificRack BandwagonHost ","date":"2022-04-05T23:42:34+08:00","image":"https://blog.echosec.top/p/v2rayn-hysteria-tutorial/3593983_hu3d03a01dcc18bc5be0e67db3d8d209a6_102304_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/v2rayn-hysteria-tutorial/","title":"『Blog』V2rayN 配置 Hysteria"},{"content":"Backstory 🔨 分享一个有关立项的故事。\n去年月底某友在群里分享了一个他自己 fork 的 epicgames-claimer 的项目，添加了 Actions 的特性，能够借助工作流实现定时领周免的需求（非滥用），高能现场如下：\n当时我正在搓其他项目的代码，甚至还没点开这个链接，只是感觉这个点子感觉挺“曼妙”的，仅仅是留下印象而已。但巧就巧在- -我当时正在搓的项目是与 anti-CAPTCHA 密切相关的任务。\n直到今年年初，1月14日左右，项目告一段落，有了阶段性的积累，对整个领域的技术模块和特性有了充足的了解（其实非常浅嗯）。在一次无意间的检索中 ，以CAPTCHA 为关键词又重新搜到了这个项目（原来 Epic 真的可以免费领取游戏！用了老半年的 Epic Games Launcher 都没发现同一个客户端还有个游戏库的选项）。\n我翻了翻“评论区”，情况不太乐观- -不少玩家反应 CAPTCHA 阻挡验证的问题，但维护者疏于忙碌，暂时无暇升级项目，同样的报错议题已经累积的一个月之久。车祸现场如下：\n当时想着自己对人机挑战略知一二，便翻起了项目源码，看看大佬是如何梳理整个业务流程的。\n但很遗憾\u0026hellip;\u0026hellip;这项工作持续不到 10 分钟我就放弃了。我用成分分析工具解剖了核心业务类EpicgamesClaimer() 后发现，这个看似朴实无华的玩意，竟然塞进了 59 个类方法，还放入了意义不明的 async 事件循环，大概情况如下图所示：\n（os：没有讥讽的意思，这里表露的只是我当时的第一反应，确实没见过这样的场面-。-\n至此，一个重头构写「Epic免费人」的想法诞生了。但起初，我是奔着 hCaptcha challenge 去的，刚积累了这么多料子，正好遇到一个可以练手的挑战，不趁热打铁怎么行，于是我在该楼层下烙下一句“问题不大”后，创建了一个空白仓库，开始设计新项目的技术模型。\n🤦‍♂️emmm\u0026hellip;现在是北京时间 2022-01-29 01:23 博客写到这的时候发现这个仓库被封掉了……真是一言难尽。\nLittle changes 🍜 分享一些本项目中有关「人机挑战」的重点与难点。\nUndetected Flow 📋 要处理 hCaptcha challenge 首先要有可以隐藏控制特征的自动化技术。\nPreview 如果读者和 CAPTCHA 打交道的时间不够长但又刚好会一点浏览器自动化技术，你可能会抢答“这个反爬用普通的伪装过不去，必须用浏览器自动化！”，大概率是这样，但不够精确，应该改成“无定向的浏览器自动化”技术。\n咱们做个小测试，分别以手动，编写 selenium 脚本，以及 selenium headless 脚本的形式访问这个链接 https://bot.sannysoft.com/ 。\n手工打开的浏览器是我们所谓的“正常特征”，如下图所示（页面中还有很多的参数项，篇幅有限就不多展示了）。\n使用默认参数启动的浏览器会有很多被标红的“异常特征”，如下图所示（页面中还有很多的参数项，篇幅有限就不多展示了）。\n接下来，您可以复制如下代码进行无头访问，并以截图的形式检查回馈参数：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import os from selenium.webdriver import Chrome, ChromeOptions from webdriver_manager.chrome import ChromeDriverManager def demo(): path_screenshot = \u0026#34;stander_headless.png\u0026#34; options = ChromeOptions() options.headless = True with Chrome(ChromeDriverManager(log_level=0).install(), options=options) as ctx: ctx: Chrome ctx.get(\u0026#34;https://bot.sannysoft.com/\u0026#34;) ctx.save_screenshot(path_screenshot) os.startfile(path_screenshot) if __name__ == \u0026#39;__main__\u0026#39;: demo() 测试结果截图如下：\n是不是感觉很惊讶？还在以为其实浏览器自动化可以胜任爬虫的工作吗？\nSelenium Documentation 中也明确说道，浏览器自动化工具用于爬虫业务并不符合最佳实践的要求，因为 WebDriver 的特征检测技术老早就普及使用了，几乎是和 selenium 同个时代的技术。\n这时候有的读者可能会说，我们可以添加 ChromeOptions() 呀。好的，现在尽你所致，把你知道的所有参数都加上，再次访问。你也许会发现表格上的“正常特征”会越来越多（截图展示的仅是部分参数），这是一件好事吗？我们先按下不表，但你是否发现，无论你怎么努力，表格中 WebDriver 一项始终是“异常的”。好的，现在我明确告诉你，截图中的 WebDriver 是识别控制流量的关键指标。\n这也解释了为什么处理 CAPTCHA 要先解决 undetected flow 的问题。现代化的人机验证都会通过前置的 JavaScript 脚本捕获用户的页面控制轨迹，一旦驱动的 WebDriver 指标亮起，你的一切后续操作都是徒增功耗，即使人机挑战“通过”，你也无法获取正确的身份令牌。\nSolution 兜了这么大的圈子，这里要介绍一个在业界几乎没有竞品的项目 undetected-chromedriver。通过它，我们可以安全地隐藏驱动控制特征，将我们所有的业务逻辑安全地送到人机挑战页面。关于这个项目的特性我会另开博客详细介绍，其中大有门道。\n此处，你可以通过如下引导快速复现一个“无踪环境”，并得到驱动测试参数。\n1 pip install undetected-chromedriver==3.1.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # -*- coding: utf-8 -*- # Time : 2022/1/27 6:02 # Author : QIN2DIM # Github : https://github.com/QIN2DIM # Description: import os from undetected_chromedriver import Chrome def demo(): path_screenshot = \u0026#34;undetected_headless.png\u0026#34; ctx = Chrome(headless=True) try: ctx.get(\u0026#34;https://bot.sannysoft.com/\u0026#34;) ctx.save_screenshot(path_screenshot) finally: ctx.quit() os.startfile(path_screenshot) if __name__ == \u0026#39;__main__\u0026#39;: demo() undetected-chromedriver 无头启动\n可以看到，我们在不指定任何参数的情况下，WebDriver 指标是正常的。\nundetected-chromedriver 正常启动\n在正常启动且不指定任何可选参数的情况下，WebDriver 指标是正常的，不仅如此，其他所有的主要特征都通过了验证，和我们手动打开网站得到的结果几乎是一样的。\nTrouble 到此阶段，我们可以回顾一下 EpicgamesClaimer 项目中遇到的第一个困难，那便是整个项目与 Puppeteer 强绑定，维护者几乎为每一个原子操作都做了修饰封装，而 puppeteer（也可称 pyppeteer） 与 Selenium 一样都是主流的自动化测试框架，并不具备隐秘特征的能力。所以，维护者几乎只能基于 pyppeteer 的生态寻找类似的解决方案，或基于 pyppeteer 底层特性寻找突破口，或选择 undetected-chromedriver 嫁接开发。但无论选择哪一种，代价都是极其惨痛的。\nThreat Level 📋 正所谓「知己知彼百战不殆」，在硬刚人机挑战之前，我们得先知道 hCaptcha challenge 的运作逻辑，以及「验证通过」「威胁等级」如何定义，我们才能优雅地通过测试，并将挑战模块无缝地衔入到主线业务中去。\n感兴趣的朋友可以参考一下 M. I. Hossen 等人的攻击方法 doi: 10.1109/SPW53761.2021.00061.\n文章里详细介绍了人机挑战的前世今生以及当下主流的人机挑战形式；总结了 hCaptcha 差异特性，并简要说明了一些 element 的获取思路与模型训练的实验步骤。点击快速打开 PDF 预览文章。\npreview 其中有一些值得注意的现象，在论文摘要中作者写道：\nWe evaluate our system against 270 hCaptcha challenges from live websites and demonstrate that it can solve them with 95.93% accuracy while taking only 18.76 seconds on average to crack a challenge. We run our attack from a docker instance with only 2GB memory (RAM), 3 CPUs, and no GPU devices, demonstrating that it requires minimal resources to launch a successful large-scale attack against the hCaptcha system.\n在正文中作者详细解析了数据组成：\n\u0026hellip;Our deep learning classifier (the Solver) takes 3.79 seconds to classify the images (usually 9) in a challenge, on average\u0026hellip;\n然后奉上了图3，作者将业务耗时拆分成浏览器自动化的耗时以及图像分类任务的耗时，可以发现浏览器控制用的时间占了一次业务中的绝大部分（符合常识）。\n但其实我是蛮疑惑的，首先是这个 3.79s 的数据是如何算出来的。我们处理 hCaptcha 一般有两轮验证一共 18 张图而这里用了 usually 9；其次，当我们的威胁等级足够低时，我们甚至会在激活 checkbox 后跳过人机挑战。\n然后是 18.76s 的平均总耗时其实也是实验条件下的结果，至少拿 Epic 更新身份令牌的行为来说，我们启动「挑战者驱动」可能就要用 15s 。文章中的浏览器操作耗时的具体行为包括「初始化挑战（进入页面加载页面）」「与 checkbox 交互并激活挑战」「提交挑战」以及「验证挑战是否成功」，忽视了最耗时的图片下载过程，其次在验证挑战是否成功环节，真实业务场景需要进行非常复杂的元素断言，而在实验环境下几乎只用判断按钮是否能继续点就可以（排除判断）说明挑战是否成功。\nWe found that hCaptcha often repeats images across different challenges. We computed the MD5 hashes of 48330 images collected from the hCaptcha challenges during our analysis and identifified 9854 redundant images belonging to 1985 sets of identical images.\n作者后文说道，他们发现挑战中经常遇到重复的图片，于是用了感知哈希判断在多伦测试中攒下来的图片中有多少重复的。真够狠的爬了五千多次。。\nSolution Synergy framework 📋 协同框架立大功！\npreview 根据上文可知，CAPTCHA 一般都设有时间限制，一段时间内未通过测试页面元素就会自主刷新过时。我们知道，下载图片恰巧是个经典的网络I/O耗时场景。因此，我不由地想到利用协程技术缩短人机挑战的耗时，提高容错。\nSolution 轻量可移植的协同任务框架 在本项目 utils 中存放着一个轻量化的 Synergy framework ，其核心业务代码可见 CoroutineSpeedup()。打上 monkey 鸡血补丁后，协同任务开始运作。\n使用 gevent 而不是 async gevent 是作者编写 Python 协程的常用方法。相交于 async ，使用 gevent 能够更自如地控制模块的布局与业务的上下文联系，不必为了接口的兼容关系割裂本该完整的函数体；从整体上看，这也能让实现同一逻辑的代码更加规范整洁雅观；从 Python 新手来说，gevent 不需要改动原始代码的逻辑就能实现协同，这给还未深刻理解 async 的朋友来说降低了很多的理解门槛。借知乎网友的话就是“手动挡和自动挡的区别”，个人觉得是非常真实了。但此处也有个坑，也是本项目目前遇到的最大技术难题，后文细说。\n45路公交与自行车 原先的 for loop 循环下载一轮挑战的 9 张图片的总耗时为每张图片下载耗时之和，而在协同任务中，总耗时为单图的最长耗时，由此极大缩短数据集拉取的时间。\n在 GitHub Actions 里这是一种体感差距，几乎瞬间拉取，如下图所示。\n而在国内网络条件下，这就是判定挑战能否开启的守门员指标。从本人的网络条件来说，在不开启代理的情况下，300MB 带宽跑满拉取位于国外服务器上的图片，每张图花费将近 10 秒的时间，如果不引入协同下载的概念，光是下载图片我们都要干等一分半，而同样的时间，已能在工作流中结束一次人机挑战了。\nHappy Freebie Claiming Reference ","date":"2022-01-28T23:45:18+08:00","image":"https://blog.echosec.top/p/epic-awesome-gamer/pexels-pixabay-219552_hu3d03a01dcc18bc5be0e67db3d8d209a6_321303_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/epic-awesome-gamer/","title":"『Blog』Epic Awesome Gamer"},{"content":"推荐工序 本段简述使用 Windows 桌面代理客户端 v2rayN - V5.9 更新订阅并优选代理节点的推荐步骤，其他软件同理。\n节点优选 Step1：更新订阅\n打开软件先更新订阅。\n注意：在 v5.9 中可以选择通过代理更新订阅。在旧版本中默认使用直连通信更新订阅。\n若开启代理，更新订阅的流量由 v2rayN 转发；若正在使用的订阅已过期（或节点失效），会出现一些不可控的异常输出。\n在一些极端情况下必须使用系统代理更新订阅，如：目标服务器设置了身份认证，或更新订阅需要访问的站点IP已被墙（这种情况下 使用A提供商的节点挂起代理并更新订阅A订阅组可能会出现问题，需要使用其他节点挂起代理）。\nStep2：等待UI刷新\n若订阅过期或异常，控制台会显示「订阅更新失败」或不显示节点列表； 若更新成功，则显示更新后的节点列表。 Step3：测试服务器延迟 ping\n测试目标节点是否开放连接，测试目标IP是否被墙。\n快捷键 Ctrl + P\n选中订阅组的 所有节点，Ctrl + P 批量测试节点延迟。\n若返回正确的 ms 延迟信息，说明节点没有被墙； 若返回 Timeout 说明节点无法连接，不可用。 Step4：测试节点真延迟\n测试目标节点代理功能是否正常运行。真延迟在数值上反应了网页打开的速度。\n实验条件下，真延迟越低，网页响应速度越快（页面元素加载越快），而真延迟与“物理距离”有较大关系。\n快捷键 Ctrl + R\n小批量 选中上一步并未 Timeout 且值得关注的节点，测试节点的真延迟。\n真延迟测试前提是能通过 ping 测试，也即上一步中 ping 出 timeout 的节点已经没有必要进行真延迟测试了。\n这一步输出正常 ms 延迟信息的，说明节点的代理功能正常。\nStep5：测试服务器速度\n用代理下载 \u0026ldquo;http://speedtest-sgp1.digitalocean.com/10mb.test\" ，用时与大小相除。\n快捷键 Ctrl + T\n单选 通过真延迟测试的服务器节点进行测速。选择下载速度最快的节点连接使用既可。\n若出现 在 WebClient 请求期间发生异常 并不表示节点不可用（通过真延迟测试的节点的代理功能正常，出现速度测试异常的可能原因是本地网速太慢或目标服务器的负载紊乱）\n节点服务器速度与本地带宽关系如下（实验期望）：\n此处的「服务器速度」指v2rayN测量值，「本地带宽」指跑测试的实时网速。\n本地带宽 服务器速度(limit) 0~50 Mbps 0~2 Mbps 50~100 Mbps 2~6 Mbps 100~300 Mbps 6~15 Mbps 300~500 Mbps 15~27 Mbps 500~1k Mbps 27~ Mbps 这是个玄学变量关系图。这个映射关系与当前时段线路拥塞状况，本地实时带宽状况，节点服务器负载状况（或端口限速）等多种变量有关，并不是个能严格控制的映射关系。\n实际上，当服务器速度（观测值）有 4~5 Mbps （行话油管速度四万左右）已经能流畅观看 4K Playing bitrate Netflix，也能“秒开” 4K Youtube 视频。\n上表给出的建议方案较为保守。一般情况下，你的 Connection Speed 大于 2.2Mbps 就能几乎不卡顿地观看 4K Youtube 视频（行话油管速度两万五）。\n总结与注意事项 除了 Ping 测试，其他测试都不可一下子选中所有节点服务器操作，否则会出现大规模的数据偏差。\n真延迟测试：建议根据个人喜好手动选择 remark 标注的地区节点，进行小批次的分段测试。\n推荐使用的地区节点降序排列如下：\n香港 \u0026gt; 新加坡 \u0026gt; 日本 \u0026gt; 韩国 \u0026gt; 美国 \u0026gt; 其他\n速度测试：建议单选测速。\n若订阅服务器IP / 域名被墙（无法更新订阅或无法通过 ping 测试），你需要使用代理更新订阅，也即使用其他家的节点挂起本地全局代理后更新被墙订阅。\nv2rayN 的节点测试功能并不严谨，当你认为测试结果明显不符预期，可重复测试。\n显然，ping 延迟和代理网速没有必然联系。\n一个明显的实验结论是：当你能跑满本地带宽 100Mbps 且代理节点的端口限速 ≥ 100Mbps 时，必然能畅通无阻地浏览 4K Youtube Video。\n边缘测试 多快网速可看 4K Youtube Video？ 数据来源：系统要求 - YouTube帮助 (google.com)\n视频分辨率（Res） 建议的持续速度（Connection Speed） 4k 20 Mbps 高清1080P 5 Mbps 高清 720P 2.5 Mbps 标清480P 1.1 Mbps 标清360P 0.7 Mbps 设备当前可看的分辨率组与本机硬件配置，网速以及浏览器有关。例如，截止至 2021-11-29，几乎所有手机/平板仅能观看最高 1080P 的视频；绝大多数 Windows 笔记本仅能观看最高 4K 的视频，而近几代 macOS 笔记本可解码并观看 8K HDR 视频。\n如何突破代理速度瓶颈？ 推荐顺序：升级本地带宽套餐 \u0026gt; 升级无线路由器配置 \u0026gt; 升级代理配置\n升级本地带宽套餐（提高网速上限）\n特指从 ≤100 Mbps 的本地带宽套餐提升至更高级别，若已满足则无需调整。\n升级带宽套餐成本最低，带来的提升最明显。\n若你使用软路由有线桥接主路由，使用 Friendly ARM NanoPI R2S 可接管的忙时带宽为 800 Mbps（实验条件下的极限值），也即一般情况下，家用带宽 ≤ 500 Mbps 都可以跑满，无需升级。\n升级无线路由器配置（提高网速下限）\n当你的本地带宽套餐 ≤ 100 Mbps 时不考虑本方案。\n若为普通家庭无线上网环境（非无线桥接，非 Mesh 组网环境，非网线直连），建议摆在客厅的无线路由功率 3000M+（营销行话：双频千兆无线路由器，而且不是 1 千，是 3 千；官方售价一般￥250+）。 若是 6 人左右的高校宿舍使用，建议无线路由器功率 1600~3000M。 路由厂商推荐顺序：小米 \u0026gt; TP-Link \u0026gt; 华为，主要考虑因素为性价比。\n升级无线路由器配置的根本目的是提高「带宽升级」带来的收益，也即提升代理速度的下限。\n升级代理配置（提升代理质量，也即提升网速稳定性）\n当你的本地带宽套餐 ≤ 100 Mbps 时不考虑本方案。\n本方案包括但不限于“升级机场套餐”“自建节点机房更换（线路优选）”\n当然，若你使用的是白嫖节点，发现当前节点明显跑不满带宽时更换其他白嫖节点是最便捷的“瓶颈突破”方案。一般情况下，公网上暴露的白嫖节点都难以跑满带宽，横向比较下优选既可。\n升级机场套餐\n仅当 端口限速 \u0026lt; 带宽速度 且有更快代理网速 需求 时更换。\n自建节点机房更换（线路优选）\n不作介绍（本文面向的读者群体独自操作此种方案有反向优化风险）\n","date":"2021-12-13T22:17:48+08:00","image":"https://blog.echosec.top/p/v2rayn-subscribe-update/1805246_hud8bd33741d67273392d449972b3d1f5f_818283_120x120_fill_box_smart1_3.png","permalink":"https://blog.echosec.top/p/v2rayn-subscribe-update/","title":"『Blog』v2rayN 订阅更新最佳实践"},{"content":"项目简介与使用指南 V2RSS 是一个能对全球范围内基于 SSPanel-Uim 框架产出的服务提供商进行垂直挖掘的「生态矿机」；能够自下而上地生成针对主流协议头的「聚合采集」任务；能够自我消化并产出相较于 proxypool 更加纯净可靠的代理节点；具备自主发现，服务自愈等强大的生产特性。\n有关云彩姬（panel）的介绍详见 技术文档 ，了解软体获取方法以及功能介绍。 有关云彩姬（public-service）的介绍详见 项目仓库，了解服务部署方法。 最佳实践 Synergy与延迟反射机制 简介 synergy 在计算机领域中有“协作”“协同”的定义；\nsynergy 在大多数情况下 与「延迟反射」一起使用，并称「协同反射」，是一个在 v2rss v4.5.5 版本中开源的模式；\nsynergy 基于集群运行，具备「任务超载」「服务自愈」等高级特性，即使在所谓高峰期也能高效完成协同任务。\n特性 客户端玩家无需关心「协同反射」的上游实现逻辑。「协同反射」在客户端的表现为：能通过协同注册的方式拉起不可用节点，续订过期链接， 延拓订阅可用流量，而这种延拓具有一定的延迟回馈。\n也即当您使用客户端请求/获取一条订阅链接并在更新订阅后通过 remark-label 得知订阅可用流量仅有 1GiB/2GiB/几十MiB 时，不必着急质疑上游服务质量，您可以等待一段时间后更新订阅，体会「synergy」机制带来的体验升级——当前订阅的可用流量持续增长（更新订阅后通过 remark-label 观察 ），这个过程将在 30~120s 内完成，可用流量将增长 10GiB+。\n在 v2rss v4.5.6 服务优化版本中，「延迟」的概念被逐渐淡化。“流量延拓”的行为被桥接至消息队列中，也即每当有新的链接入库，「synergy」机制就会生效 ，为 proxy-pool 中的订阅延拓可用流量。换句话说，大多数情况下，用户获取到的链接的可用流量已被完整“延拓”；仅当需求高峰时，synergy 来不及执行，用户才会获取到“正在被处理”（订阅当前的剩余流量明显不满足日常需求）的订阅链接。\n警惕重用与覆盖 简介 v2rss 客户端 使用 easygui 编写，是一个纯静态前端面板（这是云彩姬 panel 敏捷开发中的遗留 BUG），即便数据端使用 redis 高速缓存维护 proxy-pool，也无法应对「请求覆盖」等并发需求场景。\n换句话说，用户通过「查看订阅」观察到的订阅列表可能已经变更，可能的改动为：其他用户取链接，上游服务清除无效订阅，此时用户依据可视内容而选取的链接很可能是“已被获取的链接”以及“已被清除的无效链接”。后一种情况较为罕见，而一旦出现前一种情况，就非常麻烦了。绝大多数服务提供商都会限制 low-level 节点的设备并行连接数，这种限流机制通常是通过逻辑脚本进行监听的，当多个IP共享同一订阅并触发断流机制时，代理用户的订阅链接将被重置（轻则流量清零重则删号，这是服务提供商用以防止流量泄露的常用方案）。\n推荐用法 使用「快速获取」替代「查询获取」\n快速获取操作依靠 redis 自带的机制运行，具有全局原子性，不会引发上文所述的恶劣情况（redis 常用于百万并发的应用场景，而由云彩姬 panel 的并发量一般情况下不会超过 2 位数，放心使用）。\n减少「查询」与「获取」间的衔接用时（🤷‍♂️）\n如上文所述，节点列表反应的并不是 proxy-pool 的实时状态，减少操作衔接用时可以避免获取到“已被其他用户获取”的订阅，但实际上这无法避免这条链接被其他用户获取（也即B用户在你获取订阅前查询 proxy-pool，那么你已获取的链接依然会出现在他的 panel 中，他有 1/pool_siz 的概率点中你已获取的链接👀）。\nUser_profiling 与 beat_dance 采集器会根据群体画像（基于Relative Daily Activity Figures，Action Value 以及 Corrected Accuracy）调整任务的发起顺序（原子概率）。\nRelative Daily Activity Figures：群体喜好与需求量。建立“节点速度”“可用时长”“一次性可用流量区间”等喜好程度标签。 Action Value：运行评分，与资源占用率和获取效率有关。 Corrected Accuracy：模型会根据实时的需求变动预测下一时间段的需求走向，并根据观测值不断修正并精确画像模型。 呼吸节拍（beat dance）是一个协调运行实例的上层抽象，它基于定时任务和群体画像（user profiling）生产工作周期稳定，带有“运行时停顿”等行为特征的运行实例。\n以上两个机制共同决定了采集器的启动权限，启动时间，工作时长，运行功率以及运行时各个生命周期间的休眠时间。\n开放使用的 proxy-pool 容量较低，以减轻不可抗力因素与恶意行为对数据集造成污染。一般情况下 pool-length ≤ 50 \u0026lt; pool-cap。\n","date":"2021-12-13T22:15:59+08:00","image":"https://blog.echosec.top/p/v2rss-best-practice/gcc06ab1cf_hu53c1d4ecb1da74dbcf98cc31247fba58_403037_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/v2rss-best-practice/","title":"『Blog』V2RSS云彩姬最佳实践（阶段Ⅰ）"},{"content":"摘要 本文总结截止至 2022年06月，Python 开发环境的最佳实践（以 Windows 为例）。从大型应用和小型脚本项目两个角度出发提供规范化的环境搭建思路，并尽可能地避免环境搭建中的偶发性 BUG。\n引言 总体思路如下：\n大型项目使用 Pycharm + Miniconda搭建开发环境； 小型脚本项目使用 Visual Studio Code 及其自带编译组件搭建开发环境。 总体上建议打算长期学习 Python 的开发者使用第一种方案，而后一种方案适用于将 Python 作为第二语言（辅助语言），并已完全掌握 VS Code 使用套路的玩家。\n本篇博客的受众可能并不包含完全零基础的小白玩家，任何疑问都可在评论区留言，本人会一一答复。\nPycharm + Miniconda 两款软件的下载安装是并行的，不必区分先后顺序，可以同时下载安装配置。可在一款软件安装读条时可以操作另一款软件，仅在明文提示需要停顿的地方切换操作。\nInstall Pycharm Edition 总体安装流程可参照 菜鸟教程（不过也没啥好参照的，Windows 安装就是点「下一步」就完事了）。\n官方下载地址 Jetbrains。\n此处以社区版（Community）安装流程说明「需要特殊处理」的步骤，没有说明的地方点击「下一步」既可。\nChoose Install Location\n选择安装路径。当您的设备区分盘符时，一定选择非系统盘存储。创建一个或选择一个专门用于存储编程工具的文件夹安装 Pycharm，这尤其重要，而且路径中的任意一层不得出现中文，尽量不要出现空格。\n需要额外注意的是，Pycharm 会自动为软件本体包裹一层文件夹（如下图所示的Pycharm Community Edition 2021.2.3），若你下载的（其他软件）的 Destination Folder 不显示包裹的文件夹名，务必手动创建一个「子文件夹」将其包裹，否则你安装的文件可能会散落到你选择的目录下。若不注意，你的工具文件夹就会被污染，各种配置文件或核心文件散落在文件夹中，后期打扫时动都不敢动。\n如下图所示为作者常用设备中，「专门用于存储编程工具的文件夹」的内容及存储路径。可见此目录存放于路径 E:\\\\ProjectFire（非系统盘+英文路径），此目录下除了 Pycharm 还存放了其他常用的开发工具，比如下文将要介绍的 Miniconda 以及 Microsoft VS Code。\nInstallation Options\n配置安装选项。以「 2021.2.3 Pycharm Community Edition」 安装面板为例。解释相关配置项的含义及其在开发环境中的具体作用，并给出配置建议。\nCreate Desktop Shortcut\n创建桌面快捷方式。不作建议，开心就好。此处为了操作的连贯性，可以勾选，免得安装完毕后软件本体不自动打开，还得花时间找软件比较麻烦，环境配置完成后可手动删除快捷方式。\n当然若你使用 uTools 等优秀的桌面工具，可以无视此段介绍。\nUpdate Context Menu\n更新上下文菜单。当你在文件夹中右键空白处，可在「右键菜单」中选择以当前文件夹为根启动 Pycharm。推荐勾选，这不会影响所谓系统性能，当你想在本地快速阅读某个 GitHub 项目源码时，可在本地空白文件（比如桌面新建文件夹）Clone 代码，然后以此种方式快速启动 Pycharm。\nUpdate PATH Variable(restart needed)\n将 Pycharm 软体的 「bin 文件」添加至系统环境变量。推荐勾选，重启生效。建议在安装完毕后选择 「I want to manually reboot later」并在 Miniconda 安装配置后一并重启。\nCreate Associations\n创建软链映射，打开 .py 格式文件时以 Pycharm 作为编辑器启动。不推荐勾选。\nPycharm 显然不是一个轻量的集成开发环境。当你仅想阅览某个 .py 文件的代码时，使用 Pycharm 打开并不是个明智的选择，这是个启动速度相对较慢的解决方案。无论是否有其他替代方案，都不建议使用 Pycharm 启动，如果实在不妥，你用记事本打开都行。\n举个不恰当的例子，使用 Pycharm 单独启动某个 .py 文件，相当于看个 15s 的短视频还要非常弱智地看 15s 广告。当然如果你的设备有 32GB+ 内存，从硬件层面就足以秒开一切 Jetbrains IDE，可以无视此段介绍。\nGarbage Collection\n安装步骤中不存在这步。此处用于说明我们从官网拉取下来的仅是下载器，当我们使用下载器安装软体后，可将下载器安全移除，回收其占用的空间。\n同样，需要一个良好的习惯，在非系统盘符专门创建一个文件夹管理各个软件进程的「运行缓存」或「下载缓存」。下图路径为作者用于管理浏览器下载缓存的目录，红色箭头的标记目标为下载器本体，可将其安全删除。\nPycharm Settings 以你喜欢的方式打开刚安装好的 Pycharm Community Edition。\n此处我们不需要迅速实现所谓「Hello World」打印项目，而应该先着手于调整下文所述的最佳实践配置。\n举个不恰当的例子，就像上了车，我们应当习惯于先调整后视镜，调整座椅，检查各项机能，寄上安全带，调整舒服的坐姿，在车况安全的情况下起步。入门任何技术栈都应当如此，所谓「工欲善其事必先利其器」指的不仅仅是挑选一款强大的工具，更要学会如何充分发挥它的优势，让它成为符合自己使用习惯的生产力伙伴。\n而退一步讲，我们暂时还没有配置 Python 解释器，是无法正常运行 Python 代码的。\nMarketplace 安装对你来说可以降低这款编辑器使用门槛的必要插件，此处推荐几款作者在日常编码中较为常用的第三方插件。\n请注意，插件的安装或更新在重启软件后生效。\nChinese(Simplified) Language Pack / 中文语言包\n此款插件可以汉化 Pycharm，汉化进度与软件最新特性保持一致。在插件市场中检索 「Chinese」既可获取插件。\n重启软件后，界面汉化。\n当然，此处需要提个醒，此步骤仅仅是降低「上手门槛」，接触编程必须熟悉常用的领域词汇，当你足够熟悉这些概念的时候，可适时停用此插件。\nTranslation\n这是一款能够嵌入在 Pycharm 中的翻译软件，通过它，我们可以实现代码上下文的「划词翻译」「语义文档」等比较方便的功能。\n插件市场中检索「Translation」既可获取。\n如下图所示为该插件上下文「划词翻译」的大致效果：\n当然也可以反向操作，如下图所示。这是个「可替换缓存」菜单，点击候选项可快速替换选中内容。\n目前插件支持四种翻译引擎，如下图所示。Google 翻译可以使用免费的 API，当然其他的也是免费的，但需要自行配置 Token 以及 Secret ID。插件默认使用 Google 翻译引擎，相关设置可在「设置（Settings）」→「工具（Tools）」→「翻译（Translation）」里设置。\nCustomize 调整对你来说比较舒服的默认主题样式以及键盘映射。编码是一个耗时费力需要长时间专注的工作，请对你的眼睛好点。\n推荐使用的 Python 编程字体为 Source Code Pro，JetBrains Mono，字号和行距与你的工作条件以及编码风格有关。\nKeymap 建议作为手册查阅，在开发环境配置成功后回看。（持续更新\u0026hellip;\u0026hellip;）\n这里总结了一些 Pycharm 中可以提高生产力的快捷键。\n格式化代码 Ctrl + Alt + L\n值得一提的是，这与 TIM/QQ/网易云音乐 的默认热键冲突，建议修改这些软件的配置。\n运行上下文程序 Shift + Enter\n详见下文 Python Interpreter 最佳实践中的 「run」部分介绍。\nOther 建议作为手册查阅，在开发环境配置成功后回看。（持续更新\u0026hellip;\u0026hellip;）\n这里总结了一些 Pycharm 中可以提高生产力的设置。\n调整粘性内存，加快 Pycharm 响应速度。\n在菜单栏中选择 「Help」 → 「Change Memory Settings」\n如下图所示为作者设置的 Maximun Heap Size：12288MiB ，参考设备的物理内存为 16GB，根据你自己的情况设置。此处需要留意 MiB 和 MB 是不一样的计量单位，详见 MiB to MB Conversion。\n调整 Code Completion，提高代码补全效率\n打开设置，选择 「Editor」→「General」→「Code Completion」，将 Match case 反选。\nMatch case 根据特征字符进行编码补全。我们反选后，我们的代码中仅需出现目标对象/方法/函数的任意大小写字符仅可触发推荐补全，非常方便。\nPython 编程规范中，习惯上使用大驼峰命名类变量（Class），使用蛇形法命名方法（Method）和函数（function）。\n大驼峰：不同单词首字母大写如 CoroutineEngine() 蛇形：统一小写不同单词用下划线_隔开如 handle_html() 显然，编码过程中频繁切换大小写很容易把中文输入法给按出来，打断我们的编码思路，是个非常搞心态的事情。\n下图所示即为全特征索引补全的效果。\nInstall Miniconda 官网下载 Miniconda — Conda documentation。在官网 Latest Miniconda Installer Links 中选择你所使用的操作系统对应的二进制文件。如下未说明的配置项保持默认继续下一步即可。\nChoose Install Location\n选择安装目录。与上文所述观点一致。我们选择安装目录后，Destination Folder 处并未显示 Miniconda 自带的包裹文件名，为了防止上文所述的「散落污染」问题，我们手动补全自定义文件名包裹安装包，不存在的文件夹会自动创建。\n如下图所示，选择 E:\\ProjectFire\\ 为安装目录，并手动补全 Miniconda 包裹文件。建议将 Miniconda 和 Pycharm 放在同一目录下。\nAdvanced Installation Options\n勾选 Add Miniconda3 to my PATH environment variable 以及 Register Miniconda3 as my defaulty Python 3.9\nPython Interpreter New Project 回到 Pycharm，以你喜欢的方式「新建项目」。如下图所示为新建项目所需配置的基本参数：\n默认情况下，虚拟环境名与我们的项目名保持一致。\n点击确定后，Pycharm 会帮助我们自动创建项目文件，虚拟环境文件，并以项目根目录为源码根启动编码窗口，我们等待环境索引完成后便可进行下一步操作。\n注意！！ 若你在执行创建指令的过程中遇到了 CondaHTTPError ，你需要重启计算机后再回到本教程。\n下图所示为 Pycharm 启动后的界面，图中已标记需要重点关注的组件。\nTerminal 如何优雅地使用命令行工具？\nPycharm 自带运行终端，通过 「终端（Terminal）」，我们可以自动激活当前 Conda 虚拟环境，并基于当前项目路径运行指令。请不要再根据某些教程的指引单独启动 cmd.exe ，然后又遇上各种「环境变量配置」或是「命令不存在」的低级问题了。\n点击 Pycharm 界面中的「终端（Terminal）」启动组件（快捷键 Alt + F12），如下图所示。\n此处需要额外注意的是，我们必须确保「终端使用的虚拟环境」与「聚焦编码区所使用的虚拟环境」保持一致。如上图所示，终端激活的环境名为「base」而当前的聚焦环境是「pythonProject」不一致，需要切换终端使用的虚拟环境。\n方案一：点击上图标注的🔽符号切换命令行工具，选择「Command Prompt」。该终端激活后自动附带当前聚焦编码区所使用的虚拟环境。\n方案二：若上述方案不起作用，可在当前命令行中输入 conda activate [envName]，也即当前的开发环境名为「pythonProject」，运行指令 conda activate pythonProject 切换虚拟环境：\n其他情况：若你首次打开的终端中，仅出现了命令行终端的执行路径，未出现括号圈起来的虚拟环境名，按方案二处理即可。\n为什么需要关注此步骤？\n我们在终端执行 pip 脚手架指令，对 python 开发依赖的增删改查都是基于当前虚拟环境实现的，不同的虚拟环境的外部资源相互隔离，意味着你在 A 环境中 pip install 安装的依赖，放在 B 环境中不可用。\n绝大多数菜鸟都会遇上「虚拟环境适配问题」引发的偶发性 BUG。例如发现昨天 pip install 的资源今天 import 无法找到，这显然是上文提到的问题，既当前聚焦编码区所使用的（未安装指定依赖的）虚拟环境和你已安装指定依赖的虚拟环境不一致。\nRun 如何运行第一个 Python 程序？\n如下图所示为运行 Python 程序的常用手法。\nrun[1]，栈缓存运行。解释器会记住你上一次成功运行的配置并执行配置所关联的 .py 文件。说人话就是，运行刚跑过的代码。\n这个设定会让许多新手懊恼——「为什么运行结果跟我当前写的东西都不搭噶」。也即编程菜鸟此时已经新建或切换到了另一个 .py 文件编写代码并点击 run[1] 执行，而此操作却是运行了刚才跑通的代码，这就造成了「输出」不符合预期的假象。\nrun[2]，基于上下文运行。在不使用快捷键的情况下，右击代码框，或是右击左侧项目结构下的文件，或是右击代码框顶部的文件元素，都可以弹出如下图所示的菜单栏，点选 run[2] 既可。\n如何优雅地运行 Python 程序？\n此处建议将「基于上下文运行」的快捷键改成 Shift + Enter，这么一来，在完成编码后我们可以以非常顺手地运行当前聚焦的代码。\n在「文件（File）」→「设置（Settings）」→「键盘映射（Keymap）」中搜索「run context configuration」，并将下图所示的 「运行（Run context configuration）」快捷键添加一个 Shift + Enter 触发方式。此时会显示快捷键冲突，可以无视，因为这些功能几乎不会用到。\nHello World 现在你已经知道如何在 Pycharm IDE 中编写代码，也知道如何基于本机环境运行 Python 程序。此外，你需要额外做一些在其他教程中不会提及的工作以减轻今后的 Python 学习阻力。\npip 常见的主流编程语言都会有「第三方编程依赖（wheel）」的设计，用以减轻开发压力。我们仅需关注极具创造力的部分，而重复性的繁琐的底层代码，我们可以通过优秀的 wheel 轮子解决。\nwheel 是其他人写好的，开放使用的，致力于解决特定场景问题的模块集成。支持 wheel 的语言都有一套拉取 wheel 的方案，而 Python 中推荐使用 pip 脚手架工具管理 wheel。\n根据上文的介绍，启动 Terminal 并在当前虚拟环境的命令行窗口下执行如下代码，可查看 pip 工具的基础信息。\n1 pip --help pip v21.0.1(python 3.8) 的可用指令如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Usage: pip \u0026lt;command\u0026gt; [options] Commands: install Install packages. download Download packages. uninstall Uninstall packages. freeze Output installed packages in requirements format. list List installed packages. show Show information about installed packages. check Verify installed packages have compatible dependencies. config Manage local and global configuration. search Search PyPI for packages. cache Inspect and manage pip\u0026#39;s wheel cache. wheel Build wheels from your requirements. hash Compute hashes of package archives. completion A helper command used for command completion. debug Show information useful for debugging. help Show help for commands. 上方列出的指令中，比较常用的有：\ninstall：我们下载 wheel 基本都是用这个指令 uninstall：卸载 wheel list：显示当前虚拟环境中的第三方依赖 show：显示某个依赖的详细信息，通常用来查看依赖版本和安装路径 config：设置运行变量，最常用的变量是 global.index 配置安装源 help：帮助指令 pip config 根据上文的定义，这些依赖本质上是由代码组成的文件，而「第三方」的概念尤其重要，他们并不会无故出现在你的电脑上（当前虚拟环境），最常见的方式是通过网络输送到你的电脑上。而这个输送源默认是一个国外站点 pypi org，我们在不使用代理的情况下直接通过 install 指令拉取第三方依赖的下载速度极其慢。\n而至今，已有很多先驱者和引领者帮我们解决了这些问题——缓存镜像站，这些站点将数量极其庞大的存储在 pypi 上的资源包缓存到了国内多个节点服务器上，我们通过这些节点服务器即可以“跑满带宽”的速度拉取依赖。\n此处修改这个指向的源也可通过一行指令搞定：\n1 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 这行指令通过 set 关键字修改全局（global）变量（index）的值为 https://pypi.tuna.tsinghua.edu.cn/simple，这是清华源的镜像站接口地址。除此之外，国内仍有许多提供缓存资源的优秀镜像站点：\n1 2 3 # 豆瓣 https://pypi.tuna.tsinghua.edu.cn/simple # 阿里 https://mirrors.aliyun.com/pypi/simple # 中科大 https://pypi.mirrors.ustc.edu.cn/simple 替换源仅需执行相同的指令并替换链接既可。\n📌此处需要注意的是，这类开放式镜像源一般需要直连访问。若使用代理访问，较大概率遇上 SSLError 错误，具体描述及解决方案可见本博客的 Python 开发日记。\n使用如下指令查看已配置的全局镜像源接口地址：\n1 pip config get global.index-url 也可以使用如下指令查看自定义的变量，并在其中寻找 global.index-url 的值：\n1 pip config list pip install 📌 需要留意当前 Terminal 的激活环境是否和当前开发环境一致。\n现在你已经配置好了镜像源，可以用正常的网速拉取依赖。请执行如下指令安装 demo 开发必要的依赖：\n1 pip install easygui 此处使用了 install 指令拉取开发依赖，easygui 是依赖名称，后面可跟多个依赖名一并安装。\nrerun 等待 easygui 安装完成，等待 Pycharm 索引完毕后，复制，粘贴，运行如下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \u0026#34;\u0026#34;\u0026#34; 邦尼百度APP \u0026gt; 不懂就问：百度怎么用？！（认真脸） \u0026#34;\u0026#34;\u0026#34; import webbrowser import easygui BAIDU_SEARCH_API = \u0026#34;https://www.baidu.com/s?\u0026#34; STACKOVERFLOW_SEARCH_API = \u0026#34;https://stackoverflow.com/search?\u0026#34; def get_key() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34; 通过 GUI 窗口获取检索关键词 :return: \u0026#34;\u0026#34;\u0026#34; key_ = easygui.enterbox( msg=\u0026#34;请输入检索关键词\u0026#34;, title=\u0026#34;邦尼百度\u0026#34;, default=\u0026#39;\u0026#34;孤勇者\u0026#34; \u0026#34;女声\u0026#34; site:bilibili.com\u0026#39;, ) return key_ def handle_key(key_: str): \u0026#34;\u0026#34;\u0026#34; 过滤关键词，使用 default browser 查询关键词。 :param key_: :return: \u0026#34;\u0026#34;\u0026#34; # 添加过滤词缀 _filter = key_ + \u0026#34; -csdn.net\u0026#34; # 简单拼接访问网址 url = BAIDU_SEARCH_API + f\u0026#34;wd={_filter}\u0026#34; # 启动默认浏览器访问链接 webbrowser.open(url) if __name__ == \u0026#39;__main__\u0026#39;: try: key = get_key() handle_key(key) except Exception as e: webbrowser.open(STACKOVERFLOW_SEARCH_API + f\u0026#34;q={e}\u0026#34;) 若你能得到正确的运行结果，说明一切安好并完成了 Python 的历史性对话！\nVisual Studio Code Related Issues CondaHTTPError CondaHTTPError: HTTP 000 CONNECTION FAILED for url\n安装完 Miniconda 并启动 Pycharm 首次创建 Conda 虚拟环境后出现此错误，重启计算机即可解决。\nProxyError ProxyError: Conda cannot proceed due to an error in your proxy configuration.\n在 Pycharm 中通过引导创建 Conda 虚拟环境时抛出。按照下文\u0026lt;代理设置\u0026gt;指出的对比实验结果进行调整。例如关闭系统代理进行安装，或开启代理工具的 TUN 模式（全局隧道模式），或将 base 虚拟环境中的 urllib3 第三方库的版本调整至 v1.25.11，pip install urllibe==1.25.11。\n代理设置 下图展示了在 Pycharm 中手动创建 Conda 虚拟环境的结果与系统代理的关系。使用 conda create 命令行创建时，无论哪种代理设置情况都可以成功创建。\n注意：Pycharm 软件中的代理设置始终设为「无代理」，依靠其他代理工具接管设备流量。\nGitHub Copilot With GitHub Copilot, get suggestions for whole lines or entire functions right inside your editor.\n","date":"2021-11-13T15:17:14+08:00","image":"https://blog.echosec.top/p/python-best-practices-ide/23591f5_huca468907c0b94334c1b276c4c73544ea_737091_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/python-best-practices-ide/","title":"『Blog』Python 应用开发最佳实践@环境搭建篇"},{"content":"Introduction Summary Features Requirements Configuration Installation Usage Development Changelog FAQ Support Contact Authors and acknowledgment License ","date":"2021-10-15T19:40:23+08:00","image":"https://blog.echosec.top/p/robot-yea/sins_huf9044faf8b8b0063788b452ed9110722_275914_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/robot-yea/","title":"『Blog』Robot Yea"},{"content":"Overview I know it’s a cliche to say that it’s a “very great pleasure”, but, being honest with you, it genuinely is.\nSelenium 4 不仅对前代版本做了稳定提升，还带来了大量令人兴奋的新功能，这能让我们的测试编写起来更有趣，也能在运行时更加稳定。\nAuthentication Selenium 4.0 的一个重要更新是 身份验证 能力。\n在过去，我们一直能使用 Selenium 处理一些「登录」请求，譬如通过定位特征元素（如 Input ）来控制 Driver 进行定位（如 find_element_by_xpath() ）、输入（如 send_key() ）、提交（如 click() ）完成身份验。然而，我们使用这套工作流处理一些特殊框架的站点（如 basic or digest authentication）时效果差强人意。因此，我们在使用 Selenium 处理难以应付的登录要求时，总会在启动前携带 cookie。\n上述情况将在 Selenium 4.0 时代有所改观。我们可以通过调用 register 方法来添加 「username」以及 「password」或是其他 Token 执行身份认证任务，而无需再繁琐地定位元素发送消息或是与人机验证勾心斗角，「验证」行为由 Driver 底层实现。\n如下案例演示了新方法的功能实现：\nJava 1 2 3 4 5 6 7 8 9 10 // This \u0026#34;HasAuthentication\u0026#34; interface is the key! HasAuthentication authentication (HasAuthentication) driver; // You can either register something for all sites authentication.register(() -\u0026gt; new UsernameAndPassword(\u0026#34;admin\u0026#34;, \u0026#34;admin\u0026#34;)); // Or use something different for specific sites authentication.register( uri -\u0026gt; uri.getHost().contains(\u0026#34;mysite.com\u0026#34;), new UsernameAndPassword(\u0026#34;AzureDiamond\u0026#34;, \u0026#34;hunter2\u0026#34;)); Ruby 1 driver.register(username: \u0026#39;admin\u0026#39;, password: \u0026#39;admin\u0026#39;) 当我们完成 add 添加操作后，每当站点要求或是 driver 加载出身份认证页面时，Selenium 会帮我们自动提供验证信息（如 username 与 password），这样的操作是隐式完成的。以往，我们可能需要单独开一条线程来应对随时可能出现的 「运行时身份认证」或是通过 「try\u0026hellip;exception」机制主动捕获异常并调用相应的处理模块。\n这个特性目前是基于 Selenium 4 的 CDP （Chrome DevTools Protocol）实现的，意味着此功能仅能运行在支持这个协议的浏览器上。值得一提的是，Selenium 旗下产品 WebDriver Bidi 的允许开发者在不支持 CDP 的浏览器使用这项功能，好消息是这个项目还未完整孵化出来，我们可以期待一下。\nRelative Locators 相对定位器（Relative Locators）是一种基于「自然语言术语」的元素定位解决方案，开发者可通过诸如「上方」「下方」「左侧」「右边」等描述捕获那些「看得见但摸不着」的标记元素，这种描述可以适应 DOM 的变化。\n这种方法背后的概念是允许开发者根据在页面上描述元素的方式来查找元素。更自然的说法是「find the element that is below the image」，而不是「find the INPUT inside the DIV with the \u0026ldquo;id \u0026quot; of \u0026ldquo;main\u0026rdquo;」 。通常，我们可以将此方案视为一种==基于视觉==的元素定位方法。\n这套方法论最初由 Sahi 提出，这是一个极其强大的基于 低代码 实现的自动化测试平台，感兴趣的朋友可以了解以下。\n我们以 Python 和 Java 举个例子，简要说明这个方案的强大之处。\n如下图所示是一个常见的登陆页面，我们现在尝试用新版本 API 定位页面元素。\nAbove 如上图是一个常见的登录页面，我们想找到位于密码字段上方的电子邮件地址字段。为此，我们通过其 id 找到密码字段，然后使用 relative locators 定位器捕获电子邮件字段。\nPython 1 2 3 4 from selenium.webdriver.common.by import By from selenium.webdriver.support.relative_locator import locate_with passwordField = driver.find_element(By.ID, \u0026#34;password\u0026#34;) emailAddressField = driver.find_element(locate_with(By.TAG_NAME, \u0026#34;input\u0026#34;).above(passwordField)) Java 1 2 3 import static org.openqa.selenium.support.locators.RelativeLocator.with; WebElement password = driver.findElement(By.id(\u0026#34;password\u0026#34;)); WebElement email = driver.findElement(with(By.tagName(\u0026#34;input\u0026#34;)).above(passwordField)); Below 反过来，让我们定位密码字段，它位于电子邮件地址字段下方。\nPython 1 2 3 4 from selenium.webdriver.common.by import By from selenium.webdriver.support.relative_locator import locate_with emailAddressField = driver.find_element(By.ID, \u0026#34;email\u0026#34;) passwordField = driver.find_element(locate_with(By.TAG_NAME, \u0026#34;input\u0026#34;).below(emailAddressField)) Java 1 2 3 4 import static org.openqa.selenium.support.locators.RelativeLocator.with; WebElement emailAddressField = driver.findElement(By.id(\u0026#34;email\u0026#34;)); WebElement passwordField = driver.findElement(with(By.tagName(\u0026#34;input\u0026#34;)) .below(emailAddressField)); To the left Of 让我们考虑一下我们想要在「提交」按钮左侧找到元素的情况。\nPython 1 2 3 4 5 from selenium.webdriver.common.by import By from selenium.webdriver.support.relative_locator import locate_with submitButton = driver.find_element(By.ID, \u0026#34;submit\u0026#34;) cancelButton = driver.find_element(locate_with(By.TAG_NAME, \u0026#34;button\u0026#34;). to_left_of(submitButton)) Java 1 2 3 4 import static org.openqa.selenium.support.locators.RelativeLocator.with; WebElement submitButton = driver.findElement(By.id(\u0026#34;submit\u0026#34;)); WebElement cancelButton = driver.findElement(with(By.tagName(\u0026#34;button\u0026#34;)) .toLeftOf(submitButton)); To the Right Of 现在我们将考虑相反的情况，我们希望找到「取消」按钮右侧的元素。\nPython 1 2 3 4 5 from selenium.webdriver.common.by import By from selenium.webdriver.support.relative_locator import locate_with cancelButton = driver.find_element(By.ID, \u0026#34;cancel\u0026#34;) submitButton = driver.find_element(locate_with(By.TAG_NAME, \u0026#34;button\u0026#34;). to_right_of(cancelButton)) Java 1 2 3 import static org.openqa.selenium.support.locators.RelativeLocator.with; WebElement cancelButton = driver.findElement(By.id(\u0026#34;cancel\u0026#34;)); WebElement submitButton = driver.findElement(with(By.tagName(\u0026#34;button\u0026#34;)).toRightOf(cancelButton)); Near 上文「适应 DOM 的变化」从何而来？我觉得 near function 是个非常重要的体现，它允许我们通过一定的规则指定所选取的元素周围 50px 以内的其他元素。小伙伴们首先想到什么？欸嘿我不说。官方文档中这一句不起眼的描述，可能在未来，成为万千依靠 Selenium 工作的工程师们实现财富自由的垫脚石。\n回到话题，在这个案例中，我们可以通过先定位邮件标签，再通过寻找 input tag 的偏移量，最终定位邮件地址的输入框。\nPython 1 2 3 4 5 6 from selenium.webdriver.common.by import By from selenium.webdriver.support.relative_locator import locate_with emailAddressLabel = driver.find_element(By.ID, \u0026#34;lbl-email\u0026#34;) emailAddressField = driver.find_element(locate_with(By.TAG_NAME, \u0026#34;input\u0026#34;). near(emailAddressLabel)) Java 1 2 3 import static org.openqa.selenium.support.locators.RelativeLocator.with; WebElement emailAddressLabel = driver.findElement(By.id(\u0026#34;lbl-email\u0026#34;)); WebElement emailAddressField = driver.findElement(with(By.tagName(\u0026#34;input\u0026#34;)).near(emailAddressLabel)); Enhancement 如果你使用 Firefox 或是其他基于 Chromium 的浏览器，Selenium 4 还提供了强大的增强特性。\n除了上文介绍的 Authentication ，Selenium 4 还添加了 Network Interception（Are you an HTTP 418?）以及一些常见执行请求，如更加高效的「等待 DOM 变更」的方法，或是查看 Javascript 错误的方法等等。\n值得一提的是，这些提升大都是基于现有 API 打磨的，意味着我们原先引用的函数方法无需改动，而我们只需升级版本 如 pip install --upgrade selenium ，这些库函数将被自动替换（如果是要使用原先没有的新功能我们当然得改代码）。\nSelenium Grid Selenium 重构了 Grid ，使其完全支持分布式，能够运行于 Kubernetes 等现代基础设施之上。\n重构后的 Grid 可以管理本地机器上的 Docker 容器，提取诸如独立的 Firefox 服务器之类的镜像，这样我们的基础设施维护工作就会变得轻松一些。\n最后， Grid 更加安全，也更加易于管理。Selenium 改进了 Grid 的UI，将其置于 GraphQL 模型上运行，任何人都可以自由查询并使用该模型来创建自己的可视化或 Grid 监视器。开发者可以使用 VNC 与正在运行的会话（session）进行交互，从而更好地了解到正在发生地事情。\nReference Announcing Selenium 4 | Selenium\nLocating elements | Selenium\nBiDi APIs | Selenium\n418 I\u0026rsquo;m a teapot - HTTP | MDN (mozilla.org)\nHTTP authentication - HTTP | MDN (mozilla.org)\nSeleniumHQ/selenium: A browser automation framework and ecosystem. (github.com)\n","date":"2021-10-14T23:45:57+08:00","image":"https://blog.echosec.top/p/selenium4-intro/adb2_hu1c5cdf8ecdeb62c5c7317b95d9d1f1d1_260932_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/selenium4-intro/","title":"『Blog』Selenium 4.0"},{"content":"PackagesNotFoundError: The following packages are missing from the target environment 错误现象： 使用 Pycharm 手动添加新环境，或使用 conda create -n [env-name] [python=3.9]指令遇到如下报错：\n1 PackagesNotFoundError: The following packages are missing from the target environment - python=3.9 事件回溯： Pycharm 手动添加源，本质上相当于执行了 conda 脚手架指令，简单的可视化交互其本质上也只是使用了 -p 参数指定 env 存储路径以及 Python 版本，所以根因出在脚手架身上。\n在报错时，我设置了 conda config:channels 也就是所谓的 「源」为清华源。若我开启本机代理，则环境创建会时抛出另一个访问清华园的 404 错误；若我不开启本机代理，则会抛出本 Tag 异常。我在开关本机代理的时候，也排列组合设置了 Pycharm 中的代理设置（无代理/手动代理）。最终依靠移除 conda 关于源的环境变量解决问题。\n参考方案： 执行如下代码移除 conda 源（使用默认源）：\n1 conda config --remove-key channels SSLError(SSLEOFError(8, \u0026lsquo;EOF occurred in violation of protocol (_ssl.c:1129)\u0026rsquo;)) 错误现象： 使用 pip 脚手架下载任意包抛出。先经过 N 论超时警告，最后抛出 SSLError 或 HTTPSConnectionPool 异常。错误日志如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026gt;\u0026gt;\u0026gt; pip install requests Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by \u0026#39;SSLError(SSLEOFError(8, \u0026#39; EOF occurred in violation of protocol (_ssl.c:1129)\u0026#39;))\u0026#39;: /simple/requests/ WARNING: Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by \u0026#39;SSLError(SSLEOFError(8, \u0026#39; EOF occurred in violation of protocol (_ssl.c:1129)\u0026#39;))\u0026#39;: /simple/requests/ WARNING: Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by \u0026#39;SSLError(SSLEOFError(8, \u0026#39; EOF occurred in violation of protocol (_ssl.c:1129)\u0026#39;))\u0026#39;: /simple/requests/ WARNING: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by \u0026#39;SSLError(SSLEOFError(8, \u0026#39; EOF occurred in violation of protocol (_ssl.c:1129)\u0026#39;))\u0026#39;: /simple/requests/ WARNING: Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by \u0026#39;SSLError(SSLEOFError(8, \u0026#39; EOF occurred in violation of protocol (_ssl.c:1129)\u0026#39;))\u0026#39;: /simple/requests/ Could not fetch URL https://pypi.tuna.tsinghua.edu.cn/simple/requests/: There was a problem confirming the ssl certificate: HTTPSConnectionPo ol(host=\u0026#39;pypi.tuna.tsinghua.edu.cn\u0026#39;, port=443): Max retries exceeded with url: /simple/requests/ (Caused by SSLError(SSLEOFError(8, \u0026#39;EOF occu rred in violation of protocol (_ssl.c:1129)\u0026#39;))) - skipping ERROR: Could not find a version that satisfies the requirement requests (from versions: none) ERROR: No matching distribution found for requests 事件回溯：pip 配置了全局 清华源（如下所示），运行指令时使用由 v2rayN 发起的系统代理，这是一个「墙内人」几乎不会遇到的问题……\n1 2 \u0026gt;\u0026gt;\u0026gt; pip config list global.index-url=\u0026#39;https://pypi.tuna.tsinghua.edu.cn/simple\u0026#39; 参考方案： 根因在于我们访问的镜像接口识别并屏蔽了代理流量（不可信的源），也即核心解决思路为「不使用代理」访问镜像源。\n「推荐」修改 代理客户端 路由规则（以 v2rayN 为例其他代理软件同理）\n这是个一劳永逸的做法，代理软件将不再接管访问此域名的流量。\n启动代理客户端，依次打开 设置 → 参数设置 → 系统代理设置，在「例外」中填入镜像域名，以清华源 pip 镜像域名为例，填入 pypi.tuna.tsinghua.edu.cn，如下图所示：\n「推荐」 开启 TUN 模式代理（以 Clash for Windows v0.19.19 为例）\n在面板中启动 TUN Mode，此时 Clash 可以通过端点间隧道（虚拟网卡）代理当前局域网的全局流量，此时无论是浏览器流量还是各种电脑软件的流量都会通过 Clash 虚拟网卡访问互联网。\n在执行 pip 指令时清除系统代理，也即关闭代理软件的系统代理功能\n比较繁琐，需要执行前关闭代理，（如果你当前的环境依赖代理）执行后再重新开启代理。\n文件编码 错误现象： 此问题难以使用某一类异常描述，因为运行时不会报错，但运行结果和预想的不太一样。例如，网络上抓取语料，需要获取 user-nickname，不免会遇上使用特殊符号命名的玩家。这些符号直接在网页上渲染，或是直接在控制台输出，都是「所见即所得」，但在「写入文件」这一步骤时，出现了不可控的「乱码」问题。\n事件回溯： 以下方 Python 代码为例，我们定义一个包含「特殊符号」集合的变量，并以 UTF-8 编码形式将其写入到 CSV 文件当中。\n1 2 3 4 5 6 7 import csv a = [\u0026#34;🌪\u0026#34;, \u0026#34;嬡芣释掱\u0026#34;] with open(\u0026#34;test.csv\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;, newline=\u0026#34;\u0026#34;) as f: writer = csv.writer(f) writer.writerow(a) 打开 test.csv，查看写入的数据：\n当时的第一反应是 encoding 参数的选择不恰当，而事实证明的确如此。但我却在编码类型的选择上陷入大坑。最后试出了一种能够正常显示写入数据的编码格式 utf-16。\n修改参数 encoding=\u0026quot;utf-16\u0026quot; 后再次打开文件，查看写入数据：\n可以看到「特殊符号」的**字形（glyph）**已被正常渲染，但似乎分隔符的识别出现了问题，同一行数据被识别为同一个单元的内容。\n于是我在查了有关资料后，找到了另一种编码格式 utf-8-sig。\n修改参数 encoding=\u0026quot;utf-8-sig\u0026quot; 后再次打开文件，查看写入数据：\n蚌埠住了，这次分隔符正常识别，火星文正常显示，但表情包符号却乱码了。\n参考方案： 使用 utf-8-sig 或 utf-16 编码尝试应对字形渲染问题。\n但值得一提的是，无论是 utf-8、utf-8-sig 还是 utf-16 ，只要不是默认的 gbk 都不会引发读写错误。尽管在 GUI 软件上出现了字形渲染的问题，但将同样的数据读回 Python 程序后，其仍然是一个正常显示的可以操作的 str 对象。\n字符编码 最后更新时间：2022-01-28\n错误现象：「看着一摸一样」的两句字符串，在 == 条件判别下返回 Flase。\n事件回溯： 这里要记录一个有趣的背景故事。这是作者在玩 hCaptcha challenge 时遇上的趣事。\n如果你接触过爬虫，你一定了解这玩意（如下图所示），给出一个需求标签，点选九宫格中符合要求的图片。当下有很多流行的人机挑战， hCaptcha challenge 算是其中 T0 级别的模块，能够阻挡近乎九成的爬虫流量，新手遇上这种视觉验证类的 CAPTCHA ，基本上不会有太多想法。\n但我们环顾这个技术行业，hCaptcha challenge 显然算不上最“变态”的或者说最困难的人机挑战。最相关的好比 Google 的 reCaptcha v2 ，除了简单的图像分类外，还创新性的使用了图像切割的形式抽象地表述实体，让简单的「分类问题」变成了难度更高的「目标识别」问题（如下图所示），从编码者角度来看，无论是自动化模块的编写还是视觉模块的处理都是不小的挑战。\n当然，如果你同时熟悉 Undetected Automation 以及 Darknet Image Classification 或 Object Detection，我相信这对你来说不是什么难事。但你要相信，当下的人机挑战的病态程度已经远超你的想象，篇幅有限此处不多展开，后买咱再开个坑详细说说「人机挑战的那些事」。\n回到正题，此处的 字符编码 问题出自于 hCaptcha challenge 。我们通过网页元素截取 label 也即我们需要 「点击」的图像标签名，送入模型比对后得出相应的结果。此处截取的 label 是具有 locale 特性的，如果你以 zh-CN 请求形式打开，标签名会显示中文。坑就在这了，作者获取到的某些 label 并不是标准的中文格式编码，什么意思呢，你可以用你喜欢的编程语言去比对如下两个字符串，看它们是否“相等”。\n1 2 # Python print(\u0026#34;ー条船\u0026#34; == \u0026#34;一条船\u0026#34;) 结果显然是不相等的，在该篇博客中，由于页面字体兼容此种字符编码的渲染，所以你很明显能看到两个“一”有所不同，但如果在你的 IDE 中，设置了等宽编程字体，或者 Source code pro 之类的流行字体，这对字符串从肉眼看是完全一样的。\n不知道这是不是 hCaptcha 开发团队的有意为之，至少我觉得这是从“反爬虫”角度来说非常高明的一招。想撩到来犯爬虫，先潦倒它的开发者。同样地，其他语种也会有这样的问题，如英文 bіcycle（自行车）：\n1 2 #Python print(\u0026#34;bіcycle\u0026#34; == \u0026#34;bicycle\u0026#34;) 好的，这下连本博客的默认字体引擎也无法渲染了，肉眼可见的“完全一致”，但如果你将它们复制进你的 IDE ，执行结果显然是 False。\n如果你也感叹这一招十分高明，大可在网上检索一下其中的“玄机”。\n如果你也在处理 hCaptcha challenge，和我使用同样的思路获取 label，并且没有发现这个字符编码问题，你会陷入窘况。显然，我们训练的模型的标注 label 都是标准的国际统一的字符编码，在这种特殊的情况下，一个单词，因为某个字母的编码不同，经过解释器后，在模型看来，这是两个完全不一样的“实体目标”。\n参考方案： 手动编织 dict mapping ，将异常编码做一层映射再导向模型。\n这是个有效的，但也是最笨的方法。当然，根据本人的实验结论来看，使用 locale=zh-CN 时，这项阻碍是最小的（大部分异常都能看出差别）。如果你使用 en-US 本地化，任何一个英文字母都有可能出现异常编码（且肉眼难以察觉），工程难度非常大。\n此时不应有 \u0026amp; 错误现象： 命令提示符抛出提示「此时不应有 \u0026amp;」后秒退。在 Pycharm 中启动的 CMD 终端秒退。\n参考方案： Win + R ，键入 regedit 打开注册表，在如下路径找到 Autorun，将其数据数值删去。\n1 HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor ","date":"2021-10-14T18:14:26+08:00","image":"https://blog.echosec.top/p/python-debug/6e1a7a_hu79af78f4766e84ea9218b45410c60ec9_237077_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/python-debug/","title":"『Notes』Python Programming diary"},{"content":"引言 相信你点开这篇文章时，就已感受到本站主题与站源默认样式有较大区别。\n作者最近在自学一些前端的知识，顺便捡起 Hugo 折腾博客建站，理论实践双路开花（不是。在折腾的过程中，结合一些学到的东西，适当发挥，产生了一些曼妙的想法。\n本文就此分享一些站源默认样式不具备的特性以及一些有趣的风格魔改玩法。\nPreview 在开始修改样式之前呢，请确保你知道自己在做什么！你需要知道你应该修改哪些文件以达到想要的结果。此部分有经验的玩家可以跳过了~\nHugo 的模板渲染具有层级明显的覆盖路径。若你也在使用 Stack 主题，你会发现你的站点目录下存在 ./themes/hugo-theme/stack主题目录，而此主题目录结构是否与你站点根目录的结构非常相似？是的，主题项目本身就是一个完整的 Hugo 站点样式，而 Hugo 会优先索引你站点根目录下的文件，其次才是主题子目录。不同根但同层级下的同名文件，会出现「交并」现象，也即你需要将需要改动的文件连同文件夹一起复制到你的站点根目录下，仅改动你站点根目录下的资源。\n仿 Vue 风格魔改 修改「选中目标」样式 你需要新建/修改站点文件 ./assets/scss/custom.scss，添加如下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // 设置选中字体的区域背景颜色 ::selection { background: #dae3ea; color: #34495e; } ::-moz-selection { background: #dae3ea; color: #34495e; } ::-webkit-selection { background: #dae3ea; color: #34495e; } 我们可以获得如下改变，视觉舒适感倍增！\n顺便提一嘴有没有人和我一样觉得浏览器默认选中体样式有点丑，虽然平时看的很快，也不会在意这些细节，但停下来观察区分后，这种细节带来的体验升级真是用了就回不去。\n修改「正文字体」样式 同样，我们需要改动站点文件./assets/scss/custom.scss，添加如下内容：\n1 2 3 4 :root { // 字体颜色 --card-text-color-main: #34495e; } 我们可以获得如下改变：\n修改「行内代码」样式 同样，我们需要改动站点文件./assets/scss/custom.scss，添加如下内容：\n1 2 3 4 5 6 :root { // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; } 我们可以获得如下改变：\n修改「键盘标签」样式 我们需要改动站点文件./assets/scss/custom.scss，添加如下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 键盘标签样式 kbd { margin: 0 .1em; padding: .1em .6em; font-size: .8em; color: #242729; background: #fff; border: 1px solid #adb3b9; border-radius: 3px; box-shadow: 0px 1px 0 rgba(12, 13, 14, 0.2), 0 0 0 2px #fff inset; white-space: nowrap; vertical-align: middle; font-family: monospace; } 使用如下 Markdown 高级语法可以生成键盘标签样式：\n1 在 Windows 操作系统中，「复制」功能的快捷键是：\u0026lt;kbd\u0026gt;CTRL\u0026lt;/kbd\u0026gt; + \u0026lt;kbd\u0026gt;C\u0026lt;/kbd\u0026gt; 我们可以获得如下改变：\n在 Windows 操作系统中，「复制」功能的快捷键是：CTRL + C\r修改「正文链接」样式 我们需要改动站点文件 ./assets/scss/style.scss，注释掉主题对 \u0026lt;a\u0026gt; 标签的样式设定，然后在文件中添加如下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 a { text-decoration: none; color: var(--accent-color); \u0026amp;:hover { color: var(--accent-color-darker); } \u0026amp;.link { color: #42b983; font-weight: 600; padding: 0 2px; text-decoration: none; cursor: pointer; \u0026amp;:hover{ text-decoration: underline; } } } 我们会获得如下改变：\n主要改动是正文超链接文本变色（#42b983）且当滑鼠移向文本时标记下划线，这在 dark 模式下保持同样效果。其他改动主要是符合个人的文档习惯，例如添加 padding 提供符合中文文档写作规范的视觉效果。\n📌 这是个激进的改动，移除了 Stack 默认样式中关于 box-shadow 阴影下划线以及触发渐变的样式特效。\n当文档中出现多个对比色系的强调色时，文章给人的第一感觉会很「脏」。如下提供一种仍基于 Vue 的视觉平衡方案。当然如果你觉得这样的改动难以接受，可以跳过此步骤，毕竟本篇博客中各个修改方案都是互相独立的，选择合适的就好~\n此处给出的的视觉平衡方案是再次微调「行内代码」样式。我们需要改动站点文件 ./assets/scss/custom.scss 找到 修改「行内代码」样式 中我们添加的代码，然后修补为如下形式：\n1 2 3 4 5 6 7 8 9 10 :root { // Vue plan 1 // --code-background-color: #f3f4f4; // --code-text-color: #476582; // Vue plan 2 --code-background-color: #f8f8f8; --code-text-color: #e96900; } Vue plan 2 的颜色样式与之前的修改完全相同，你只需要反复注释对比两个 plan ，选择感官上合适的既可。\n微调后我们可以获得如下改变：\nemmm，个人感觉看着都挺舒服的Orz。相比默认样式来说更符合我个人的审美，我觉得默认样式的 inline-code 的背景色纯度过高（反正你怎么开心怎么调，毕竟样式调整本来就是很主观的东西）。\n自定义友链界面 目前 Stack 主题并不提供友链样式，我们可以自己魔改一个。具体效果看本站 Links 子页既可。显然开疆拓土并不是一件易事，下文既将分享完整的样式代码，但复制粘贴也得小心，记得按开头提醒的那样基于备份文件修改样式，在任何时候都不应该直接对主题子模块进行改动。\n遇见友链 第一步需要让「Links」界面出现在 Menu 上，这样所见所得调试起来比较方便。\n以你喜欢的方式在你的站点根目录下执行如下代码新建友链子页： 1 hugo new page/links.md 打开 links.md 文件，添加/修改前置参数： 1 2 3 4 5 6 7 8 --- title: \u0026#34;『 Links 』友情链接\u0026#34; date: 2021-10-01T16:45:06+08:00 slug: \u0026#34;links\u0026#34; layout: \u0026#34;links\u0026#34; license: false toc: false --- 此处我们需要明确 toc:false 隐藏目录。因为本文提供的样式是基于 Markdown + Shortcode 执行的，当我们的 Markdown 正文中出现标题分级时，这份文件会被当成文章跳转，而站点左边栏将被隐去，我们希望 Links 子页能和 Categories 以及 About 一样达到在首页中切换窗格的效果，而非页面的“转换”。\n我们需要修改站点配置文件（以 config.yaml 为例），添加如下内容： 1 2 3 4 5 6 7 8 menu: main: # Links 友链 - identifier: links name: Links url: /links weight: -75 pre: link 需要注意的是，当你的配置文件中已存在 menu-main 时，你仅需要添加组内容，千万不要再将 menu-main 复写。当然，你也可以在 links.md 的前置参数中声明此配置。\n修改 weight 权重调整此栏目于 Menu 中的排位；修改 name 以调整需要显示在网页上的信息；pre 表示此栏目搭配使用的图标，它默认存放在主题文件夹的 ./assets/icons/ 目录下。\n此时我们已能在博客首页中点开 Links 子页面了。 创建友链 本篇博客毕竟是「提高篇」这里就不多介绍 Shortcode 及其样式调度的原理了，感兴趣的朋友们可以自行检索，此处直接上源码！\n既然本方案基于 Markdown 和 Shortcode 实现，现在编写友链内容的 Markdown 文件有了，就差 Short code 短码调用了。\n站点根目录下新建/修改 ./layouts/shortcodes/friend.html，添加如下内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 {{- $name := .Get \u0026#34;name\u0026#34; | default (.Get 0) -}} {{- $url := .Get \u0026#34;url\u0026#34; | default (.Get 1) -}} {{- $avatar := .Get \u0026#34;avatar\u0026#34; | default (.Get 2) -}} {{- $bio := .Get \u0026#34;bio\u0026#34; | default (.Get 3) -}} \u0026lt;a href=\u0026#34;{{- $url -}}\u0026#34; title=\u0026#34;{{- $name -}}\u0026#34; class=\u0026#34;friend-link\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;friend\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friend-link-div\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friend-link-avatar\u0026#34;\u0026gt; \u0026lt;img src={{ .Get \u0026#34;avatar\u0026#34; }} class=\u0026#34;friend-avatar\u0026#34; loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;Avatar\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;friend-link-info\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa fa-link\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;i class=\u0026#34;friend-name\u0026#34;\u0026gt;{{ $name }}\u0026lt;/i\u0026gt; \u0026lt;p class=\u0026#34;friend-bio\u0026#34;\u0026gt;{{ $bio }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; 参数讲解 Name Value Description name 必填（Type: String） 名称 url 必填（Type: String） 站点链接 avatar 必填（Type: String） 头像链接 bio 必填（Type: String） 简介 应用案例\n在你刚创建的 ./content/page/links.md 正文中输入如下格式内容用以「创建友链」：\n1 2 3 \u0026lt;!-- 此处为了正常演示添加反斜杠防止转译。 --\u0026gt; {\\{\u0026lt; friend name=\u0026#34;BeiYu\u0026#34; url=\u0026#34;https://www.bj-yan.top/\u0026#34; avatar=\u0026#34;https://cdn.jsdelivr.net/gh/qin2dim/cdn-relay@0.1.0/avatars/44976445.png\u0026#34; bio=\u0026#34;北屿小智障！\u0026#34; \u0026gt;}} {\\{\u0026lt; friend name=\u0026#34;BernieLBY\u0026#34; url=\u0026#34;https://github.com/BernieLBY\u0026#34; avatar=\u0026#34;https://cdn.jsdelivr.net/gh/qin2dim/cdn-relay@0.1.0/avatars/37860855.jpg\u0026#34; bio=\u0026#34;刘院士\u0026#34; \u0026gt;}} 我们 也许 可以获得如下效果：\nBeiYu\r北屿小智障！\nBernieLBY\r刘院士\n修饰友链 站点根目录下新建/修改 ./assets/scss/style.css，添加如下内容： 1 @import \u0026#34;partials/layout/links.scss\u0026#34;; 站点根目录下新建/修改 ./assets/scss/partials/layout/links.scss，添加如下内容：\n展开代码\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 // 头像边框颜色 $avatar-border-color: #566a82; $avatar-border-color-dark: #C0C0C0; // style-card 背景色 $friend-link-background-color: #51a8ca10; $friend-link-background-color-dark: #69697141; // 友链 name 原始色 $friend-link-color: #11a1a2; $friend-link-color-dark: #ffffff; // 友链 name 气泡响应对比色 $friend-link-hover-color: #ea4e2f; $friend-link-hover-color-dark: rgb(241, 213, 159); // bio 简介上下文 $context-color: #404040; $context-color-dark: #c0c0c0; // 友链头像及头像边框的样式 .friend-avatar { width: 56px; height: 56px; padding: 2px; margin-top: 14px; margin-left: 14px; border-radius: 15px; border: 3.6px inset $avatar-border-color; [data-scheme=dark] \u0026amp; { border: 3.6px inset $avatar-border-color-dark; } } .friend-link-div { // 实现卡片双栏排列效果 height: auto; margin-top: auto; margin-inline-start: 4.5%; width: 43%; display: inline-block !important; // 控制上下连续排列的卡片之间的行距 margin-bottom: 11px; // 卡片圆角 border-radius: 7px 7px 7px 7px; // 卡片阴影 -webkit-box-shadow: 0px 14px 32px 0px rgba(231, 224, 224, 0.15); -moz-box-shadow: 0px 14px 32px 0px rgba(0, 0, 0, 0.15); box-shadow: 0.7px 1px 6px 0px rgba(0, 0, 0, 0.16); // 卡片背景色 background: $friend-link-background-color; [data-scheme=dark] \u0026amp; { background: $friend-link-background-color-dark; } // 卡牌气泡响应动画 -webkit-transition: transform 0.4s ease; -moz-transition: transform 0.4s ease; -o-transition: transform 0.4s ease; transition: transform 0.15s ease; \u0026amp;:hover { transform: scale(1.03); } } .friend-link-avatar { width: 92px; float: left; margin-right: 2px; } // name 特效样式， hover 气泡效果,友链 name 变色 .friend-link-info { margin-top: 13px; margin-right: 18px; color: $friend-link-color; [data-scheme=dark] \u0026amp; { color: $friend-link-color-dark; } \u0026amp;:hover { color: $friend-link-hover-color; [data-scheme=dark] \u0026amp; { color: $friend-link-hover-color-dark; } } } // name 文字样式 .friend-name { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; font-style: normal; font-family: \u0026#39;Comic Sans MS\u0026#39;, cursive; font-size: 16px; } // bio 文字样式 .friend-bio { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; margin-top: auto; // font: 12px/1 Tahoma,Helvetica,Arial,\u0026#34;\\5b8b\\4f53\u0026#34;,sans-serif; font-family: Helvetica, \u0026#39;Hiragino Sans GB\u0026#39;, \u0026#39;Microsoft Yahei\u0026#39;, \u0026#39;微软雅黑\u0026#39;, Arial, sans-serif; font-size: 14px; color: $context-color; [data-scheme=dark] \u0026amp; { color: $context-color-dark; } } // 响应式页面，允许根据不同的尺寸调整样式 @media screen and (max-width: 720px) { .friend-link-div { width: 92%; margin-right: auto; } .friend-bio { margin: auto; align-content: center; justify-content: left; } .friend-link-avatar { width: 84px; margin: auto; } // .friend-link-info { // height: 100%; // margin: auto; // display: flex; // align-items: center; // justify-content: left; // } .friend-name { font-size: 14px; font-style: normal; font-family: \u0026#39;Microsoft Yahei\u0026#39;, \u0026#39;微软雅黑\u0026#39;, Arial, sans-serif; } } 访问本站 Links 友链子页，查看盛况，并根据自己的喜好适当微调样式或模板代码。\nLoading\u0026hellip; ","date":"2021-10-10T18:21:10+08:00","image":"https://blog.echosec.top/p/custom-hugo-theme-styles/86fa17a_hu64b326eea55acfb5753e4efd86e7e730_697256_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/custom-hugo-theme-styles/","title":"『Hugo』Hugo Styles"},{"content":"Abstract 本文介绍 2 种能够实现的 GitHub 资源传递的解决方案，并简要介绍与此相关的技术模型。\nBackground 「资源代下」是一种可能在中国才会出现的盛况。\n不可否认，「防火长城」的诞生确实推动了许多行业的发展，也为许多商业模式的出现奠定了基石，这堵「墙」在这杵着，隔离了“脏数据”，也让万千学子“查文献”的门槛上了一个台阶。\n时至今日，国内高校大都拥有内建或合租的 VPN 网络供本校学子进行学术科研工作，但这些 VPN 往往被当作是针对「学术文献」资源建立的「传输通道」，所能提供的「视野」相较于全局代理要小很多。\n于是，在这种又忙又卷的环境中，出现了这么一群在鼓捣“特种领域”但又没鼓捣清楚自己为啥访问不了某些站点的人。\n诚然，目前没有可靠的数据表明这类群体的规模，但从直觉上看，这是个非常庞大的“市场”。\n打开淘宝，你能发现各种各样需要跨越「防火长城」才能流畅进行的「资源拉取服务」。这里有我们常见的 GitHub 资源下载（或数据集下载）， Google Cloud 资源下载以及各种需要代理才能流畅访问的素材资源的下载。\n作者点进了显示在综合排列考前的 「GitHub 资源代下」的店铺，翻阅了店铺当前仅有的一条 Q\u0026amp;A。\n当我看到「高速下载连接」这个关键词时，我已参透这背后的运营模式，惊呼“这 TM 也能赚钱？”，但当我看到图片中的回复时，我并不惊讶。\n当我们已经习惯于使用 GitHub 并基于 GitHub 的各种产品进行日常工作时，我们当然会对如上现象感到疑惑，但我们还是得解释以下这是个什么情况！\n对于一个拥有 200 M 家庭带宽的用户来说，使用代理后下载各种 GiHub 资源的速度都是非常快的，因为常见的 GiHub 挂载资源包体积都非常小（数据集除外）。但同样的事情对于“墙内”用户来说非常痛苦，眼看着个位数 MiB 体积的资源就是下不完，下载速度可能只有 10 kb/s。\n好了，正所谓「有需求就有市场」，只要卖家的交易行为还在法律的条框之内，我们也不能说什么，毕竟有人着急着要下载，也不缺这一两块的小费，又刚好有人能提供这种服务，双方一拍即合，一个船新的市场就诞生了~\n说到这，可能还有的小伙伴会疑惑：我以为它是把资源自己下载下来后，通过某种方式分享给买家，这个「高速下载连接」是什么？这种薄利多销的“模式”，真的不会亏损吗？如果我也想给身边的“朋友”提供这种服务，有没有比较可靠的解决方案？不着急，下文慢慢说。\nTechnology Stack Resource Transfer 本文所讨论的「资源传递」与我们通常理解的「文献传递」有所不同。后者通常是指「将用户所需的文献复制品以有效的方式和合理的费用，直接或间接传递给用户的一种非返还式的文献提供服务」；而前者强调的是传递的代理以及资源的转发，传递的资源必须是在网络上共享且开放使用的。\n以下，我们将基于传统文献传递的观点，一步步说明这个被一眼看透的商业模式到底时怎样赚钱的。\nCloudflare Workers (CFW) 首先需要解答的问题是：「如何给不会翻墙的国内用户提供加速下载 GitHub 资源的服务？」\n目前的最优解是 Cloudflare Workers (CFW) + jsdelivr + cnpmjs 实现的无服务 (Severless) 反向代理 + 内容分发策略。具体内容后面会单独发一篇博客说明，实现起来比较简单（但可能对新手不是很友好，具体可见 gh-proxy 项目的自述文档）。\n这一步完成后，我们将从 Wokers 获取一个 CDN 链接，这个链接是用来做什么的呢？当然是用来回答问题的~\n作者已部署了一个应用案例，分发链接如下：\n1 https://curly-shape-d178.qinse.workers.dev/ 然后找到你需要的资源的下载链接，以作者先前编写的 V2Ray云彩姬 v4.5.4 发行客户端为例，其链接如下：\n1 https://github.com/QIN2DIM/V2RayCloudSpider/releases/download/v4.5.4/v2rss_4.5.4_Windows-64bit.zip 无代理直连下载\n将两者按如下格式合并拼写，访问拼接后的链接，即可实现加速下载。我们清理下载缓存，使用加速下载，看看能有多少提升。\n1 https://curly-shape-d178.qinse.workers.dev/https://github.com/QIN2DIM/V2RayCloudSpider/releases/download/v4.5.4/v2rss_4.5.4_Windows-64bit.zip 反向代理加速下载\n是的，只需将下载链接完整复制到 CDN 链接之后就能实现反向代理（加速下载）。\n值得一提的是，此步骤的精华输出就是这个可用的 CDN 链接，意味着如果你想搭建自己的服务，上文提供的链接你已经可以拿去用了~\n此外，我们需要知道，CFW 提供免费服务「每天 10 万次请求以及每分钟 1000 次请求」仅当需求无法满足时，你才需要升级到 $5 的付费版本，此时你的 API Limit 变为「每月 1000 万次请求」 。从 上文截图所示的销量情况 来看，如果你有幸用上了付费版本，那你早已垄断了这个行业的生意（笑死。\n好了回到话题，经此讨论我们不难得出如下图所示的资源传递技术模型：\n首先，假设 Customer 能够正常浏览 GitHub 站点，并在浏览中产生需求；\n客户带着需求以及下载链接找到 Chatbot，并于 Chatbot 发生首轮交互；\n通过预先设定的 Inline 引导框架，客户能够提供经过 Review 的资源链接；\n至少要确认客户发来的链接指向 GitHub。\nChatbot 调度已经封装好的 SDK，修饰资源链接并返回给客户；\n若此时用户满意，则订单结束；若订单异常，则需要技术支持（人工客服）介入回滚订单。\n用户获取「高速下载链接」凭借 CDN 技术平步上青云。\n上文所述的实现方案 仅是作者的反射想法，生产环境要稍微麻烦些。此模型是实现 Background 所述模式的最简单方案。对于作者此类对 Cloudflare Workers 有所了解的玩家，部署一套用于加速 GitHub 资源拉取的反向代理接口，可能只需要几分钟（毕竟有成熟的轮子），编写一套完整的 Inline 引导框架可能需要一至两天的时间。如果你不知道怎么做 Chatbot，你可以“肉身交互”（模板回复）；如果你觉得部署麻烦，你可以在网络上直接获取 CFW 的加速链接，以及共享通用的 Inline 引导框架，甚至是手把手教你开淘宝店的奶妈教程，门槛非常低。\nAliyundrive Hash Mapping 如下分享的是一套可实现「内外双循环」的技术模型，此模型可插入到上文所述的实现方案 的任一环节中。\n技术支持与客户交流（或 Inline 引导），并询问客户是否拥有 Aliyundrive 账号；\nYES，我就问问； NO，提出免费下载，引导客户使用你的邀请码注册云盘账号，待获取 Response（网盘资源的分享链接） 后分发给客户。若用户否决提议（财大气粗），则返回 CFW 技术模型收费下载。 别光顾着问，先给人家下载东西，两三下就下好了。反正下好了就给客户发网盘分享链接，没有账号就得注册，用你的邀请码（明文超链接）跳转会很方便，也算是一种引导暗示。\n（占坑不定时更新）\nBusiness model Reference 用户 icon图标源自Icons8\n客户支持 icon图标源自Icons8\n博特 icon图标源自Icons8\nCloudflare Workers®\n文献传递_百度百科 (baidu.com)\n防火长城 - 维基百科，自由的百科全书 (wikipedia.org)\n","date":"2021-10-07T14:06:41+08:00","image":"https://blog.echosec.top/p/resources-transfer/d330174_hu6b41f5095a92548ef52b061fea950a3b_1335788_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/resources-transfer/","title":"『 Blog 』Resources Transfer"},{"content":"Quick Start 截止至 2021/09/15，Aliyundrive 仍采用 access-token + auto refresh 机制实现用户鉴权以及身份信息的超时更新。\n需要通过手动（或额外的自动化操作脚本）的方式「首次」获取 access_token，refresh_token 以及 default_drive_id ，之后可携带「更新码」请求相应的接口实现身份信息的自动更新。\nGet Token 以任何你喜欢的方式登录 阿里云盘网页版，登陆之后开启调试台 F12。\n根据这三个参数，可以对普通用户的挂载资源进行增删改查。\nHello World 使用 接口：获取用户信息 测试 Token 是否有效。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import requests # Change your private information STATIC_ACCESS_TOKEN = \u0026#34;\u0026#34; STATIC_REFRESH_TOKEN = \u0026#34;\u0026#34; DEFAULT_DRIVE_ID = \u0026#34;\u0026#34; def get_user_info(): api_url = \u0026#34;https://api.aliyundrive.com/v2/user/get\u0026#34; headers = { \u0026#34;authorization\u0026#34;: STATIC_ACCESS_TOKEN } session = requests.session() response = session.post(api_url, headers=headers, json={}) print(response.json()) if __name__ == \u0026#39;__main__\u0026#39;: get_user_info() 若一切正常，你将成功获取到如下信息（返回信息仅供演示，此处隐去 private value ）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { \u0026#34;domain_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;avatar\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;created_at\u0026#34;: , \u0026#34;updated_at\u0026#34;: , \u0026#34;email\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;nick_name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;enabled\u0026#34;, \u0026#34;user_name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;default_drive_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;user_data\u0026#34;: { \u0026#34;back_up_config\u0026#34;: { \u0026#34;手机备份\u0026#34;: { \u0026#34;folder_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;photo_folder_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;sub_folder\u0026#34;: {}, \u0026#34;video_folder_id\u0026#34;: \u0026#34;\u0026#34; } }, \u0026#34;share\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;deny_change_password_by_self\u0026#34;: false, \u0026#34;need_change_password_next_login\u0026#34;: false, \u0026#34;permission\u0026#34;: null } 至此，你已成功配置 authorization-header 并调用 /user/get 接口实现用户信息获取，而几乎所有的公开 API 都仅需此配置即可调用。\nPublic API User Group Get User Info https://api.aliyundrive.com/v2/user/get\ninfo\n获取账号基础信息\nHeader\nName Value Description authorization your access_token access_token（ 2 小时刷新一次） Body\n1 {} Response\nexample\nSource Group 与挂载资源相关的接口组。\nGet File List https://api.aliyundrive.com/v2/file/list\ninfo\n获取目标挂载区的文件列表标签。\nHeader\nName Value Description authorization your access_token access_token（ 2 小时刷新一次）详见刷新 token drive_id your drive_id 磁盘id值 parent_file_id root 上级文件夹路径 limit 10 每页显示文件数量 all false 是否显示全部 image_thumbnail_process image/resize,w_160/format,jpeg 图片缩略图类型 order_by updated_at 排序字段 order_direction desc 升序 asce / 降序 desc fields * 字段通配符 Body Response example Get File Details https://api.aliyundrive.com/v2/file/get\ninfo\n获取某个文件实体的详细信息\nHeader\nKey Value Note authorization your access_token access_token（ 2 小时刷新一次） Body\n1 2 3 4 { \u0026#34;drive_id\u0026#34;:\u0026#34;your drive_id\u0026#34;, \u0026#34;file_id\u0026#34;:\u0026#34;the file id\u0026#34; } Response\nexample\nGet Download Url https://api.aliyundrive.com/v2/file/get_download_url\ninfo\n拉取某个指定的文件实体\nHeader\nKey Value Note authorization your access_token access_token（2小时刷新一次） Body\nResponse\nexample\nAdvanced Work 内联搜索系统 在 Telegram bot | Inline Queries 服务中将阿里云盘作为超大型文件的内联搜索中间件。\n用户组资源映射 使用 AliyunDrive 网页版的现有特性，构建文件秒传通道。\nExcellent Work Reference liupan1890/aliyunpan: 阿里云盘小白羊版 阿里云盘PC版 (github.com)\n基于阿里云盘的共享云盘搭建 | 冷眸小站 (lengmou.net)\n","date":"2021-10-04T15:12:52+08:00","image":"https://blog.echosec.top/p/notes-aliyundrive-api/3862634_hu3d03a01dcc18bc5be0e67db3d8d209a6_268979_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/notes-aliyundrive-api/","title":"『 Notes 』Aliyundrive API"},{"content":"摘要 本文介绍一种利用 GitHub Actions / Workflows 以及 GitHub Private Repository 特性实现的 Hugo 站点安全分发策略。通过创建公有仓库部署 GitHub Pages ，创建私有仓库存储 Hugo 站点源码，通过私有仓库中的工作流以及 Deploy Key 机制桥接两个仓库的数据，达到私有化源码信息的同时部署个人站点的目的。\n相关工作 目前传统的 Hugo + GitHub Pages 部署思路主要分为以下 3 种（以 username.github.io 公有库为例）：\nPages Path = main/(root)，hugo publishDir = \u0026quot;./public\u0026quot;，以 ./public 文件夹为项目根推送站点。 Pages Path = main/docs，hugo publishDir= \u0026quot;./docs\u0026quot;，以 Hugo 站点文件夹为项目根推送。 Pages Path = gh-pages/(root)，仍将 Hugo 站点文件夹作为项目根推送至 main 主分支，但通过引入 GitHub Pages action 以及 Hugo setup 工作流，编译你推送的 Hugo 源码并将渲染出来的站点文件（如默认的 ./public）拷贝到（当前仓库）子分支 gh-pages，实现站点部署。 因 GitHub Pages 的部署仓库必须为 Public，如上 3 种方案优劣划分明显。\n方案一 是新手入门此技术栈最为常见的路线之一，优势显著——门槛低，快速部署。参照着网络上大部分的 Quick Start 教程都可以成功部署自己的站点。但其劣势也足够明显——无法有效管控 Hugo 源码。\n我们需要知道，Hugo + GitHub Pages 技术栈中，两套代码是相互独立的。Hugo 通过我们编写的「博客内容」以及「主题样式」渲染出站点；而 GitHub Pages 相当于提供了一个实体来托管我们渲染出来的站点。换句话说，除了 GitHub Pages 我们还有不下 10 种 托管方案。此处举个不恰当例子，Hugo 相当于是一个写了 print(\u0026quot;Hello World\u0026quot;) Python 代码的程序，我们可以用 Pycharm 打印它，也可以用 Spyder 打印，只是换了个壳，但如果我们「代码」没了，我只能有当前打印出来的东西，我们博客运营至今的工作进度都没法继承并且「丢失」了。\n显然，本地存储文件的损坏或丢失将引发不可预估的灾难。\n方案二 是一种能够有效处理上文所述痛点的解决方案。该方案的关键操作是将整个 Hugo 站点文件托管，指定 GitHub Pages 挂载子目录（既编译输出目录），有效存储了此技术栈的「内脏信息」，但同时它也暴露出了一些无法应对的问题——我们并不希望自己暂未发表的内容被公开。显然这是矛盾的，这与 GitHub 要求挂载博客的仓库必须「可见」有关（Free Plan）。我们暂未完成的工作可能会以 draf: true 形式标记，防止其被编译渲染进而呈现到公开可见的站点上，但如果我们将整个 Hugo 代码都上传到公有库中， 包括 content/post 在内的所有文件都是可见的。\n有的人提出将敏感信息加入到 .gitignore ，待文章编写工作完成后再一次性上传。显然这治标不治本，甚至有些方案一的影子。\n方案三 是在方案二上的提升与拓展。该方案主要解决提交历史紊乱的问题。在此方案中，我们一般会人为 ignore publishDir，意味着我们提交 Hugo 代码时，不会携带编译输出目录中大量繁杂的变更信息。如此一来，我们每次在本地完成编写工作后，无需运行 Hugo 编译指令，只需正常提交改动（仅变更 Markdown 文章或主题样式信息），而编译、推送、部署的工作由工作流自动完成。\n如上所述，如果你的需求是：需要一个「不可见仓库」存储源码，同时又不得不依赖「可见仓库」托管博客站点，那你也许会对本文介绍的解决方案感兴趣。\n解决方案 预备知识 若您阅读了上文所述信息，您应该了解本方案并不是一个 Hello World 操作指南，其具备一定的上手难度，需要您至少掌握如下技术以解决本文暂未提及的偶发性 BUG。\n了解 Git 基本指令（如：remote, pull, add, commit, push, checkout\u0026hellip;）；\n另外，读者需要知道如何设定全局配置用以绑定个人 GitHub 账号，否则你需要在每次提交代码时输出账号密码。\n了解 Hugo 基本指令，知道如何用 Hugo 写文章；\n了解 Bash(shell) 基本指令；\n了解怎么添加 Actions;\n已有成功部署 Hugo + GitHub Pages 个人博客站点的经历；\n意味着本文默认读者已有 GitHub 账号且知道如何新建公有/私有仓库。\n[Optional] CNAME 以及 GitHub Pages 自定义域名相关知识；\n你需要知道 CNAME 文件需要填什么，CNAME 文件命名与存储位置，以及如何在 Pages 中指定 custom domain。\n创建必要仓库 创建 GitHub 公有仓库 若您仅想测试本方案是否可行，大可新建一个 test repo，而无需直接在 username.github.io 上开刀。此处我们新建一个公有仓库 test-demo-repo。建议在创建仓库时不初始化任何文件，让其保持空置状态。\n创建 GitHub 私有仓库 同样，我们创建一个不初始化任何文件的私有仓库 test-demo-actions。注意，此处为了演示对比，作者将仓库权限设为「可见」。\n配置 DEPLOY_KEY 参考 GitHub 官方文档查看如何 生成 SSH 密钥。注意替换 \u0026quot;your_email@example.com\u0026quot; 即可，生产的密钥默认保存在 ~/.ssh/目录下。\n分配公钥 DEPLOY KEY\n以你喜欢的方式打开 id_rsa.pub（以使用 RSA 算法为例，根据你所选的算法文件名有所不同），复制其内容，打开 公有仓库 ，Settings \u0026ndash; Deploy Keys \u0026ndash; Add deploy key，添加密钥。\n此处你可能会疑惑 GitHub SSH Key 和 GitHub Deploy Key 的区别 是什么,可以简要理解为 root 用户和 user 用户的区别,前者配置在你的账号设置里，可以操作你的所有仓库，后者配置在仓库里，只能对此仓库具备操作权限。\n分配私钥 SECRET KEY\n以你喜欢的方式打开 id_rsa，复制其内容，打开 私有仓库 也即 源码库 ，Settings \u0026ndash; Secrets \u0026ndash; New repository secret 添加仓库密钥（给予工作流中被临时分发的虚拟机操作你的某个仓库的权限）。\n生产 Hugo 站点源码 在一个你喜欢的本机位置打开 Git Bash 并创建 hugo 站点： 1 hugo new site blog \u0026amp;\u0026amp; cd blog 此处我们需要用 git 指令拉取主题代码，并将其作为子模块导入，故需先初始化 git 运行环境： 1 git init 此处使用 Stack 主题 构建演示站点： 1 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 拷贝 Stack example site 演示站点特性： 1 cp -a themes/hugo-theme-stack/exampleSite/. . 删除默认站点配置文件（防止冲突）： 1 rm config.toml 启动 Hugo 本地服务，查看站点是否正常运行： 1 hugo server 访问 Hugo 本地服务器（默认1313端口）如果一切安好，你可以看到如下画面： Press Ctrl + C to stop hugo server 我们要开始后续步骤了~ 连接 Hugo 与 私有仓库 将 源码库 （私有库）作为远程仓库链接（请替换为你自己的 URL）： 1 git remote add origin https://github.com/QIN2DIM/test-demo-actions.git 我们的仓库处于空置状态，需要先进行一些预处理： 1 git branch -M main 添加变动并强制推送：\n这也解释了上文为什么不推荐在创建仓库时添加初始化文件，如果你那样做了，此处需要多一步历史对齐的操作。链接远程仓库后需要先把远程仓库中的初始化文件拉到本地，否则强制推送会出现一些遗留问题。\n1 git add --all \u0026amp;\u0026amp; git commit -m \u0026#34;migrate\u0026#34; \u0026amp;\u0026amp; git push -f origin main 查看仓库盛况\n如果一切安好，你会在你的私有源码库中看到如下目录结构的信息，如果你足够了解 Git 默认的文件比对机制，应该知道并未被上传的资源是「空文件」。\n此时，诸如此目录结构的「Hugo 源码」已能渲染出成型的博客站点，就如同你在本地启动服务那样。而我们需要思考的是，这个私有仓库并不能挂载博客，我们需要将渲染出来的站点代码放到可见的公有仓库下面（如 username.github.io），这个工作交由 workflows 进行。\n创建工作流 就算您不了解 GitHub Actions / Workflows也无大碍，我会在后文详细注释「workflows 代码」中关键步骤的具体含义，让你足够了解自己在做什么。你也可以阅览作者临时总结的关于 workflows 的运行逻辑，来了解它是如何工作的。\n打开 私有源码库 ，创建工作流\n将以下代码覆盖 Edit new file 窗格中的内容，并按照提示修改env环境变量：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 # 工作流的名称 name: hugo-deploy # 触发事件 on: # 当主分支 main 文件变更时触发任务 push: branches: [main] # jobs 此工作流执行的任务 # 在 Workflows 中,各个 job 是并行执行的，此处仅有 1 个 job jobs: # job-id 在一个工作流中唯一区分，此 job-id 为 build build: # 此 job 运行的虚拟系统 runs-on: ubuntu-latest # 此 job 的任务执行步骤，默认顺序执行 steps: # step1: 检查运行环境是否正常 - uses: actions/checkout@v2 # 若您的代码中携带子模块，请务必书写如下内容 with: submodules: true fetch-depth: 0 # step2: 开始执行核心逻辑 # name 是步骤的名称，相当于步骤的简明注释，但可有可无 - name: \u0026#34;Building...\u0026#34; # uses FORMAT: 用户/仓库@版本信息 # - uses 是 workflows 的精髓，其作用可概述为：预加载并运行指定资源 # 它可以指向 workflows-image，甚至可以具体到某个仓库中的一个可执行文件 # - 此处使用 reuixiy/hugo-deploy@v1 桥接两个仓库 uses: reuixiy/hugo-deploy@v1 # env 环境变量 # - job 中的每一个 step 都是独立的进程，其内创建的变量互不共享 # - 通过 env 创建的环境变量（键值对）可以被 step 读取并使用 # - 此处需要设定4个环境变量 env: # DEPLOY_REPO 部署 GitHub Pages 的可见代码库(如 username/username.github.io) DEPLOY_REPO: username/test-demo-repo # DEPLOY_BRANCH 部署 GitHub Pages 的可见代码库的分支 # - 若上一步选择的是 username.github.io，请不要在不熟悉本解决方案的情况下填写 main,master 等主分支名词； # - 工作流会自动创建原先不存在的分支 DEPLOY_BRANCH: build # DEPLOY_KEY 操作权限（非对称）密钥 # - 源码仓库中的工作流读取私钥，获取 GitHub Pages 所在仓库的（读写）权限 # - workflows 读取的是 Secrets Key，只是此处的变量名叫 DEPLOY_KEY DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }} # TZ 时区信息，主要为了 git commit -m \u0026#34;xxx\u0026#34; 提供备注信息 # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones TZ: Asia/Shanghai 为了防止冲突以及提高容错，我们选择先将远程仓库的代码改动（add main.yml）同步到本地：\n顺便等一下 workflows 运行。\n1 git pull origin main 查看仓库盛况\n当你看到 workflows 运行完成的标志后，访问你部署 GitHub Pages 的仓库页面，如果一切安好，你讲看到如下内容：\n分析盛况\n若你严格按照本方案提供的步骤操作， workflows 配置文件的提交也算是一次触发动机，Actions 会自动进行首次工作。若您的顺序有点颠倒，比如先加了工作流，才想起来自己没有配置密钥，那么你仅需要做任何改动再次向主分支提交代码触发 actions 的工作流即可，比如修改一下 workflows 配置文件的注释之类的。\n你可以看到，在你的公有库（指定分支）下的内容就是你 「Hugo 源码」编译输出的内容。以此公有库分支（如 build 或你指定的分支）为根（/root）即可生成 Pages。\n是的你没听错，我们进行到这个步骤都还没配置 GitHub Pages，就如同上文所说，Hugo 是「内脏」，而 GitHub Pages 仅是「壳」。\n验收 打开公有库配置 GitHub Pages。\nSettings \u0026ndash; Pages ，指定 Source，Branch 就是你指定的分支，路径选择 /(root)，完事 Save。\nPage Build\n等待 GitHub Pages 部署完成，访问部署站点。\nHello Man\n部分同学到这一步会遇到如下图所示的问题（相对路径索引异常），不要慌。\n1）你需要确保 Hugo Config 中的 baseUrl 是否填写正确。如公有仓库名为 superman/blog，则 baseUrl: https://supermain.github.io/blog，若仓库名为 superman/superman.github.io，则 baseUrl: https://supermain.github.io。若您的仓库名包含英文大小写，请确保 baseUrl 中统一小写的写法，这与 Linux 文件系统命名有关。\n2）如果你正在 test 仓库上进行本方案的实验任务，且其他仓库已经部署了（自定义）根域名站点，那你需要在测试站点上也配置 CNAME（具体如何配置需要您自行掌握，这不在本篇博客的介绍范围之内），同时需要检查上一步的提议。这并不是什么难事，作者几乎每一个有价值的 GitHub Project 都会使用 Hugo + Github Pages 的技术栈部署技术文档，而这些站点都使用同一个自定义域名，而作者的 QIN2DIM/QIN2DIM.github.io 仓库则部署了 Blog Pages。\nHello World\n本站目前采用的就是这种部署方案。\n关联问题 Workflows: How does it work? Uses: reuixiy/hugo-deploy@v1 我们在 workflows 配置文件的任务步骤中拉取并执行了 reuixiy/hugo-deploy@v1 指向的代码。这个脚本文件主要做了 3 件事：\n读取我们配置的 env 环境变量\n定位我们挂载 GitHub Pages 站点的仓库地址； 配置 GitHub SSH 用户名以及邮箱（用于鉴权）； 拉取 DEPLOY_KEY 并赋予操作权限； 将我们的源码库克隆到虚拟容器中，执行 Hugo 编译指令生产静态站点\n划重点，如果你的 Hugo 站点配置文件中没有指定 publishDir 参数，那么编译输出默认是./public。换句话说，如果你之前手动指定了 publishDir 为其他文件，那你需要注释掉这个参数，否则工作流的运行会出现异常。\n进入编译输出文件夹（./public），并在此文件路径下执行代码提交指令\n此外，我们并不需要在 workflows 配置文件中编写 Hugo setup 等配置 Hugo 编译环境的步骤，因为我们引用的 reuixiy/hugo-deploy@v1 已经写了一个拉取最新拓展版 Hugo 的 Dockerfile。\n脚本源码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #!/bin/bash # Required environment variables: # # DEPLOY_KEY SSH private key # # DEPLOY_REPO GitHub Pages repository # DEPLOY_BRANCH GitHub Pages publishing branch # # GITHUB_ACTOR GitHub username # GITHUB_REPOSITORY GitHub repository (source code) # # TZ Timezone set -e REMOTE_REPO=\u0026#34;git@github.com:${DEPLOY_REPO}.git\u0026#34; REMOTE_BRANCH=\u0026#34;${DEPLOY_BRANCH}\u0026#34; git config --global user.name \u0026#34;${GITHUB_ACTOR}\u0026#34; git config --global user.email \u0026#34;${GITHUB_ACTOR}@users.noreply.github.com\u0026#34; # https://github.com/reuixiy/hugo-theme-meme/issues/27 git config --global core.quotePath false ln -s /usr/share/zoneinfo/${TZ} /etc/localtime mkdir /root/.ssh ssh-keyscan -t rsa github.com \u0026gt; /root/.ssh/known_hosts \u0026amp;\u0026amp; \\ echo \u0026#34;${DEPLOY_KEY}\u0026#34; \u0026gt; /root/.ssh/id_rsa \u0026amp;\u0026amp; \\ chmod 400 /root/.ssh/id_rsa git clone --recurse-submodules \u0026#34;git@github.com:${GITHUB_REPOSITORY}.git\u0026#34; site \u0026amp;\u0026amp; \\ cd site hugo --gc --minify --cleanDestinationDir pushd public \\ \u0026amp;\u0026amp; git init \\ \u0026amp;\u0026amp; git remote add origin $REMOTE_REPO \\ \u0026amp;\u0026amp; git add -A \\ \u0026amp;\u0026amp; git checkout -b $REMOTE_BRANCH \\ \u0026amp;\u0026amp; git commit -m \u0026#34;Automated deployment @ $(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;) ${TZ}\u0026#34; \\ \u0026amp;\u0026amp; git push -f origin $REMOTE_BRANCH \\ \u0026amp;\u0026amp; popd rm -rf /root/.ssh 总结 下图所示为本文介绍方案的总流程图。核心环节是创建在 「私有仓库」 中的 Workflows hugo-deploy：\n工作流将你的 Hugo 私有代码克隆进虚拟容器中； 执行 Hugo 编译指令生成静态站点； 通过 Secreat Key / Deploy Key 权限密钥获取 GitHub Pages 公有仓库的读写权限； 将编译输出文件 ./publishDir 推送至公有仓库。 最后部署了 GitHub Pages 的公有仓库拥有自己的网页渲染工作流，执行完毕后将自动更新你的博客站点。\n下表为本文涉及四种方案在部署速度，隐私性、上手难度等维度的横向比较：\n属性/方案 方案一 方案二 方案三 安全分发 部署速度 ☀️☀️☀️ ☀️☀️ ☀️☀️ ☀️ 隐私性 ☀️☀️☀️ ☀️ ☀️ ☀️☀️☀️ 持久运营 ☀️ ☀️☀️☀️ ☀️☀️☀️ ☀️☀️☀️ 上手难度 ☀️ ☀️ ☀️☀️ ☀️☀️ 不难看出，本文所介绍的“安全分发”方案优势在于利用 GitHub Private Repository 不可见特性在提高了隐私性的同时解决了方案一无法持久运营的问题，但其所依赖的 Workflows 相关技术栈提升了方案整体的上手难度。\n此外，本文介绍的方案使用了reuixiy/hugo-deploy@v1 提供的 Hugo 站点“分发”脚本，其流程上使用 DockerFile 进行 Hugo 编译环境的创建，而非使用 GitHub Actions 提供的预加载环境，这极大拖累了“整机性能”，导致“安全分发”的部署速度在此次横评中垫底。\n不可否认的是，你完全可以选择使用诸如 方案一 + 坚果云 双路复用的解决方案，既保证了部署速度和隐私性，又具备代码实时上云的持久运营能力；也可以使用 GitHub bot 来替代“安全分发”中的某些环节；也可以魔改“安全分发”的工作流来拔升部署速度；甚至你可以使用多级 NAS 存储你的项目源码。毕竟折腾技术总是有趣上头，根据你的具体需求和环境选择适合你的方案即可！\n参考资料 How to Set Up a Hugo Site on Github Pages - with Git Submodules! - DEV Community\nHosting \u0026amp; Deployment | Hugo (gohugo.io)\nhugo-deploy/entrypoint.sh at master · reuixiy/hugo-deploy (github.com)\nGitHub Actions文档 - GitHub Docs\n","date":"2021-09-30T11:16:18+08:00","image":"https://blog.echosec.top/p/hugo-hugo-deploy/6561379_hu1a518b9dc71ef1cdf50a484a328c8e30_247740_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/hugo-hugo-deploy/","title":"『 Hugo 』Hugo Deploy"},{"content":"本文章“常见问题”的搜集源自 华律网 ，北大法宝 以及相关生活经验。\n导航 常见问题 [LICENSE]\n知识共享许可协议(Creative Commons license) MIT 许可协议(The MIT License) Apache 许可协议 BSD 许可证 GNU 通用公共许可证 常见问题 [知识产权]\n转载，引用，抄袭，原创的区别 用别人的作品当头像侵权吗? 如“涉及侵权，请联系删除”等免责声明是否有效？ 常见问题 [劳动纠纷]\n常见问题 [合同纠纷]\n法条索引\n中华人民共和国著作权法 常见问题 [LINCENSE] 知识共享许可协议 知识共享许可协议 - 维基百科，自由的百科全书 (wikipedia.org)\n标志\r权利\r备注\r署名（英语：Attribution，by）\r您（用户）可以复制、发行、展览、表演、放映、广播或通过信息网络传播本作品；您必须按照作者或者许可人指定的方式对作品进行署名。\r相同方式共享（英语：ShareAlike，sa）\r您可以自由复制、散布、展示及演出本作品；若您改变、转变或更改本作品，仅在遵守与本作品相同的许可条款下，您才能散布由本作品产生的派生作品。（参见copyleft）。\r非商业性使用（英语：Noncommercial,nc ）\r您可以自由复制、散布、展示及演出本作品；您不得为商业目的而使用本作品。\r禁止演绎（英语：No Derivative Works，nd)\r您可以自由复制、散布、展示及演出本作品；您不得改变、转变或更改本作品。\r图标\r说明\r缩写\r署名要求\r混合作品\r允许商业性使用\r允许自由文化作品\r符合OKI的“开放定义”\r不受限制地在全球范围内发布内容\rCC0\r否\r是\r是\r是\r是\r署名（BY）\rBY\r是\r是\r是\r是\r是\r署名（BY）-相同方式共享（SA）\rBY-SA\r是\r是\r是\r是\r是\r署名（BY）-非商业性使用（NC）\rBY-NC\r是\r是\r否\r否\r否\r署名（BY）-非商业性使用（NC）-相同方式共享（SA）\rBY-NC-SA\r是\r是\r否\r否\r否\r署名（BY）-禁止演绎（ND）\rBY-ND\r是\r否\r是\r否\r否\r署名（BY）-非商业性使用（NC）-禁止演绎（ND）\rBY-NC-ND\r是\r否\r否\r否\r否\r例如本站所使用的 CC BY-NC-SA 4.0 许可，署名-非商用-相同方式共享 4.0。\nMIT 许可协议 MIT许可证 - 维基百科，自由的百科全书 (wikipedia.org)\n更大的权利与更少的限制\n被许可人权利\n被许可人有权利使用、复制、修改、合并、出版发行、散布、再许可和/或贩售软件及软件的副本，及授予被供应人同等权利，惟服从以下义务（义务并非强制）。\n被许可人义务\n在软件和软件的所有副本中都必须包含以上著作权声明和本许可声明。\nApache 许可协议 BSD 许可证 GNU 通用公共许可证 常见问题 [知识产权] 转载，引用，抄袭，原创的区别 注意：以下陈述为作者个人理解，完整词缀描述请查百科或相关法条。如下以“文章发表”为例子说明“著作权”的常见体现，同样的形式也用于“乐曲”“计算机软件”“影视作品”等实体，需要注意的是 idea 不属于保护范围，仅有想法不落地不算侵权但也不受保护。\n原创：甲用户在知乎首发了一篇文章A，不属于改编、翻译、注释、整理他人已有创作而产生的作品。\n简单理解，如果文章是自己敲出来的，内容和观点或是文章标题都无法在网上查到相同的案例的，都可以认为是原创。但现在各个垂直领域的基础构建几乎无死角，不可能完全不涉及他人的理论研究成果，所以文章中出现引用是必要的也是必须的。\n引用：乙用户在任何平台上发表文章B，使用了A文章中的数据或者结论，注明来源。\n篡改：乙用户在任何平台上发表文章B*，使用了A文章中的数据或者结论，注明来源，但对数据本身有所改动或将原文逻辑紧密的上下文断章取义放到自己的文章中用以强化自己的观点（歪曲理解）。\n抄袭：丙用户在任何平台上发表文章C，将B或A中的内容分散融入到自己文章的上下文之中，不注明来源。\n抄得少叫“融入”，抄得多叫“复制粘贴 + 语序润色”。\n转载：丁用户复制（Ctrl + C ）粘贴（Ctrl + V）了一篇文章后在任何平台上发表。\n所以默认情况下转载就是侵权，除非获得原作者授权！（转载后的）文章中的“涉及侵权，请联系删除”等免责声明无法律效益。\n用别人的作品当头像侵权吗? 用别人的画作为账号头像的，如果不以盈利为目的，仅仅作为头像使用的，一般不构成侵权。\n相关法条\n《中华人民共和国著作权法》第二十二条\n《中华人民共和国著作权法》第四十七条\n如“涉及侵权，请联系删除”等免责声明是否有效？ “先授权，后转载”是”著作权法“的强制规定，未经授权进行转载均构成侵权。\n（1）“未经许可，严禁转载”，对于网络内容提供者而言，无论“声明”与否，只要未经许可转载都算侵权。\n（2）“禁止转载”，顾名思义，不可转载。\n法条索引 中华人民共和国著作权法 ","date":"2021-09-24T10:28:41+08:00","image":"https://blog.echosec.top/p/blogs-live-legal-issues/3360802_hu287a994f9068ed1c14837da15f031b22_302800_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/blogs-live-legal-issues/","title":"『 Blog 』需要留意的法律问题"},{"content":"DEMO 提示：若无法播放以下内嵌视频，请注意系统代理的使用是否正确。\nYouTube 插入视频：https://www.youtube.com/watch?v=vmkRMvhCW5c\n1 \\{\\{\u0026lt; youtube vmkRMvhCW5c \u0026gt;}} 本地视频 插入视频：./minor-Shiru-Chen.mp4\n1 \\{\\{\u0026lt; video src=\u0026#34;./minor-Shiru-Chen.mp4\u0026#34; \u0026gt;}} Your browser doesn't support HTML5 video. Here is a\rlink to the video instead.\r哔哩哔哩 插入视频：https://www.bilibili.com/video/BV1vs41197Fh?\n1 \\{\\{\u0026lt; bilibili BV1vs41197Fh \u0026gt;}} 腾讯视频 插入视频：https://v.qq.com/x/page/y00408t8246.html\n1 \\{\\{\u0026lt; tencent y00408t8246 \u0026gt;}} 西瓜视频 搜狐视频 优酷视频 Shortcodes WHAT Shortcode What a Shortcode is\nshortcode 短码调用，您的博客文章中被“特殊标注”的内容将被 Hugo 识别转义。\n通常，我们将 shortcode 技术用于“内联搜索”的应用场景，换句话说， shortcode 允许您在博客正文的任意位置嵌入可直接播放的媒体资源。\n也许您曾留意到，Hugo文档中经常出现类似的应用案例。\nWHY Shortcode 您可以通过 shortcode 在文章的合适位置插入媒体资源用以增加信息浓度，提高内容的可读性。\nHOW Shortcode How it works? How to use the build-in shortcode of Hugo？ Use Shortcode\n在您的 Markdown 文章中使用如下格式的短码调用, 其内容将被 Hugo 识别为shortcode 1 \\{\\{\u0026lt; yourShortcodeName [params] \u0026gt;}} 在您的站点根目录下新建./layouts/shortcodes/yourShortcodeName.html，编写这个文件\n此时，您在此.html中编辑的语法内容将被 Markdown 容器接受并被 Hugo kernel 渲染输出体现在您的调试网页上。\n若您暂时不知道该写点什么，不必担心，Stack 默认提供了几种可靠的短码调用策略。它们默认存储在./themes/hugo-theme-stack/layouts/shortcodes中，根据 Hugo 模板调用的优先顺序，当您的根目录下的 ./layourts/shortcodes/并不存在有效同名项目时，Stack 提供的默认策略将生效。\n注意：一般情况下，\\{\\{\u0026lt; \u0026gt;}} 标识符（此处加了反斜杠防止转义）中的 yourShortcodeName 需要与您所指定的位于./layouts/shortcodes/或./themes/hugo-theme-stack/layouts/shortcodes下的.html文件名一致。\n例如指定 ./layouts/shortcodes/youtube.html，那么合适的调用格式是 \\{\\{\u0026lt; youtube \u0026gt;}}，后面的[params]则根据具体的shortcode接口内容而定。\nHow to use the custom shortcode of Stack 例如实现业内插入 Youtube 来源视频，假设如下 Markdown 内容为您的一篇博客正文，若您正处于 hugo server 本地调试模式，可直接复制挪用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026gt; 这是写在你的 Markdown 正文中的内容哟~ ## Example 1 - 插入视频：`https://www.youtube.com/watch?v=MpYy6wwqxoo` - 接受参数视频 ID,可能网址很长,但只需要复制**键值对** `v=` 后面的内容，如： \\{\\{\u0026lt; youtube MpYy6wwqxoo \u0026gt;}} ## Example 2 - 插入视频：`https://www.youtube.com/watch?v=XRGquU0ZJok\u0026amp;list=PLvOO0btloRnsiqM72G4Uid0UWljikENlU\u0026amp;index=6` - 这是一个分 p 的视频列表，链接中写明了这个`List ID` ,以及这个\u0026#34;视频\u0026#34;在列表中的位置序号 `index` 但此处我们一次性只能插入一个视频，所以依然是只需要复制**键值对** `v=` 后面的内容，如： \\{\\{\u0026lt; youtube XRGquU0ZJok \u0026gt;}} Shortcode API 上文简要介绍了如何在 Markdown 正文中利用 shortcode 内嵌 Youtube 视频资源，除此之外，Hugo 内置了许多的shortcode 模板文件。\n以下是本主题提供的其他短码调用模板，其标准引用方法如下文所示。\n注意: 所有 Examples 标注的内容都是写在你要提交（post）的 blog-Markdown 中的。\n目前，本主题支持如下类型的媒体资源内嵌方案：\n哔哩哔哩 腾讯视频 本地视频 YouTube Bilibili 在博文中插入哔哩哔哩媒体资源。\nShortcode Format\nName Value Description vid AV号 / BV号 [分P号] 必填参数。(Type: String) 视频资源ID。 1 2 \\{\\{\u0026lt; bilibili AV号或BV号 \u0026gt;}} \\{\\{\u0026lt; bilibili AV号或BV号 分P号 \u0026gt;}} Examples\n插入资源： https://www.bilibili.com/video/BV1Sf4y1n75U?p=1\n在 bilibili 的规则中，同一 List 下的分 P 视频的 BV 号都是一样的，通过 params: p 来区分不同的视频\n1 2 3 \\{\\{\u0026lt; bilibili BV1Sf4y1n75U 1 \u0026gt;}} \\{\\{\u0026lt; bilibili BV1Sf4y1n75U 2 \u0026gt;}} 插入资源：https://www.bilibili.com/video/BV1Yv41147QK\n1 2 \u0026lt;!-- just video src --\u0026gt; \\{\\{\u0026lt; bilibili BV1Yv41147QK \u0026gt;}} Tencent 在博文中插入腾讯视频媒体资源。\nShortcode Format\nName Value Description vid 视频id 必填参数。(Type: String) 视频资源ID。 Examples\n插入资源：https://v.qq.com/x/page/b31563j0jqw.html\n1 2 \u0026lt;!-- just video src --\u0026gt; \\{\\{\u0026lt; tencent b31563j0jqw \u0026gt;}} Video 在博文中插入本地(.mp4)视频文件。\nShortcode Format\nName Value Description src relative paths 必填参数。(Type: String) 视频文件（相对）路径。 autoplay true / false 可选参数。(Type: String) 自动播放。 poster relative paths 可选参数。(Type: String) 视频封面（相对）路径。 Examples\n插入资源：与本篇博文放置在同一目录下的视频文件./video.mp4\n1 2 3 4 5 \u0026lt;!-- just video src --\u0026gt; \\{\\{\u0026lt; video \u0026#34;./video.mp4\u0026#34;\u0026gt;}} \u0026lt;!-- Other option --\u0026gt; \\{\\{\u0026lt; video src=\u0026#34;./video.mp4\u0026#34; autoplay=\u0026#34;true\u0026#34; poster=\u0026#34;./video-poster.png\u0026#34; \u0026gt;}} Youtube 在博文中插入 YouTube 媒体资源。\nShortcode Format\nName Value Description id video id 必填参数。(Type: String) 视频ID。 autoplay true / false 可选参数。(Type: String) 进入页面后自动播放。 Examples\n插入资源：https://www.youtube.com/watch?v=jflq6vNcZyA\n1 2 3 4 5 \u0026lt;!-- just video src --\u0026gt; \\{\\{\u0026lt; youtube jflq6vNcZyA \u0026gt;}} \u0026lt;!-- Other option --\u0026gt; \\{\\{\u0026lt; youtube id=\u0026#34;jflq6vNcZyA\u0026#34; autoplay=\u0026#34;false\u0026#34; \u0026gt;}} Conclusion Reference Shortcodes | Hugo (gohugo.io)\nShortcodes | Hugo 主题 Stack (jimmycai.com)\n","date":"2021-09-22T20:23:13+08:00","image":"https://blog.echosec.top/p/hugo-shortcode/3174729_hu6fca887f85cc6d9a8c86aeb13665d90b_125366_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/hugo-shortcode/","title":"『 Hugo 』Shortcode"},{"content":"Overview 本篇博客分享如何在 Hugo 中快速部署 utteranc 博客评论系统。\n此外，作者在压测环境下做了一系列针对该系统的实验。任何你对这个系统可能遇到的极端情况，以及想知道结果但不敢操作的相关行为的代价都详细记录在了文章末尾的 Conclusion中，望有助。\n作者所使用的测试环境是 Hugo/theme:Stack + Github Pages，使用的环境信息如下：\nID Content OS Windows hugo version hugo v0.88.1-5BC54738+extended hugo theme hugo-theme-Stack v3.2.0 注意： 若您将本篇博客作为您部署 utterances 的参考思路，默认您已具备一个可以正常运作的 Hugo 个人站点。\nWHAT utterances utterances 是一种基于 GitHub issues 构建，可以将 GitHub issues 作为博客评论载体的轻量级评论小部件。截止至2020/09/21，此项目扔拥有以下特性：\n完全开源 不追踪流量，没有广告，完全免费 不阻断流量，所有的评论数据都会存储在你指定的Repository中 基于Primer设计，这是一种Github官方提供的CSS工具包（相较之下有更好的兼容性和性能提升） 支持暗黑模式（Dark theme） 足够轻量，完美兼容 Markdown 语法，没有字体缓存或 JavaScript frameworks 依赖 WHY utterances 为什么选择utterances？主要原因如上文所示，utterances 是一种基于 Github 生态孵化的足够轻量的部件，在使用同为 Github 产品 Github Pages 的前提下，使用”同源产品“能够方便我们管理资源的储备及分布。此外，”同源“意味着它比其他”第三方“产品具备更好的兼容性及运行效率，从技术选型上符合”足够使用，不需要过度折腾“的普世需求。\n此外，对于国内技术用户来说有更大的便捷之处。选择 utterances 作为博客评论系统的多大技术出身，此类技术博客的访客通常也人手一个 Github 账号。因此， Github 一键授权后，“评论发布” 与 “issues 分发” 都将畅通无阻，而非像部分第三方系统，还需使用者注册额外账号获取 Token 并鉴权后才能回复，这样绕一圈非常耗时，可能有的系统站点还被墙了，部分访客无法访问。\n当然，还有许多 Github 同源产品，以及一些优秀的第三方产品，这里不过多介绍了。截至目前 Hugo 支持的评论系统对比如下：\nProvider Github Platform Markdown Open Source No ADs disqus ❌ ✅ ❌ ❌ utterances ✅ ✅ ✅ ✅ remark42 vssue waline twikoo giscus gitalk ✅ HOW utterances How it works utterances 工作流大致如下：\n当你的站点首次部署 utterances 时，它会定期（频率很快）扫描你的站点，如果发现有新的留言，会依照对应的规则（title/url/pathname）在你的 comments-repo 里提交 issue 。比如，你选择的规则是 title, 那么你的文章标题会被作为 Issue Title 提交到 comments-repo ；如果你选的规则是 pathname，那么文章对应的访问路径就会成为你的 Issue Title; url同理，只是在pathname前加上了域名标签。\n当访客（首次使用 utterances 系统）评论时，需要先进行 Github OAth API 授权，涉及的权限是允许 utterances 控制访客账号向你的 comments-repo 提交留言。\n值得一提的是，当你首次成功部署utterances后，它并不会自动扫描你的站点并为你所有的文章都创建一个对应的初始化 issue 发送到你的仓库，它只会监听自它被部署后新出现的评论，如果这个被评论的文章没有提过 issue，才会携带相关信息提交 issue，如果已存在 issue（该篇文章被 utterances-user 评论过），则会携带相关信息盖楼（在同 issue 下留言，而非继续创建）。\n当有访客来到这发表评论时，会经过如下过程：\n上图 utterances-workflow 提到了几个关键节点：\ncomments-repo：用于存放用户评论信息的仓库\n意味着我们需要创建一个 Repository 存放 blog comments\nutterances-bot：用于处理其他 Github 用户提交的 comment\n意味着我们需要在这个 Repository ( comments-repo ) 中下载 utterances，包含授权以及机器人一条龙管家服务。\nHow to use utterances on Hugo New a Public Repository, such as \u0026lsquo;comments-repo\u0026rsquo;.\nChange the configuration of your Hugo site-code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # ~/config.yaml # 再次声明，本博客使用 Stack 主题作为分享参考，此主题使用.yaml 格式配置文件，且预先写好了 utterances 接口网页，意味着仅需改动配置文件就能使用。 # 如果你至此的所有环境与操作都与作者相同，那恭喜你马上就要通关了！ # 如果你的主题用其他格式文件，注意语法的调整。 # 如果你的主题没有携带 utterances 脚本代码，请在~/layouts/partials/comments/provider/ 目录下新建一个 utterances.html 文件，并在里面输入下一个代码块中的内容。如何判断你的主题是否支持 utterances 呢？ 查看 ~/themes/\u0026lt;your-theme\u0026gt;/layouts/partials/comments/provider/ 目录下是否存在 utterances.html 既可。 # 全局配置 params: # 留言系统设置 comments: enabled: true # 评论系统提供商。目前支持的有：disqus utterances remark42 vssue waline twikoo giscus gitalk provider: utterances # 关于 utterances 的具体配置 utterances: # repo 必填项，指向你的`comments-repo`，参照写法如 qin2dim/blog-comments 注意别加.github.io repo: \u0026lt;GithubUserName\u0026gt;/\u0026lt;RepositoryName\u0026gt; # issueTerm: 必填项，issue标题的切分规则，可写 pathname title url issueTerm: pathname # theme 必填项，评论区的主题 # 可选 github-light github-dark preferred-color-scheme # github-dark-origin lcy-dark dark-blue photon-dark boxy-light theme: github-light # label 可选项，提交的issue的默认标签，不填则不打标签。 label: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // utterances.html template of theme, Stack \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;{{ .Site.Params.comments.utterances.repo }}\u0026#34; issue-term=\u0026#34;{{ .Site.Params.comments.utterances.issueTerm }}\u0026#34; {{ with .Site.Params.comments.utterances.label }} label=\u0026#34;{{ . }}\u0026#34; {{ end }} crossorigin=\u0026#34;anonymous\u0026#34; async \u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .utterances { max-width: unset; } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; function setUtterancesTheme(theme) { let utterances = document.querySelector(\u0026#39;.utterances iframe\u0026#39;); if (utterances) { utterances.contentWindow.postMessage( { type: \u0026#39;set-theme\u0026#39;, theme: `github-${theme}` }, \u0026#39;https://utteranc.es\u0026#39; ); } } addEventListener(\u0026#39;message\u0026#39;, event =\u0026gt; { if (event.origin !== \u0026#39;https://utteranc.es\u0026#39;) return; setUtterancesTheme(document.documentElement.dataset.scheme) }); window.addEventListener(\u0026#39;onColorSchemeChange\u0026#39;, (e) =\u0026gt; { setUtterancesTheme(e.detail) }) \u0026lt;/script\u0026gt; Install utterances for your \u0026lsquo;comments-repo\u0026rsquo; .\n访问 utterances 为你的仓库下载执行脚本。切记仅对你存储评论的仓库下载脚本（Only select repositories）。\nGit the utterances-bot to operate your \u0026lsquo;comments-repo\u0026rsquo;.\n再次访问 utterances 授予机器人操作仓库的权限（Configure）。\nEnjoy your live.\n本地启动 Hugo 服务器，或者推送启动了评论功能的站点代码，直接访问你的 Github Pages，测试评论功能。\nConclusion 本地 hugo server 提交的评论也会被 utterances-bot 收录到 issues 中\n直接在 issues 中发送的留言，也被会 utterances-bot 转发到 issues 对应的博客评论区中\n值得一提的是，如果你此时正在本地运行 hugo server，有人在 issue 中发送新的留言，你能直接在 local server 中接收到这个信息，意味着你的文章评论区会直接渲染出更新的内容（如果你是 fast render 模式，需要刷新一下页面）。 同理，已经部署发布的站点也能收到这些讯息（实时更新）。\n从 utterances-bot 被成功部署的时刻算起，被评论过的文章才会被映射成 issue 收录进 comments-repository 中\n作为仓库的创建者，你有权删除任何 issue\n一个已创建的评论 issue 后被删除，其盖楼评论会一起消失，意味着 issue 对应博客下的所有评论都会被瞬间清空。\n作为仓库的创建者，你有权 close/reopen 任何 issue，但这并不影响评论系统的正常运转\n如下图所示，作者先手动关闭了一个评论 issue，观察到稍后在博客中的留言依然可以被转发进来。此时 issue 仍保持close状态，并不会因为有新的动态而reopen。\n同样，从closed issue中发的言论，仍会被同步到 issue 对应的博客评论区中，如下图所示。\n从 issue 中被删去的留言，在 issue 对应文章的评论区中的留言也会被同步删除\n但是在博客中确无法找到删除留言的元素，意味着博客留言者想要移除/修改自己已发表的评论，需要到 comments-repo 仓库这里修改。\n映射网址无法自动调整\n还记得Conclusion 的第一条总结吗，机器人会提供一条反射信息，是一个直接指向该篇博客的访问链接。通常情况下这时正常运作的，但如果这篇文章的第一条评论是你在本地测试时直接在 hugo server 上发送的，那反射信息就会如图中显示的那样指向http:localhost:1313/xxx，这是一个非常糟糕的情况，后续作者在部署站点上更新的评论，依然无法让机器人自动调整反射网址。如果你这么做了，你可能手动修改issue中的反射信息，否则他无法指向正确的博客链接。\n机器人提供的反射域名并不会因为你设置了CNAME而有所改变，依然会是https://Yourname.github.io/xxxx。\nutterances 具备一定的“跟踪”能力\n如第一条 Conclusion 所示，当你的文章被标记收录后，机器人会提供你的文章标题以及副标题信息。即使你未来改变了这些信息（title，description），issue中的已被提供的这些信息不会自行变更，但这并不影响评论系统正常运行。\n但如果你修改了文章的slug也即修改了文章对应的检索路径（重启本地服务器后生效），这篇文章挂载的评论信息会“丢失”。同样，你在更新了 slug 的文章发送的评论，会被机器人以新的 issue 提交到你的 comments-repo，显然，首层占楼的反射信息指向了你变更后的博客网址。\nutterances 跟踪你的网址而非你的标题\n是的，猜想是对的。当你将文章的slug改回去后，这篇文章所挂载的评论区又回来了。意味着只要不删除 issue，评论信息并不会真正 \u0026ldquo;丢失\u0026rdquo;。\n换句话说，你可以随意修改文章标题以及副标题，但不要随意修改文章的网页路径slug，这是一项危险的操作，除非你做好了数据迁移的准备。\n在 comments-repo 中人为提交的 issue 会作为评论被同步到对应的文章中吗？\n答：不可以！但是，只有第一条不可以！\n以下为一条规则正确的 issue ，他被正确指向作者的“Hello Hugo”这篇博客，创建 issue 时发送了一局“Could you do it?”在博客评论区中没有提现。而后作者在同个评论区中发言“:rocket: Can you make it?” 却能经过转发，体现在 issue 中，可以看到作者头像右下角出现了 utterances 的标志。之后，作者在 issue 中连续发送的两条消息都能被转发到博客评论区中。\nReference utterances\nutterances (github.com)\nThe world’s fastest framework for building websites | Hugo (gohugo.io)\n配置主题 | Hugo 主题 Stack (jimmycai.com)\n","date":"2021-09-20T19:38:45+08:00","image":"https://blog.echosec.top/p/blog-comments-system/648440_hu955718f9ea4266afcc67e5e6a764f88f_201168_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/blog-comments-system/","title":"『 Hugo 』Blog Comments System"},{"content":"DEMO What Typlog Typlog 相册语法 是一种基于 Markdown 图像插入语法的，能将你插入到 Markdown 文本中的图片渲染呈现“瀑布流”排版效果的一种嵌入式插件。\nStack@Hugo主题 借鉴支持 Typlog 相册语法，该主题已获原作者 Lepture 授权。\nWhy Typlog Typlog 相册语法 能够丰富你的 Markdown 正文内容，也能在需要的地方增加信息浓度。\nHow Typlog How to insert a picture by Markdown syntax Markdown 插入图片的语法规则如下所示。\n1 ![alt text for the image](src of the image) 此处的 src 可以是本地资源路径，也可以是网络图片的链接（如果目标资源设置了防盗链，可能无法直接在webview中使用）。\nMarkdown 插入图片的用法如下代码块所示。\n1 ![local source](hello-hugo.jpg) 1 ![remote source](https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png) How to insert a picture by Typlog syntax Typlog 语法格式基于上述代码实现。“瀑布流”排版效果实现起来非常简单，仅需将Syntax Block按照你的意愿进行“堆叠”，插入的图片就会被“等比例调整”实现自动排版效果。\n实现2 × 2矩阵图的自动排版参考语法如下：\n1 2 ![img-1](image1.jpg)![img-2](image2.jpg) ![img-3](image3.jpg)![img-4](image4.jpg) 实现1 × 2 + 1 + 1 x 2矩阵图的自动排版参考语法如下：\n1 2 3 ![alt](https://image/src1) ![alt](https://image/src2) ![alt](https://image/src3) ![alt](https://image/src4) ![alt](https://image/src5) ![alt](https://image/src6) Conclusion Typlog 作为一个由 Stack 引入的拓展插件，仅能在你的 Hugo 站点上生效，而本地编辑 Markdown 的工具（如 Typora）在默认情况下是不会提现 Typlog 的排版效果的。\nReference Pixabay\n开始创作 | Hugo 主题 Stack\nImages in Typlog - Type A Log\n","date":"2021-09-20T19:38:28+08:00","image":"https://blog.echosec.top/p/typlog-atlas/topic_hu0b47b138f493b3f6e0d84b750117d30b_2670061_120x120_fill_box_smart1_3.png","permalink":"https://blog.echosec.top/p/typlog-atlas/","title":"『 Hugo 』Typlog Atlas"},{"content":"Aggregator 聚合引擎。\nNetwork Security 黑客导航 | 安全网址导航\n听风者情报源\nToolBox 优聚集\n全国图书馆参考咨询联盟 (superlib.net) | 读秀网\nCuriosity 一些猎奇网站。\n小霸王，其乐无穷\nZoom Earth | 实时气象卫星图像\nExcellent ERs 汇总各个主题下优秀的博主以及细分领域极具代表性的开源工程项目。（TODO 需细化分类）\nBloger/Youtuber Youtuber|电玩科技AK\nYoutuber|波仔\nBloger|阮一峰\nBloger|DuyaoSS-机场测速和简介\nBloger|Barry-10BeastsVPN测评\nBloger|梯子大神\n\u0026hellip;\nProject Project X Project V Trojan-GFW Trojan-Go \u0026hellip; Hello World 开眼看世界，送给CN编程菜鸟的一份礼物。\nGitHub中文社区 HelloGitHub 分享 GitHub 上入门级、有趣的开源项目 W3Schools Online Web Tutorials | w3school 在线教程 Material (免费)素材站点，包括但不限于图标，图片，视频模板以及BT种子网站。\nBT-Stream 片库 - 全网高清影视聚合下载 (mypianku.net) Icons Free Icons, Clipart Illustrations, Photos, and Music (icons8.com)\n🤣 Emoji表情大全，颜文字百科 💌 - EmojiXD\nFree icons by first-class designers | Iconstore\nPictures Pixabay\nPexels\nFoter\nvideos 爱给网_音效配乐_3D模型_视频素材_游戏素材_免费下载 (aigei.com) Film | Unsplash Mixkit - Awesome free assets for your next video project OSINT 开源情报分析框架，囊括了你在网络上以非接触方式了解一个人的各种渠道。\nSearch Engine Gibiru – Protecting your privacy since 2009 DuckDuckGo — 隐私保护，化繁为简。 crt.sh | Certificate Search ZoomEye - Cyberspace Search Engine 搜狗微信搜索_订阅号及文章内容独家收录，一搜即达 (sogou.com) 高精度IP定位4 - openGPS.cn 领英 | Linkedin 你注册过哪些网站？一搜便知 - REG007 Tech Blog OSINT - Secjuice Pentester Land · Offensive Infosec Google Search Operators OSINT Framework Tools for Breaking Privacy Global @FreeSGKbot\nWhatsMyName Web\nCN People 全国普通话培训测试信息资源网 找回密码_学信网 | 找回用户名_学信网 Tools for Reasoning suncalc Programming 与编程相关的一些站点\nDeepSource: Fast and reliable static analysis platform\n代码质量检测，自动集成，扫描代码中的bug，反模式编程，以及非范式编程。\n支持 PYTHON, JAVASCRIPT, RUBY, GO, TERRAFORM, JAVA, COVERAGE\n","date":"2021-09-20T05:00:48+08:00","image":"https://blog.echosec.top/p/awesome-resources/cover_hu0a2dca00bf4a965ad103973b0f18e44b_988718_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/awesome-resources/","title":"『 Awesome 』Root"},{"content":"使用Hugo/theme:Stack + Github Pages 快速搭建个人博客网站，足够轻量，包含最新特性，快速上手，记录一些容易踩的坑。\n注意：若您将本博客作为您的部署参考指南，默认您拥有一枚可用的Github账号，了解git，bash/shell常用指令，且您的本机运行环境中已预先安装hugo脚手架。本篇博客的行内指令若无特殊说明，均在站点根目录下执行，请注意区别。\nID Content OS Windows hugo version hugo v0.88.1-5BC54738+extended hugo theme hugo-theme-Stack v3.2.0 Quick Start Preview 我们需要知道当前版本中的 Github Pages 能创建在你的任意一个 Github Project 之上，而非一定要在yourname.github.io上创建。但无论是哪种创建方式，都要遵守相应的部署规则，才能不报错，不出现路径定位异常等问题。\n其次，Github Pages 默认以你的 Project Repository 为项目根，意味着你部署 Github Pages 的仓库首页应该存在如index.html，404.html等站点文件，参考组织结构如下图所示。\n显然，此处的“仓库首页”是你的 Pages 指向的 folder ，如下图所示。\n举个例子，你的用户名叫 xiaoming，你创建了一个仓库叫 APIs-docs，那么你的仓库链接是https://github.com/xiaoming/apis-docs（大小写不敏感）。\n此时如果你的 Select folder = /(root)，那么你直接访问上文所述仓库链接后，能直接在当前页面中看到index.html等文件。\n同理，Select folder = /docs，那么你访问链接https://github.com/xiaoming/apis-docs/docs后，也能在当前页面中看到 index.html等文件，也即项目源码中需要有这么个一个/docs文件夹存放渲染好的站点信息。\n这个 folder 非常关键，其为 hugo 的编译输出文件夹，也即配置文件中 publishDir 变量指明的相对路径，后文详细说明。\nNew Repository 用你喜欢的方式创建一个仓库(Public)。\n不建议初始化任何文件，这可能会造成不可预估的版本冲突问题，如果你想添加README.md什么的，完全可以在你的站点部署成功后手动创建。本篇博客创建的demo不勾选初始化，若您实际操作与本步骤不符，请于后续步骤中选择对应的解决方案。\nHugo Scaffold New Site 此阶段使用脚手架迅速构建 hugo 项目并创建默认的目录结构。\n找个比较可靠的位置启动你熟悉的CLI App(Terminal/bash/powershell)，按步骤执行如下指令。\n创建名为hello-hugo的站点\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile $ hugo new site hello-hugo Congratulations! Your new Hugo site is created in E:\\_GithubProjects\\myProfile\\hello-hugo. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. 进入站点根目录\n1 2 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile $ cd hello-hugo/ 打印站点根目录下的文件\n1 2 3 4 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo $ ls archetypes/ config.toml content/ data/ layouts/ static/ themes/ 此时一个完整的 hugo 项目已经创建完毕，现在需要修改配置文件，使其兼容 Github Pages 部署规则。\nUpdate Configuration 此阶段以demo的形式说明 Hugo + Github Pages技术栈的核心配置。\n以你喜欢的方式打开~/hello-hugo/config.toml（也可能是其他后缀的配置文件，遵循对应的语法规则既可）并将其中的内容作如下更新：\n1 2 baseurl = \u0026#34;https://yourname.github.io/hello-hugo\u0026#34; publishDir = \u0026#34;docs\u0026#34; 全局变量 publishDir 指明 hugo 的编译输出目录，其路径默认在站点根目录下(~/hello-hugo/)，hugo 以此为根生成的静态站点。\n我们需要将 publishDir 与 Github Pages 的 folder 对应， folder 是 Github Pages 的渲染根目录。\n注意：请替换这里的yourname为你的 Github UserName，此处我们还没有拉取任何的主题，不需要跟着其他教程设置变量theme。 注意：本博客选用 folder = “/docs” 策略，需要添加 publishDir = \u0026quot;docs\u0026quot; ，反之则不需要添加此行代码。值得一提的是，Github Pages 的执行根只有/(root) 和/docs两个选项，也即此处的 publishDir 要么不写(以./public为项目根)，要么只能写 docs。 Remote Origin 此阶段通过Git命令将 Hugo（本地文件） 与 Github Pages （远程仓库）组织结构对接。\n还记得我们刚创建的 Repository 吗? 它的仓库链接是 https://github.com/yourname/hello-hugo.git，同样，你需要更换此处的yourname。\n按序执行如下指令，实现上下文对接两个强大的技术栈！\n初始化 Git 环境\n1 2 3 4 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo $ git init Initialized empty Git repository in E:/_GithubProjects/myProfile/hello-hugo/.git/ 链接远程仓库\n若您初次使用bash-git，需要进行身份验证。此处没有返回值说明操作成功。\n1 2 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (master) $ git remote add origin https://github.com/qin2dim/hello-hugo.git 创建主分支\n因为此demo创建时不勾选初始化，默认情况下是没有分支的，需要手动创建。通过如下指令创建分支main，并将其设为默认分支。\n1 2 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (master) $ git branch -M main 标注更改内容并创建 commit 缓存\n1 2 3 4 5 6 7 8 9 10 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (master) $ git add . # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (master) $ git commit -m \u0026#34;committing hugo template\u0026#34; [master (root-commit) 4e0cab8] committing hugo template 2 files changed, 9 insertions(+) create mode 100644 archetypes/default.md create mode 100644 config.toml 将标注信息推送至远程仓库\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ git push -u origin main Enumerating objects: 5, done. Counting objects: 100% (5/5), done. Delta compression using up to 16 threads Compressing objects: 100% (4/4), done. Writing objects: 100% (5/5), 483 bytes | 241.00 KiB/s, done. Total 5 (delta 0), reused 0 (delta 0), pack-reused 0 remote: This repository moved. Please use the new location: remote: https://github.com/QIN2DIM/hello-hugo.git To https://github.com/qin2dim/hello-hugo.git * [new branch] main -\u0026gt; main Branch \u0026#39;main\u0026#39; set up to track remote branch \u0026#39;main\u0026#39; from \u0026#39;origin\u0026#39;. 查看远程仓库\n若您按照如上所述步骤操作，此时打开你的远程仓库，能看到如下目录结构。\nSelect Folder 访问https://github.com/yourname/hello-hugo/settings/pages指定你的运行根，记得保存设置。本博客指定/docs。\n不要着急，到此为止您的站点还无法访问，若您兴致勃勃地启动https://yourname.github.io/hello-hugo，你会看到如下经典一幕。\nHugo PublishDir 回到我们的本地操作环境，是不是感觉少了点什么？是的，还记得我们一开始提到 Github Pages 的渲染首页么？index.html去哪里了？既然不在首页，那也应该在./docs 里呀（若不指定config.toml中的变量publishDir,则默认为./public）\n是的，到此为止我们仅仅是创建了hugo的项目目录，但仍未进行hugo项目的初始化（首次构建）。\n执行如下命令编译你的Hugo：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ hugo Start building sites … hugo v0.88.1-5BC54738+extended windows/amd64 BuildDate=2021-09-04T09:39:19Z VendorInfo=gohugoio WARN 2021/09/20 02:29:00 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;home\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2021/09/20 02:29:00 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;taxonomy\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2021/09/20 02:29:00 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;taxonomy\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. | EN -------------------+----- Pages | 3 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Total in 57 ms 打印目录：\n1 2 3 4 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ ls archetypes/ content/ docs/ resources/ themes/ config.toml data/ layouts/ static/ 这不来了嘛，./docs目录出现了，我们打印一下这个此目录的内容看看。\n1 2 3 4 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ ls ./docs categories/ index.xml sitemap.xml tags/ 咦，怎么只有index.xml，后缀不太对，不要着急，我们还没有配置任何Hugo主题。\n我们尝试将更改推送至远程仓库，看看情况对不对。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ git add . # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ git commit -m \u0026#34;hugo init\u0026#34; [main 7301327] hugo init 4 files changed, 41 insertions(+) create mode 100644 docs/categories/index.xml create mode 100644 docs/index.xml create mode 100644 docs/sitemap.xml create mode 100644 docs/tags/index.xml # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ git push -u origin main Enumerating objects: 10, done. Counting objects: 100% (10/10), done. Delta compression using up to 16 threads Compressing objects: 100% (7/7), done. Writing objects: 100% (9/9), 1.12 KiB | 381.00 KiB/s, done. Total 9 (delta 2), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (2/2), done. remote: This repository moved. Please use the new location: remote: https://github.com/QIN2DIM/hello-hugo.git To https://github.com/qin2dim/hello-hugo.git b233f02..7301327 main -\u0026gt; main Branch \u0026#39;main\u0026#39; set up to track remote branch \u0026#39;main\u0026#39; from \u0026#39;origin\u0026#39;. 访问你的项目仓库，发现高贵的./docs文件出现了！\n访问你的站点网址https://yourname.github.io/hello-hugo，你会发现这里不再404，渲染出来的是XML文档信息。\n至此，你的 Hugo + Github Pages 技术栈已经构建完毕，接下来我们要为站点配置主题，也是注入灵魂的部分。本篇博客选用的演示主题为Hugo/theme:Stack。\nMatch theme 此阶段以 Hugo/theme:Stack 为demo说明如何将站点可视模块渲染出来，也是整个构建过程最关键的步骤之一。\n拉取主题文件\n为了方便使用Git来管理Hugo站点的源文件，我们需要将主题添加为 Submodule：\n1 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 执行日志如下：\n1 2 3 4 5 6 7 8 9 10 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack Cloning into \u0026#39;E:/_GithubProjects/myProfile/hello-hugo/themes/hugo-theme-stack\u0026#39;... remote: Enumerating objects: 3085, done. remote: Counting objects: 100% (1000/1000), done. remote: Compressing objects: 100% (405/405), done. remote: Total 3085 (delta 782), reused 667 (delta 587), pack-reused 2085 Receiving objects: 100% (3085/3085), 836.78 KiB | 3.17 MiB/s, done. Resolving deltas: 100% (1944/1944), done. 如果是第一次使用本主题，建议把 exampleSite 文件夹中的 config.yaml 和主题目录下的 assets 复制到站点目录下。前者是 Hugo 站点的配置文件，已经写入了主题的可配置字段。\n1 cp ./themes/hugo-theme-stack/exampleSite/config.yaml ./config.yaml 1 cp -a ./themes/hugo-theme-stack/assets ./assets 注意：当前版本中，Stack使用.yaml配置文件，为了预防不必要的冲突，我们选择将构建 Hugo 时初始化的config.toml移除。\n1 rm ./config.toml 配置主题\n以你喜欢的方式打开位于站点根目录下的config.yaml文件，该文件用于配置Stack主题站点的各项参数。详细参数的解释请参考 Hugo/theme:Stack ，此处仅介绍关键配置。\n如上文介绍的那样，这里至少要配置两个参数，既baseURL以及publishDir。安如下提示所示，修改变量baseURL并添加变量publishDir声明。修改完毕记得保存。\n1 2 baseurl: https://yourname.github.io/hello-hugo publishDir: docs 此处同样需要注意替换yourname。\n注入魔法\n执行hugo更新编译状态，然后将更新信息推送至远程仓库，然后访问你的项目仓库，查看推送结果。\n1 2 3 4 5 6 7 8 9 10 11 # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ hugo # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ git add . # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ git commit -m \u0026#34;introduce hugo-theme-stack\u0026#34; # yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ git push -u origin main Hello World 访问https://yourname.github.io/hello-hugo，查看您部署的站点。您也可以预览作者按照如上步骤快速搭建的Demo Site。\n可能会有的小伙伴觉得本篇博客的搭建过程比较啰嗦，目前此技术栈的构建已有成熟的解决方案几乎能在任何操作系统上实现hugo + github pages自动化部署。其实嘛- -作者认为“教程”是分享给其他人看的，需要拆分工作流，这样能让读者明确自己所在的位置，出了问题容易定位；若使用“一键脚本”，新手读者很难明晰其中的原理，很可能于后续的站点维护更新中举步维艰。\nConclusion 本篇博客详细阐述了如何在 Windows 平台上通过简单指令凭借Hugo + Github Pages技术栈快速搭建个人站点，并提供了Demo Site。作者后续会更新更多关于此技术栈的其他内容，帮助您美化，管理、升级个人站点。\n如下为示例站点的目录结构，作者将以Blog写作为例总结此技术栈的实现流程，请注意，如下所有指令操作若无特殊说明，均默认在 hello-hugo 目录下执行。\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026#34;\u0026#34;\u0026#34; hello-hugo ├── archetypes ├── assets ├── config.yaml ├── content ├── data ├── docs ├── layouts ├── resources ├── static └── themes \u0026#34;\u0026#34;\u0026#34; 关于站点根目录下各个文件夹(work field)的详细介绍请阅读官方文档Directory Structure | Hugo (gohugo.io)，此处仅在介绍工作流时涉及几个关键的文件夹。\n关于此技术栈的工作流总结如下：\n创建Blog\n在站点根目录hello-hugo下新建\u0026quot;blog\u0026quot;，如hugo new post/blog.md，默认创建在~/content/post/blog.md。\n1 hugo new post/blog.md 打开这个 Markdown文件，可以看见头部声名中draft: true默认为草稿模式（不同主题规则不同），需要置draft: false，该篇内容才会被渲染出来，否则会被过滤。\n启动本地hugo服务器\n在站点根目录hello-hugo下创建本地服务器\n1 hugo server 启动后根据打印日志查看入口，如http://localhost:8745/hello-hugo/ ，端口号不一定与此相同，默认是1313，若有冲突则会随机更换。\n这里的文档都是热加载编译，我们对项目文件的更改将直接同步到本地服务上，如Blog的书写，配置文件的改动以及目录文件的调整等等。于是，我们编写的内容可以实时提现在站点上，方便修改调试。\n缓存更新\n当你的工作结束后，停止local hugo-server进程。你的工作进度会被自动编译到publishDir变量指向的文件夹中（如本例的./docs）。当然你也可以在工作结束后手动更新缓存。也即你的每一个对 hugo 的更改，如果你想体现在Github Pages 中,一定不要忘了在 Push 之前更新一下缓存。\n后续文章中，作者将介绍如何使用Github Actions在你 Push 后自动化更新publishDir下的文件，无需繁再 Push 前手动更新缓存，进一步偷懒。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 yaoqinse@LAPTOP-29FRT6FJ MINGW64 /e/_GithubProjects/myProfile/hello-hugo (main) $ hugo Start building sites … hugo v0.88.1-5BC54738+extended windows/amd64 BuildDate=2021-09-04T09:39:19Z VendorInfo=gohugoio WARN 2021/09/20 04:04:53 Search page not found. Create a page with layout: search. WARN 2021/09/20 04:04:53 Archives page not found. Create a page with layout: archives. | EN -------------------+----- Pages | 7 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 3 Aliases | 3 Sitemaps | 1 Cleaned | 0 Total in 183 ms 资源推送\n这里推荐使用 Github Desktop 推送仓库更新。自动扫描变更，一件推送，相比于每次更新都要手敲git代码方便很多。\n若您缺少可靠的解决方案,那只能老实敲代码了:\n1 2 3 git add . git commit -m \u0026#34;description of this change\u0026#34; git push -u origin main 查看更新\n访问站点，查看推送结果。Github Pages 集成需要一点时间，如果你没能在推送后立即看到“改变”也不要慌，稍微等一会刷新一下既可。\n同样，若你在本地调改动资源并 auto-rebuild 后，体现在站点上的内容并没有立即改变，可以先Ctrl + C停止进程，r然后执行下面的命令回收垃圾，并重新部署既可。\n1 2 hugo --gc\t# 垃圾回收 hugo server\t# 重新启动本地服务 Reference The world’s fastest framework for building websites | Hugo (gohugo.io)\n介绍 | Hugo 主题 Stack (jimmycai.com)\n","date":"2021-09-19T23:40:03+08:00","image":"https://blog.echosec.top/p/hello-hugo/2511065_hu542c575640116087aad91130e63312e2_586804_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/hello-hugo/","title":"『 Hugo 』Hello Hugo"},{"content":" 2D-object-detection-Bleach-vs-Naruto\n《死神VS火影》| 试用 YOLOv5 完整体验自建数据集，训练模型，参数调优，最后实现 2D 目标检测的全过程。\nDemo 🚀See more demo Background NIIT 暑期实习课后作业。\nInstall Download Project Clone 项目，使用 Pycharm 启动工程 🚀 See Github Homepage。\nDownload Game [optional] 获取《死神vs火影 3.3》FLASH 游戏本体\n链接：https://pan.baidu.com/s/1gjYlIzwjsYKDt8-cq1AqhA\n提取码：5dyt\nDownload BVN-Network [optional] 获取欠优化的序列模型，可直接用于预测任务\n链接：https://pan.baidu.com/s/12Re3w9V56z-J-0LGCPK_IQ\n提取码：digz\nDownload Database [optional] 获取作者手动标注的数据集（未经数据增强）；包含录制的游戏视频及分割成帧的游戏图片，视频分割成帧的.py 脚本，官方贴图（人物模型），images 图片数据集及其对应的 labels 标注集（使用 make-sense 导出）\n链接：https://pan.baidu.com/s/1o64LCXUk9LR85ipCR9-cSw\n提取码：7qqa\nUsage Clone 项目后，请标记 database、game 目录为“排除”，network 为“运行根”。\n以 ./network 为运行根启动 Terminal，执行 detect.py 进行预测：\n1 2 #!/2D-object-detection-Bleach-vs-Naruto/network python detect.py 执行结果缓存到目录 ./network/runs/detect/exp[number] 。\nProject Tree 如下为本项目的工程结构。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 2D-object-detection-Bleach-vs-Naruto ├── database │ ├── captures │ ├── images │ ├── labels │ └── role_map ├── game │ └── 死神vs火影3.3 ├── LICENSE ├── network │ ├── data │ ├── detect.py │ ├── export.py │ ├── hubconf.py │ ├── LICENSE │ ├── models │ ├── requirements.txt │ ├── runs │ ├── train.py │ ├── utils │ └── val.py └── README.md ./database 存放训练数据\n./database/captures：游戏录屏文件的存放目录\n./database/images：游戏录屏文件切割成帧后的图片存放目录\n./database/labels：图片帧的标注集（与images一一对应）\n./database/role_map：预存放的游戏人物贴图，包含角色一户（卍解）以及漩涡鸣人\n./game 存放《死神vs火影3.3》FLASH 游戏本体\nWindows 客户端直接运行./game/死神vs火影3.3/launch.exe 进入游戏。\n./network 目录仿制 YOLOv5 编排\n./network/data 存放需要执行预测任务的素材（如：图片、视频）\n./network/data/images：需要执行预测任务的图片存放目录 ./network/data/video：需要执行预测任务的视频存放目录 ./network/data/BleachVsNaruto.yaml：引导模型训练所用数据集路径的配置文件 ./network/models 存放yolo基准模型参数\n./network/utils 存放构建网络的必要工具\n./network/runs 存放网络运行缓存\n./network/runs/detect：由 detect.py 预测任务产生的输出，与所选择的 ./network/data/ 资源一一对应\n./network/runs/train：由 train.py 训练任务产生的输出，存放导出的模型、网络收敛图以及各种评价指标图\n./network/runs/train/bvn-base/weights/ 中存放了欠优化的序列模型，可直接用于预测任务。\n./network/detect.py 预测任务的启动接口\n./network/train.py 训练任务的启动接口\n","date":"2021-09-02T23:11:00+08:00","image":"https://blog.echosec.top/p/2d-object-detection-bleach-vs-naruto/Jlog7weRvmDTfhr_huccaad804e4b49c112e1e23c8189f5184_230476_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/2d-object-detection-bleach-vs-naruto/","title":"『 YOLOv5 』死神VS火影 | 2D目标检测"},{"content":" TOS\n本项目仅供交流学习，有疑问请在 Issues 中提出； 本项目不提供面向任何商业需求的版本迭代； 关于本项目源码的使用请遵循 Apache-2.0 License； 禁止任何人使用本项目及其分支提供任何形式的收费代理服务。 项目简介 🐱‍🏍 ArmourGeeTest 是一种针对 GeeTest 极验 滑动验证的超高通过率解决方案。\n引入姿态收敛以及惯性等初中物理概念解决二维空间中的像素对齐问题。\n当这个难倒了大批爬虫玩家的问题被抽象成缺口识别以及像素对齐两个指标时使用本方案进行百次实验：\n当缺口识别率为 100% 时，gt3通过率为 92%。\n失败案例中超半数由收敛超时引发，剩下的被怪兽吃掉了；\n当缺口识别率为 100% 时，gt2通过率 100%。\n仅在缺口被遮挡时失败，但此时更倾向认为缺口识别率 \u0026lt;100%；\ngt3 算子收敛过程小概率出现“震荡”现象，此时（为保证通过率）任务耗时将大幅增长，开发者可通过优（手）化（调）本项目的模型超参数，达成低耗时 + 高通过率的性能指标。\n快速上手 🛴 【方案一】用户\n通过观看 ArmourGeeTest Demo 了解本项目的工作范围。\n【方案二】开发者\nClone项目，根据 技术文档 合理配置 config.py 后编译项目。\n用法说明 🤷‍♂️ 更多详细信息请访问本项目 Github仓库。\n","date":"2021-08-18T21:53:50+08:00","image":"https://blog.echosec.top/p/python-geetest-breaker/typewriter_huf8ec521220ed056c3197d56425ecf5ff_679706_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/python-geetest-breaker/","title":"『 Python 』Python Selenium 破解极验(GeeTest)滑动验证"},{"content":"问题描述 在 Python 代码中编译可执行文件，需要监控执行过程及运行结果，当前场景等效为捕获控制台的特征信息的“打印情况”； 编译程序独占进程，且存在 Terminal进度条 等频繁刷新的需要监控的特征信息； 需要捕获的特征信息存在简体中文，需要做编码转换； 解决方案 如下所示为本例参考代码。使用 Python3 内置模块 subprocess.Popen 建立 channel 。设定参数 encoding='utf8'，转码简体中文。设定 universal_newlines=True 以及 bufsize=1 建立缓冲区，以便捕获频繁刷新的进度条等特征信息。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \u0026#34;\u0026#34;\u0026#34; 仅用作demo演示，请勿在真实IPC场景下直接cv代码 sys: Windows env: Python 3.7.9 \u0026#34;\u0026#34;\u0026#34; import os import subprocess title = \u0026#34;\u0026#34; def _listener(): global title # 如果您还未安装you-get脚手架 请先执行 pip install you-get 或 pip3 install you-get # 尝试直接在 Terminal 中运行 `you-get [url]` 查看区别 # you-get 将嗅探目标链接下的影视资源对象，并保存至当前目录下 cmd = \u0026#34;you-get https://www.bilibili.com/video/BV1Yv41147QK\u0026#34;.split(\u0026#39; \u0026#39;) p = subprocess.Popen( cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True, encoding=\u0026#39;utf8\u0026#39;, bufsize=1 ) while subprocess.Popen.poll(p) is None: stream = p.stdout.readline() print(stream) # 仅做演示，首次下载时捕获视频文件名 if title == \u0026#34;\u0026#34; and stream.startswith(\u0026#34;Downloading\u0026#34;): title = stream.split(\u0026#39; \u0026#39;)[1] def demo(): _listener() # 仅作演示，自动打开下载好的视频 try: os.startfile(f\u0026#39;{title}\u0026#39;) except (FileNotFoundError, FileExistsError): pass if __name__ == \u0026#39;__main__\u0026#39;: demo() 参考资料 [1] subprocess — Subprocess management — Python 3.7.11 documentation\n","date":"2021-08-15T23:10:59+08:00","image":"https://blog.echosec.top/p/python-subprocess-popen/book1_hubc58c2763a2cd9c711ee0571e35ad5d9_372240_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/python-subprocess-popen/","title":"『 Python 』Subprocess.Popen 监控控制台输出"},{"content":" Make Sense | Free to use online tool for labelling photos.\n摘要 本文简要介绍使用 make-sense 建立 YOLOv5 Object Detection 图像标签的完整步骤并提及使用过程中的注意事项。\n平台简介 make-sense 是一个被 YOLOv5官方 推荐使用的图像标注工具。\n相比于其他工具，make-sense 的上手难度非常低，仅需数分钟，玩家便能熟练掌握工作台中的功能选项，快速地进入工作状态；此外，由于 make-sense 是一款 web 应用，各个操作系统的玩家可打破次元壁实现工作协同。\n快速上手 Sneak Peek 流程预览 Drop Images 缓存需要标注的图像数据集 进入 make sense 站点主页，点击右下角 Get Started 进入任务。\n拖入或上传需要标注的图像数据集。此处不支持文件夹套娃，请将所有需要标注的图像放在同一文件夹下，需要做避免重名的处理；或者您也可以多次上传位于不同文件夹下的图像。\n值得一提的是，标注任务开时候您也可以再补充缓存需要标注的图像，但没有可靠的方式“删除”已缓存的图像。若您在标注过程中发现上传了脏数据，只需不对此图片进行任何标注，导出时就不会生成对该图像的标注数据（文件）。\nObject Detection 进入目标检测标注模式 上传图像后，选择进入目标检测的标注模式。\nCreate Labels 创建标签 导入文件自动生成标签（Load labels from file ）一行一个；\n手动创建标签，点击左边栏的“＋”符号；\n创建成功后点击 [Start project] 开始标注。\n此处为了方便演示，我们选择手动创建标签。\n同样，我们仍可在工作过程中随时调整（Actions | Edit Labels）标签的规模及顺序。\nWork 开始标注 Make Sense 支持矩形 (Rect)、点 (Point)、线 (Line)、多边形 (Polyygon) 多种标注模式，点选相应的模式开始“抠图”既可。\n工作台上有放大、缩小、还原比例、拖动、删除标签等操作工具，不过多介绍，玩几下就懂了。\nExport 导出标注 点选 Actions | Export Annotations 导出标注。\nExport后会自动下载生成的压缩包文件。压缩包内是一一对应的标注集文件，与标注数据文件名与其对应的图像文件名一致。\nReview 审查标注数据 由 YOLOv5作者对创建标签的有关介绍 可知，图像标注文件有明确的格式要求（YOLO format）,图像 （ImageObject）对应的标注文件（LabelObject）必须是 .txt 格式文件，其内容必须以空格按序切割成如下成分：\n目标类型：第1列成分，以数字序号区分的标签； 目标标识区域（以2D Object 为例）：4列连续的成分，依次为目标实体的中点 x 坐标（class x_center），中点 y 坐标（class x_center），宽度（width）以及高度 （height）； 再来看看刚才标注的宵宫目标数据。\n1 0 0.493783 0.509473 0.454707 0.969410 如上所示，第一列是标签宵宫所在标签集合的序号，由于我们仅有一个标签，此处自然为0。值得一提的是，此处的序号是按照Make Sense中的标签\u0026quot;顺序\u0026quot;排列的，与 YOLOv5 train 数据集索引配置文件 (.yaml) 中的 names 变量的分类名 class names 顺序无关，建议两者顺序保持一致。后四列为作者框选的目标边界数据，我们可以大概这么理解，根据下图我们可知人物主体居中构图，2，3 列体现的趋于 0.5 的数据符合主观预估值；人物宽度约占画幅 X 区间的一半 (0.454707)，而高度却几乎占满整个画幅Y区间 (0.969410)。\n高级操作 原本至此完整的标注集导出流程已完全结束，但是作者发现本项目竟然是开源的\u0026hellip;意味着感兴趣的同学可以通过 项目README 中推荐的方案（Docker/npm）在自己熟悉的环境中部署此项目。\n注意事项 普通操作模式下，数据集缓存在内存里不会\u0026quot;上传\u0026quot;，这也解释了为何图像加载后我们能迅速投入工作。若使用 AI 标注功能，数据集可能被成批次地上传，而且此过程可能涉及与国外多服务器的通信，用时较长，且 AI 标注场景局限在日常生活的应用场景中，若场景不符则不推荐使用； 因此，页面误操作关闭后，标注结果必然游离，所以标注工程量较大的任务时建议小批次缓存标注，或按时导出以保存本阶段的工作进度； 参考资料 [1] Genshin Impact Yoimiya banner leaks: 5-star Pyro character release date - Dexerto\n[2] Train Custom Data · ultralytics/yolov5 Wik\n[3] SkalskiP/make-sense: Free to use online tool for labelling photos\n","date":"2021-08-11T23:54:55+08:00","image":"https://blog.echosec.top/p/yolov5-make-sense/4ef6638_hu9b50f8f8c9a09018e35f83b943878765_693622_120x120_fill_box_smart1_3.png","permalink":"https://blog.echosec.top/p/yolov5-make-sense/","title":"『 YOLOv5 』Make Sense"},{"content":"问题描述 在 shell 脚本中编写了含有 tmux 的指令，希望规定的指令能在独立的某个会话中运行，防止特殊任务阻塞脚本的运行。然而在脚本执行!到“开启 tmux 窗口”时，后续指令并不会按照原意灌入指定的窗格，而是弥散到原面板或 tmux 窗口中。\n解决思路 已验证的不可靠思路 认为错误原因是窗口的创建“来不及加载”导致后续打算在该窗口中运行的指令乱飞，故使用 sleep 穿插在代码中尝试解决问题。实际上，这种思路是不可靠的，因为运行在脚本中的tmux命令会在指令尾默认加上一条“分离指令 (detach)”，这会导致 tmux 无法理解紧接着执行的原生 sh 脚本指令 (no client found)[3,4]。换言之，tmux 不知道后续的指令是否需要在当前的窗口中运行，包括上文说到的 sleep 指令。\n可靠的解决方案 引用tmux中的send参数按照规定的写法指定会话，指定窗口（窗格）执行指定的命令实现“指哪打哪”。参考代码如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # -*- coding: utf-8 -*- # Time : 2021/8/5 23:40 # Author : QIN2DIM # Github : https://github.com/QIN2DIM # Description: Tmux 脚本编程 import os def systemctl_create_v2raycs(): # 创建一个后台运行的名为v2raycs的session会话，其默认窗口名为system # [-s sessionName] [-n windowName] [-d daemon] os.system(f\u0026#34;tmux new -s v2raycs -n system -d\u0026#34;) # 水平切割 v2raycs:system 使窗口分为上下屏（窗格），光标随splicer切换至下分屏 # 使用标识符指定后台运行的操作目标 [-t targetPane] # os.system(f\u0026#34;tmux split-window -t \u0026#39;v2raycs:system\u0026#39;\u0026#34;) # 向指定会话的指定窗格发出指令 # 使用标识符指定后台运行的操作目标 [-t targetPane] os.system(f\u0026#34;tmux send -t \u0026#39;v2raycs:system\u0026#39; \u0026#34; f\u0026#34;\u0026#39;cd /qinse/V2RaycSpider1325/;python main.py deploy\u0026#39; Enter\u0026#34;) def systemctl_create_bot(): os.system(f\u0026#34;tmux new -s bot -n core -d\u0026#34;) os.system(f\u0026#34;tmux new -s go-cqhttp -n core -d\u0026#34;) os.system(f\u0026#34;tmux send -t \u0026#39;bot:core\u0026#39; \u0026#34; f\u0026#34;\u0026#39;cd /qinse/cqbot/bbot;python bot.py\u0026#39; Enter\u0026#34;) os.system(f\u0026#34;tmux send -t \u0026#39;go-cqhttp:core\u0026#39; \u0026#34; f\u0026#34;\u0026#39;cd /qinse/cqbot/go-cqhttp;./go-cqhttp ./device.json\u0026#39; Enter\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: systemctl_create_v2raycs() systemctl_create_bot() 参考资料 [1] Louis Tumux使用手册\n[2] Tmux: Productive Mouse-Free Development 中文版\n[3] FAQ · tmux/tmux Wiki\n[4] bash - How to write a shell script that starts tmux session, and then runs a ruby script - Stack Overflow\n","date":"2021-08-06T01:44:51+08:00","image":"https://blog.echosec.top/p/tmux-shell/coffee-g2e_hu11dd6594c3f3fd9f7d0b0b7f210f49e6_424020_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/tmux-shell/","title":"『 Tmux 』在脚本中运行 Tmux"},{"content":"错误信息 1 Passthrough is not supported, GL is swiftshader. 解决方案 通过 ChromeOptions() 配置 Selenium 启动参数进而实现 chromedriver 在 Windows 环境中以“无头模式”运行时于控制台的输出信息的控制：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 from selenium.webdriver import Chrome, ChromeOptions # True：chromedriver静默启动 SILENCE = True def set_spider_option(chromedriver_path=None) -\u0026gt; Chrome: # 调整chromedriver的读取路径，若不指定则尝试从环境变量中查找 chromedriver_path = \u0026#34;chromedriver\u0026#34; if chromedriver_path is None else chromedriver_path # 实例化Chrome可选参数 options = ChromeOptions() # 静默启动 参数组策略 if SILENCE is True: options.add_argument(\u0026#39;--headless\u0026#39;) options.add_argument(\u0026#39;--disable-gpu\u0026#39;) options.add_argument(\u0026#34;--disable-software-rasterizer\u0026#34;) # 其他推荐设置 options.add_argument(\u0026#39;--log-level=3\u0026#39;) options.add_experimental_option(\u0026#39;excludeSwitches\u0026#39;, [\u0026#39;enable-logging\u0026#39;]) options.add_experimental_option(\u0026#39;excludeSwitches\u0026#39;, [\u0026#39;enable-automation\u0026#39;]) return Chrome(options=options, executable_path=chromedriver_path) def this_is_a_business(chromedriver_path): api = set_spider_option(chromedriver_path) try: api.get(\u0026#34;https://www.baidu.com\u0026#34;) input() finally: api.quit() if __name__ == \u0026#39;__main__\u0026#39;: this_is_a_business(chromedriver_path=None) 参考资料 [1] [Solved] Python Selenium Chromedriver Error: (Passthrough is not supported, GL is disabled) | DebugAH\n[2] python - Passthrough is not supported, GL is disabled - Stack Overflow\n","date":"2021-07-25T22:14:38+08:00","image":"https://blog.echosec.top/p/python-selenium-debug-20210725/vojta_hu3d03a01dcc18bc5be0e67db3d8d209a6_291810_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/python-selenium-debug-20210725/","title":"『 Python 』Passthrough is not supported, GL is swiftshader"},{"content":"项目简介 🐱‍🏍 本项目仅为 海南大学 学子提供服务； 本项目 开源免费 ，禁止任何人使用此项目及其分支提供任何形式的收费代理服务； 程序流图 1 || 程序流图 2 || demo 演示 本项目使用 hnu-temp-report-bot 跳板机实现人机交互，QQ 群内对 bot(851722457) 使用关键字指令 + 功能指令 即可实现相关需求； 快速上手 🛴 【方案一】用户\n在群内拉入 QQ 机器人 bot(851722457)\n根据 技术文档 中的引导完成定时任务的增删改查或立即执行签到操作。\n【方案二】开发者\nClone 项目:champagne:\n根据 技术文档 合理配置启动参数并通过脚手架调试或部署项目。\n食用指南 🤷‍♂️ 详见本项目 GitHub Repository，感谢支持。\n","date":"2021-02-24T19:27:24+08:00","image":"https://blog.echosec.top/p/python-campusdailyautosign/old-books_hu752008d61679b87da495bf897ad86259_461483_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/python-campusdailyautosign/","title":"『 Python 』CampusDailyAutoSign 今日校园体温检测自动上报系统"},{"content":"摘要 针对使用 PyCharm 打开 Github 上克隆的项目或自编的“千层饼”工程文件并导入自编或已存在的模块时遇上的 ModuleNotFoundError 报错，本文简要列举了 Python 编程环境中引发这项错误的可能原因，并在对比总结网上其他解决方案后给出本人的解决方案。\nBug 引用路径和模块名对不上 模块已更名重构或不存在。PyCharm 中支持对整个工程文件中的索引重构，意味着一个文件改名，在当前项目中所有调用了这个模块的地方都会做相应的改动，所以这个不难解决。\n模块存在且引用路径正确但就是报错 Python相对路径与绝对路径设置错误，表现出以下现象。\n1 2 3 4 Traceback (most recent call last): File \u0026#34;当前运行文件的绝对路径\u0026#34;, line 3, in \u0026lt;module\u0026gt; from BusinessViewLayer.myapp.api import * ModuleNotFoundError: No module named \u0026#39;BusinessViewLayer\u0026#39; 注：其中所有的 .py 文件都是作者自己编写的模块，且都存放在相应的引用路径下。\nDebug 网上常见的解决方案 使用 sys.path.append() 添加临时环境变量，这套方案可在 Linux 环境下部分有效，但在 Win 环境下可能失效且会让代码变得冗余； 使用 from .A import B 的相对路径索引方案，这套方案在 Visual Studio Code 中可以正常编译但在 PyCharm 中会进一步引发 ImportError 错误； 1 ImportError: attempted relative import with no known parent package. 本文解决方案 Solution1：依托控制台运行 直接编译，发现错误 在 PyCharm 中打开 \u0026ndash; 运行 / 调试设置 点击 确定 后重新运行 观察控制台\n我们发现，在 Python Console 中运行的模块，会自动链接环境变量，这就顺便达成了我们的需求。\nSolution2：使用 PyCharm 添加环境变量 为什么要提出这套解决方案呢？显然方案一并不是最优解。\n某些第三方日志库如 loguru 在打印运行信息时，会因为各种编码原因导致显示在 Python Console 窗口中的（中文）信息乱码（但在 log 文件中显示正常）。虽然通过设置一些参数可以解决这些问题，但我们不希望在解决问题的过程中引入多余的操作，于是便有了解决方案二。\n方案二依然能够达成我们的需求，且不会引发上文所述的问题。\n打开冰箱门 把李芬特装入冰箱 关闭冰箱门 至此，报错问题已经完全解决啦~\n","date":"2020-12-17T10:12:15+08:00","image":"https://blog.echosec.top/p/python-debug-20201217/book_huad837b70ca0b7c46e59910d6bcdae001_531052_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/python-debug-20201217/","title":"『 Python 』Resolve ModuleNotFoundError "},{"content":" 更多信息请参见 GitHub Repository\n前言 🤦‍♂️ 🎉 本人有幸作为项目负责人参加 2020 中国大学生计算机设计大赛，并拿下了大数据实践赛全国一等奖。\n🧐 做这个程序的初衷垂直~无意中看到了某个设计方向的作品，感触很深 ；本科生能独立完成这样的作品，真是太震撼了！嗯我说的就是“红楼梦信息交互设计”的华科小姐姐团队，真正的面向薪资编程！\n🛒 于是便有了一个收藏并展示该类比赛优秀作品的想法，于是本人点开官网后发现最新的作品展示还要追溯到 2015 年-……行吧那就撸起袖子自己写了一个自动化采集程序，该程序会自动化采集作品数据，并生成永久访问链接，展示的信息会经过数据脱敏，仅放出项目 idea 以及作品申报信息，供大家考古学习。\n🚀 总而言之该脚本主要功能就是采集作品信息和拷贝作品信息。我会在均衡程序的鲁棒性后，引入垂搜引擎，帮助使用者检索 同质idea 以及 同质优秀参赛作品。\n🍵 最终的作品展示方式，本人会慎重考虑。如果官方工作人员觉得不太妥，可以私聊本人喝茶[嗯！道歉是认真的！]如果觉得本项目有望吸引更多的年轻人参赛施展才智，提高竞赛的知名度与含金量，可以私聊本人喝咖啡~\n快速上手 🐱‍🏍 Clone 项目，进入 main.py，按照说明书合理调用 API ，运行程序即可调度爬虫采集数据。\n配置运行环境 部分 API 使用 python3 + selenium 的采集方案，且该脚本仅支持 Chrome 驱动，请将您的谷歌浏览器更新到最新版本。\n1 2 python -m pip install --upgrade pip \u0026amp;\u0026amp; pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple 采集作品信息 app.run_crawl_to_capture_workData(work_id: str or list,power: int) work_id：作品编号，支持单个字符串输入以及 List 多个字符串输入 【1】传入单个作品编号； 【2】传入包含多个作品编号的列表； 【3】传入空字符串或不传入 work_id，则默认采集 BASE 中所有的 ID 对应的作品数据(目前有 4076 个数据在库)，此时请适当调高协程功率 power：协程功率，power∈[1,∞)，脚本内置弹性协程队列，此处可随意设置。 运行后会在 /dataBase/ 目录下生成 合成.csv 文件 从 config 配置文件中打印变量 title 即可查询信息键 1 2 3 4 5 6 7 from MiddleWare import app from config import * if __name__ == \u0026#39;__main__\u0026#39;: id_list = [\u0026#39;75945\u0026#39;,\u0026#39;68589\u0026#39;] # app.run_crawl_to_capture_workData(work_id=\u0026#39;72862\u0026#39;,power=30) app.run_crawl_to_capture_workData(id_list, id_list.__len()__) 拷贝作品信息 演示视频《BackupSpider of CNJSJ》\napp.run_crawl_to_capture_workData(work_id: str or list,power: int=4)\nwork_id： 作品编号，支持单个字符串输入以及 List 多个字符串输入，参数传递方案同上。 power： 协程功率，power∈[1,∞)，脚本内置弹性协程队列，此处可随意设置。 运行后会在 /dataBase/BACKUP/ 目录下生成以作品编号命名的 .mhtml 文件，该格式网页文件封装了源所有的文本及插图附件，部分作品内容精彩，文件体积占用较大。\n注：safari 可能会打不开这种格式文件。 该功能使用 Selenium(base on Chromedriver) 采集，请确保电脑上安装了最新版本的谷歌浏览器。 该功能需要联网使用，请确保网络通畅。 1 2 3 4 5 from middleware import app from config import * if __name__ == \u0026#39;__main__\u0026#39;: app.run_crawl_to_backup_data(\u0026#39;72862\u0026#39;,power=1) API 在从 MiddleWare 中导入 app，即可调用脚本功能，别忘了调用 config 配置文件设置全局变量~\n1 2 from middleware import app from config import * 作品查询~学校成果 app.get_school_psar(school_name: str,save: bool) school_name：学校名称。这里不支持模糊匹配，请输入全称！ save：保存输出。默认为 False；建议为 True，运行后会在 /dataBase/PSAR 目录下生成对应学校的分析结果，文件格式为 .json，信息键仅包括 获奖信息 以及 作品链接。文件会自动打开。 1 2 3 4 5 from MiddleWare import app from config import * if __name__ == \u0026#39;__main__\u0026#39;: app.get_school_psar(school_name=\u0026#39;华中科技大学\u0026#39;,save=True) /华中科技大学_分析报告.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 { \u0026#34;华中科技大学\u0026#34;: { \u0026#34;成果概要\u0026#34;: { \u0026#34;一等奖\u0026#34;: 2, \u0026#34;二等奖\u0026#34;: 8, \u0026#34;三等奖\u0026#34;: 2 }, \u0026#34;作品细节\u0026#34;: { \u0026#34;一等奖\u0026#34;: [ { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72849\u0026#34;: \u0026#34;皖江之阴，青山之阳；青阳有腔，放遇一欢。\u0026#34; }, { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72862\u0026#34;: \u0026#34; 红楼梦·可视化赏析信息交互系统\u0026#34; } ], \u0026#34;二等奖\u0026#34;: [ { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72750\u0026#34;: \u0026#34;Limfx科研博客\u0026#34; }, { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72764\u0026#34;: \u0026#34;梦·山海\u0026#34; }, { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72795\u0026#34;: \u0026#34;济世方舱\u0026#34; }, { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72796\u0026#34;: \u0026#34;山哈彩带\u0026#34; }, { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72800\u0026#34;: \u0026#34;敦煌·梵音\u0026#34; }, { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72821\u0026#34;: \u0026#34;放大镜下的昆虫世界\u0026#34; }, { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72822\u0026#34;: \u0026#34;九华折扇——数字化非遗文化信息可视化设计\u0026#34; }, { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=74879\u0026#34;: \u0026#34;别让它灭绝\u0026#34; } ], \u0026#34;三等奖\u0026#34;: [ { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72783\u0026#34;: \u0026#34;皮影传承，戏中人生\u0026#34; }, { \u0026#34;http://2020.jsjds.com.cn/chaxun/?keys=72799\u0026#34;: \u0026#34;希冀\u0026#34; } ] } } } 作品查询~奖级AND赛道 app.find_works_by_level(level: str,class_: str) level：作品等级。这里需要规范输入，只能输入以下选项 一等奖、二等奖、三等奖 class_ ：作品赛道。这里支持模糊匹配。在 /dataBase/TPTDP/class_name.txt 中有C4-2020所有赛道的全称 食用说明：level 和 class_ 都不是必选参数，比如只想知道一等奖的所有作品，只需传入 level 即可，class_ 可不传或传入空字符串。 1 2 3 4 5 6 7 from MiddleWare import app from config import * if __name__ == \u0026#39;__main__\u0026#39;: # app.find_works_by_level(level=\u0026#39;一等奖\u0026#39;, class_=\u0026#39;大数据\u0026#39;) # app.find_works_by_level(level=\u0026#39;\u0026#39;, class_=\u0026#39;人工智能\u0026#39;) app.find_works_by_level(level=\u0026#39;一等奖\u0026#39;, class_=\u0026#39;\u0026#39;) 作品查询~比赛摘要 app.get_summary() 打印决赛成绩概况 作品查询~链接直达 app.find_works_by_id(key: str, goto: bool) key： 作品编号，仅支持单个字符串输入 goto：是否打开网页。若为 True，则使用默认浏览器打开作品首页 运行后会在 /dataBase/PSAR/ASH.json 中留下临时文件 1 2 3 4 5 from MiddleWare import app from config import * if __name__ == \u0026#39;__main__\u0026#39;: app.find_works_by_id(\u0026#39;72862\u0026#39;) works_id数据加载 由于表数据结构比较乱，我已经写好了一个全局 load id 的函数，使用方法也很粗暴，调用该函数并传入 spider_key，即可获取含表头的在库id列表。获取列表后使用切片去除表头候即可获得干净的数据~ 因为合成BASE文件有点大，故使用 csv.field_size_limit() 捕获数据流。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # config.py def load_data_from_id_set(mode) -\u0026gt; list: \u0026#34;\u0026#34;\u0026#34; data_set = title :param mode: 截取模式, spider_key : 联采 str:works_id : 该作品编号对应的数据 list:works_id : :return:返回表头+数据，使用切片[1:]截出数据集 \u0026#34;\u0026#34;\u0026#34; # 当爬虫程序使用此函数时，并传入‘spider_key’口令，函数执行特殊命令，返回含表头的作品编号 List[str,str...] # 返回的列表里包含了所有在库的works_id,既当爬虫爬虫程序传入该口令时，将采取所有作品信息 with open(id_fp, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: csv.field_size_limit(500 * 1024 * 1024) reader = csv.reader(f) data = [i for i in reader] if mode == \u0026#39;spider_key\u0026#39;: # 清洗数据 return [i[1] for i in data if i[1] != \u0026#39;N/A\u0026#39;] 食用方法 1 2 3 4 5 6 7 from MiddleWare import app if __name__ == \u0026#39;__main__\u0026#39;: # 返回无表头 id 列表 id_flow: list = app.get_all_works_id() # 数据预览 print(\u0026#39;id池大小：{}\u0026#39;.format(id_flow.__len__())) 注意事项 ❗ 工程文件中的/dataBase目录下存放了脚本核心BASE文件，请勿随意挪动或删除文件，否则会出大问题！ config.py中可以自己调整的参数并不多，请勿随意改动其中数值，否则也会出大问题~ 更新日志 📋 2020.09.06\n已将所有2020-MTH作品申报信息离线封装 将采集功能都封装进app.py里，所有功能都可通过该模块调用 添加语雀同步文档，解决部分地区图文显示异常的问题 项目除虫，增加了垃圾回收机制 TODO 📈 搭建类BLOG前端，开放接口映射优秀作品文件 服务器部署 引入鲁棒均衡模组 添加垂搜引擎，提供API接口 ","date":"2020-09-01T16:24:49+08:00","image":"https://blog.echosec.top/p/python-4c-excellentproject/1052010_hu057a8873d4fb47302d81f4e3cb25dfcf_342748_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.echosec.top/p/python-4c-excellentproject/","title":"『 Python 』中国大学生计算机设计大赛📜历史作品博物馆"},{"content":"案例实操 准备资源 导入所需库\n1 2 import wordcloud import jieba 准备好源文件，屏蔽词文件，备用字体\n1 2 3 font_path = \u0026#39;C:\\Windows\\Fonts\\时尚中黑简体.ttf\u0026#39; file_path = \u0026#39;新建文本文档.txt\u0026#39; fake_path = \u0026#39;stop_key.txt\u0026#39; 自定义变量\n1 2 3 4 5 6 7 alist = [] # btext = \u0026#39;\u0026#39; # fake_set = {1} #第三方屏蔽列集合 #根据文档特殊性而设计的自定义屏蔽词 stop_words = {\u0026#39;我们\u0026#39;,\u0026#39;这个\u0026#39;,\u0026#39;一个\u0026#39;,\u0026#39;可以\u0026#39;,\u0026#39;下来\u0026#39;,\u0026#39;这样\u0026#39;,\u0026#39;就是\u0026#39;,\u0026#39;用来\u0026#39;, \u0026#39;非常\u0026#39;,\u0026#39;然后\u0026#39;,\u0026#39;这里\u0026#39;,\u0026#39;非常\u0026#39;,\u0026#39;大家\u0026#39;,\u0026#39;时候\u0026#39;,\u0026#39;上面\u0026#39;,\u0026#39;里面\u0026#39;, \u0026#39;放在\u0026#39;,\u0026#39;首先\u0026#39;,\u0026#39;准备\u0026#39;,\u0026#39;出来\u0026#39;,\u0026#39;很多\u0026#39;,\u0026#39;其实\u0026#39;,\u0026#39;一些\u0026#39;,\u0026#39;拿出\u0026#39;,\u0026#39;还有\u0026#39;,\u0026#39;如果\u0026#39;} 读取数据集 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #读入源文档 with open(file_path,\u0026#39;r\u0026#39;,encoding=\u0026#39;GBK\u0026#39;,errors=\u0026#39;ignore\u0026#39;)as f: text = f.read() #type（text）:str #ignore errors #读入屏蔽词 with open (fake_path,\u0026#39;r\u0026#39;,encoding=\u0026#39;utf-8\u0026#39;)as f: fake_data = f.readlines() #屏蔽词文件中，每一个词汇独占一行，因此逐行读取 #type（fake_data） is list. 这个列表里的每个元素都是str for i in fake_data: #遍历屏蔽词列表，每个i都是一个屏蔽词 fake_set.add(i.strip()) #将屏蔽词加入集合，集合具有无序独立性，会自动排除重复词 #扩充屏蔽词库 fake_set = fake_set|stop_words 分词 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #alist装填分词句 for i in jieba.cut(text,cut_all=False): #text是源文档 #切分采用精确模式 #jieba.cut（）返回一个generate对象，使用for语句可以遍历此对象 #每一个i都是一个str alist.append(i.strip()) #循环结束后，alist列表里的若干个元素，都是通过jieba分好的词 # 剔除屏蔽词 for word in alist: #alist是一个装填分词的列表，里面的每一个元素都来自源文档 if word not in fake_set: #如果遍历到的词汇不是屏蔽词，那么就把这词接入btext btext += word btext +=\u0026#39;/\u0026#39; #每个分词之间用/断开 #btext变量是一个较长的且已过滤屏蔽词的字符串str，每个分词之间由\u0026#39;/\u0026#39;断开 生成词云 1 2 3 4 5 6 7 8 9 10 11 12 # 实例化 wc = wordcloud.WordCloud(font_path=font_path, width=1920, height=1080, background_color=\u0026#34;white\u0026#34;) # 传入 str 对象 # 此处给 generate 传入的参数 btext 已手动除杂，无需在 wordcloud 的实例化参数中指明 stopwords wc.generate(btext) file = wc.to_file(\u0026#39;11111.jpg\u0026#39;) image = wc.to_image(） image.show() Demo 手动爬取 15 个沙雕营销号生活妙用视频文案，利用 jieba + wordcloud 统计高频词。\n问题总结 文件读写统一编码格式 错误案例：读取多个编码格式不同的文件时，使用了统一的解码格式，导致文本乱码或屏蔽失效。\n例如：屏蔽词文件 stop_key.txt 编码为 GBK，源文件 raw_text.txt 编码为 UTF-8。一开始写函数并没有注意到这个细节，而后整个程序的读文件操作都通过一个 read_file() function 进行，导致整个程序陷入了无限报错之中，拆东墙补西墙。\n解决方案：给 read_file() function 自定义参数 mode，进而针对特殊编码的文件单独控制 encoding。\nps：此处分别用两个 open 强调文件编码不同 ps：在我没意识到文件编码异常之前，一直在调整统一的 encoding 试错，从 UTF-8 到 GBK 再到 GB18030，显然都不能解决问题。如果通过设置 errors=ignore 强行忽视非法编码，要么导致源文文本乱码，要么就会在词库过滤时发现 stop_words 集合并没有起作用（原因一致）。由此引发的 Error 信息如下。 1 2 UnicodeDecodeError: \u0026#39;gbk\u0026#39; codec can\u0026#39;t decode byte 0x80 in position 91: illegal multibyte sequence UnicodeDecodeError: \u0026#39;utf-8\u0026#39; codec can\u0026#39;t decode byte 0xbd in position 0: invalid start byteshell 补充：如果数据集从创建到调用都是自己通过python函数操作，往往不会出现编码格式错乱的问题（无非就 GBK 或 UTF-8 ）。出现问题很可能是数据集被创建后自己 手动 打开 修改 保存 了源文档！这时候保存的文档编码格式可能会分裂成 UTF-8，GBK，GB18030，Unicode，ANSI，GB2312，BIG5 等等常见的中文格式编码，这要看编辑器的默认转录格式\nwordcloud易错参数解释 参数stopwords接受的文本格式是set\n函数 generate接受的文本格式是str\n1 2 3 4 5 6 7 8 9 # 词云实例化 wc = wordcloud.WordCloud(stopwords=stop_words) print(type(stop_words)) # \u0026lt;class \u0026#39;set\u0026#39;\u0026gt; # 词云生成 wc.generate(btext) print(type(btext)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 实验附件 这里呈上沙雕营销号文案\nu0026#34;\u0026#34;\u0026#34;接着利用剪刀剪下来一个正方形纸片。 利用我们的美工刀在上面裁剪一个小孔。 小孔裁剪好了。 大家肯定非常好奇。 这个是用来做什么的？ 其实这个就是我们用来阅读的一个小神器。 我们在阅读的时候。 可以将它放在我们的书上。 然后这样逐字阅读。 这个方法就是采用了我们小孔成像的原理。 这样我们阅读的时候就可以方便很多。 而且看得很清楚。 我们可以先把油桶的提手取下来 其实取下提手也是有小方法的 我们只要把这一圈齿片一片一片的往外掰 掰完以后，我们就可以把它取下来了 接下来我们看看它的妙用吧 家里衣服太多衣柜挂不下 我们只需把油桶上的塑料把手清洗干净 然后套在衣架上 这时我们将下一件衣服也挂在上面 这样就能为我们节省很多空间 我们拿出家里的吹风机 开启冷风档 大家看这个时候它散发出来的一股吸附力 能够将我们的一次性纸杯牢牢吸附在它的后盖上 能够轻松地吸附我们桌子上面的一些纸屑 热熔胶热熔胶热熔胶热熔胶热熔胶 然后将刀片黏在梳子上 我们准备一个卫生巾 把它贴在门把手侧面 妙用2用来戒烟 将风油精涂在香烟上 会有一股难闻的气味 吸烟者抽了就会头痛恶心 能达到减肥的效果 第三个妙用 我们可以在上面套一个垃圾袋 要当垃圾桶吗 这样把它放在我们卧室的床头上 在扔垃圾的时候就会变得非常容易了 如果觉得有异味的话 如果觉得有异味的话 我们扔完垃圾后可以盖上盖子 我们先来准备食材：馒头、蜂蜜还有洗洁精 我们拿出馒头在上面 均匀地涂抹一些蜂蜜 然后再加入适量的洗洁精 切记涂抹均匀o 然后我们把它放在老鼠经常出没的地方 老鼠一碰到找个馒头就会轻松挂掉了 原理解释 蜂蜜是甜性物质 涂抹它是为了吸引老鼠过来 而洗洁精本身就是有毒的液体，老鼠一沾到就会自然挂掉 你说涂点老鼠药上去1那我银A可能还能稍微能接受一点 可以我今天颠对洗清精的认识好吧 绝对不会出现老鼠 今天呢城西教大家用现有的材料自制胶水那个效果呢用起来跟买的 效果是擦不多的 首先我们只需要准备一点淀粉 淀粉就是那个玉米定粉啊 这个声音像我小学门口小卖店的老板 接着我们挤入洗洁精 大家看同样是有粘的效果的 希望对大家有所帮助 今天呢城西就跟大家讲一下 我们一定要在我们的钱包里面放一张纸 为什么呢？（为什么这个营销号不上字幕？） 作用可是非常的大啊 首先呢我们要拿出 一张这么大小的纸 裁剪出跟这里差不多大小 然后呢我们要在这个上面写上我们的姓名 姓名然后电话号码 然后呢还有家庭住址之类的 这个纸啊塞在最显眼的地方 把冰淇淋拿出来把肥皂弄成永淇淋装回袋子 另外我们还可以在废旧的鞋子里面 铺上一层锡箔纸 因为锡箔纸不怕烫 我们把它放在床头 就可以成为一个小小的烟灰缸啦 你为什么非要用个高跟鞋去做烟灰缸 实个烟灰缸就这么难吗 还要铺上锡销E 哇失响1你好讲究晚你，意识好强哦 是不是非常方便呢 而且也非常美观 像一件艺术品 火机放在水里以后还能开火吗 打火机大家常见特别的男生 今天我们就来做这实验 首先准畜一个打火机和一个气球 把气球套在打火机上面 然后端口打个死结 接者我们把用气球装好的打火机放进水里 来回浸泡几分钟后拿出来 会发生什么变化呢 我们把气球剪破口 然后把火机拿出来 开火试一下竟然还是能用的 火花比原来的还要大 原来打火机在的密封下浸水 还是可以用的 我们拿手机看电视时 可以将塑料提手向后掰几下 这时再把手机放上去 这样我们手机支架就做好了 我们拿来一个家里面都有的废旧盒子 接着利用剪刀剪下来一个正方形纸片 利用我们的美工刀在上面裁剪一个小孔 这一次性纸杯相信大家都不陌生 很多朋友的家里都会买一些这种纸杯 用它来招待客人 但是你知道 在这些纸杯上面扎一些小洞 他有什么作用吗 下面跟三毛一起来了解一下吧 首先我们准备一个一次性纸杯 还有一个叉子 然后我们用叉子 在这个杯子的底部给他戳一个小洞 将杯子底部扎完小洞之后 然后我们再将这个纸杯 放到另一个杯子里面 接下来我们再到这杯子里面 放入少许的茶叶 添加适量的茶叶之后 我们再倒入适量的开水 添加开水之后我们让它浸泡2-3分钟时间 浸泡2-3分钟时间后我们在将里面的杯子拿出来 我们现在可以看到 杯子里面的茶叶已经全部给过滤出来了 非常的方便 用这个方法来泡茶喝 它还可以节省茶叶 这么一点点茶叶我们可以泡好几杯茶 小妙招 超实用的小妙招 学会了快告诉妈妈 准备一张吸油纸 将牙膏一粒一粒均匀地挤在纸上 然后撒上小苏打 等待凝固后 把它装进小瓶子里 刷牙的时候倒出一粒 就可以直接刷牙了 将香皂融化吸入针管 然后挤入药板模型里面 用锡纸封柱模板 旅游的时候带在身上 随时随地都可以用来洗手 废旧的牙刷还有怎样的妙用呢 跟我来看看 我们先准备两个差不多的牙刷 用皮筋将它们绑起来 那么这两支牙刷的第一个作用就是用来清洗水龙头 由于水龙头的形状比较特殊 所以它的内侧经常很难清理到 将牙刷取开 然后均匀的擦拭 可以看到里外都清理的非常干净 而且可以随时调换位置 喝茶剩下的茶叶根不要扔 我们还可以拿它来做很实用的东西 首先将茶叶取出来 挤干水分放入盘中 然后翻在太阳下晒干 晒好后 将我们穿的袜子脱下来一只 将晒干的茶叶倒入袜子中 扎好口 一个便携的香袋就完成了 茶香四溢 怎么样 是不是很实用呢 如果实用别忘记点赞 \u0026#34;\u0026#34;\u0026#34; ","date":"2020-02-29T01:20:33+08:00","image":"https://blog.echosec.top/p/python-jieba-wrodcloud/wordcloud_hudfe8075ab25e2dc7353e929b52673e96_374013_120x120_fill_q75_box_smart1.jpeg","permalink":"https://blog.echosec.top/p/python-jieba-wrodcloud/","title":"『 Python 』jieba+wordcloud 词频可视化"}]