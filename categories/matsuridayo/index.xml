<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MatsuriDayo on Echosec @QIN2DIM</title><link>https://blog.echosec.top/categories/matsuridayo/</link><description>Recent content in MatsuriDayo on Echosec @QIN2DIM</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Nov 2022 07:23:04 +0800</lastBuildDate><atom:link href="https://blog.echosec.top/categories/matsuridayo/index.xml" rel="self" type="application/rss+xml"/><item><title>『Blog』TUIC 敏捷部署</title><link>https://blog.echosec.top/p/tuic/</link><pubDate>Thu, 10 Nov 2022 07:23:04 +0800</pubDate><guid>https://blog.echosec.top/p/tuic/</guid><description>&lt;img src="https://blog.echosec.top/p/tuic/alexander.jpg" alt="Featured image of post 『Blog』TUIC 敏捷部署" />&lt;h2 id="摘要">摘要&lt;/h2>
&lt;p>本文先介绍基于 TUIC 实现的双端代理敏捷部署方案，以 Ubuntu20.04 为例介绍服务端代理架设的步骤，再分别介绍在 Windows（V2RayN/NekoRay），Android（SagerNet/Matsuri） 以及 iOS（Shadowrocket） 启动客户端代理的方案。最后介绍 TUIC 协议的特性、适用场景以及与 Hysteria 协议的区别。&lt;/p>
&lt;p>本文涉及的开源项目如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>项目名&lt;/th>
&lt;th>发行版本号&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/EAimTY/tuic" target="_blank" rel="noopener"
>EAimTY/tuic&lt;/a>&lt;/td>
&lt;td>v0.8.5&lt;/td>
&lt;td>双端代理核心&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/acmesh-official/acme.sh" target="_blank" rel="noopener"
>acmesh-official/acme.sh&lt;/a>&lt;/td>
&lt;td>v3.0.4&lt;/td>
&lt;td>证书申请&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/2dust/v2rayN" target="_blank" rel="noopener"
>2dust/v2rayN&lt;/a>&lt;/td>
&lt;td>v5.36&lt;/td>
&lt;td>核心承载客户端（Windows）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/MatsuriDayo/nekoray" target="_blank" rel="noopener"
>MatsuriDayo/nekoray&lt;/a>&lt;/td>
&lt;td>v2.3&lt;/td>
&lt;td>核心承载客户端（Windows）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/SagerNet/SagerNet" target="_blank" rel="noopener"
>SagerNet/SagerNet&lt;/a>&lt;/td>
&lt;td>v0.8.1-rc03&lt;/td>
&lt;td>核心承载客户端（Android）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/MatsuriDayo/Matsuri" target="_blank" rel="noopener"
>MatsuriDayo/Matsuri&lt;/a>&lt;/td>
&lt;td>v0.5.2&lt;/td>
&lt;td>暂不支持&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="服务端配置">服务端配置&lt;/h2>
&lt;p>&lt;strong>Step1: 下载预编译的 tuic-server&lt;/strong>&lt;/p>
&lt;p>创建工作目录 &lt;code>/home/tuic/&lt;/code>，拉取预编译的 &lt;a class="link" href="https://github.com/EAimTY/tuic/releases/tag/0.8.5" target="_blank" rel="noopener"
>tuic-server v0.8.5&lt;/a>，安装 &lt;a class="link" href="https://github.com/acmesh-official/acme.sh/releases/tag/3.0.4" target="_blank" rel="noopener"
>ACME&lt;/a>，调整默认 CA &lt;code>letsencrypt&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir --parents /home/tuic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> wget -O /home/tuic/tuic https://github.com/EAimTY/tuic/releases/download/0.8.5/tuic-server-0.8.5-x86_64-linux-gnu &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod +x /home/tuic/tuic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt install -y socat &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> curl https://get.acme.sh &lt;span class="p">|&lt;/span> sh &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ~/.acme.sh/acme.sh --upgrade --auto-upgrade &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ~/.acme.sh/acme.sh --set-default-ca --server letsencrypt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Step2: 申请证书&lt;/strong>&lt;/p>
&lt;p>申请证书，将证书移至 &lt;code>/home/tuic/&lt;/code> 工作目录。&lt;/p>
&lt;p>一个 A 域名每 170h 最多申请 5 次证书，如果你玩的太花被限制了，开一个新的 A 域名到本机 IPv4 即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -p &lt;span class="s2">&amp;#34;请输入解析到本机 IPv4 的域名：&amp;#34;&lt;/span> DOMAIN &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ~/.acme.sh/acme.sh --issue -d &lt;span class="nv">$DOMAIN&lt;/span> --standalone --keylength ec-256 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ~/.acme.sh/acme.sh --install-cert --ecc -d &lt;span class="nv">$DOMAIN&lt;/span> --fullchain-file /home/tuic/fullchain.crt --key-file /home/tuic/private.key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Step3: 编辑服务配置文件&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vim /home/tuic/config.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>添加配置信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">16387&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;token&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;how-dare-you&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;certificate&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/home/tuic/fullchain.crt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;private_key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/home/tuic/private.key&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;congestion_controller&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;bbr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;alpn&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;h3&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Step4: 添加系统服务&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vim /etc/systemd/system/tuic.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建并编辑配置文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">TUIC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Documentation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">https://github.com/EAimTY/tuic&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">After&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">network.target&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">User&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ExecStart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/home/tuic/tuic -c /home/tuic/config.json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Restart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">on-failure&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">multi-user.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更新系统服务缓存，允许 &lt;code>tuic service&lt;/code> 开机自启&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">systemctl daemon-reload &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> systemctl &lt;span class="nb">enable&lt;/span> tuic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动系统服务&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">systemctl start tuic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其他常用命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看运行状态&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl status tuic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 实时日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">journalctl -u tuic --output cat -f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看服务端配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat /home/tuic/config.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看证书，其中 &amp;#34;~/.acme.sh/acme.sh&amp;#34; 可替换为别名 &amp;#34;acme.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~/.acme.sh/acme.sh --info --ecc -d &lt;span class="o">[&lt;/span>YOUR_DOMAIN&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="客户端配置">客户端配置&lt;/h2>
&lt;h3 id="配置模版">配置模版&lt;/h3>
&lt;p>建议在开始配置之前将客户端升级到最新版本。在&lt;a class="link" href="https://github.com/EAimTY/tuic" target="_blank" rel="noopener"
>文档&lt;/a>中未出现的 field 将保持默认设置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;relay&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;server&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;YOUR SERVER DOMAIN&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">16387&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;token&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;how-dare-you&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;ip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;YOUR SERVER IP&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;congestion_controller&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;bbr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;alpn&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;h3&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;reduce_rtt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;local&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">%socks_port%&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;log_level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;off&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="nekoray推荐">NekoRay[推荐]&lt;/h3>
&lt;p>如果你是首次使用 NekoRay，可看&lt;a class="link" href="https://blog.echosec.top/p/nekoray-hysteria/" >这篇文章&lt;/a>以及&lt;a class="link" href="https://matsuridayo.github.io/n-configuration/" target="_blank" rel="noopener"
>官方文档&lt;/a>快速上手。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载预编译的 &lt;a class="link" href="https://github.com/EAimTY/tuic/releases" target="_blank" rel="noopener"
>tuic-client(windows-gnu)&lt;/a>，放置到 NekoRay config 目录下。务必下载 client，而不是 server。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>「首选项 - 基本设置 - 核心」添加自定义核心，命名「tuic」，添加 tuic-client 的绝对路径，如果你已将核心放置在 config 目录下，点击「选择」可以直接看见。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.echosec.top/p/tuic/image-20221110082421257.png"
width="540"
height="576"
srcset="https://blog.echosec.top/p/tuic/image-20221110082421257_hue7abd5b0cd86924ed61d1dfc3291228a_18238_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221110082421257_hue7abd5b0cd86924ed61d1dfc3291228a_18238_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="「首选项 - 基本设置 - 核心」"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="225px"
>&lt;/p>
&lt;ol start="3">
&lt;li>在空白处右键「手动输入配置 - 编辑」在「类型」中选择「自定义（其他核心）」，模版配置如下图所示。替换掉占位符 &lt;code>YOUR SERVER DOMAIN&lt;/code>以及 &lt;code>YOUR SERVER IP&lt;/code>。如果你改变了上文给出的服务端口 &lt;code>ip&lt;/code> 以及身份令牌 &lt;code>token&lt;/code>，则此处对照改变即可。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.echosec.top/p/tuic/image-20221110082853260.png"
width="476"
height="738"
srcset="https://blog.echosec.top/p/tuic/image-20221110082853260_hu108b13457f305462359bea171d2847cb_17809_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221110082853260_hu108b13457f305462359bea171d2847cb_17809_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="「手动输入配置 - 编辑 - tuic 代理核心」"
class="gallery-image"
data-flex-grow="64"
data-flex-basis="154px"
>&lt;/p>
&lt;h3 id="v2rayn">V2RayN&lt;/h3>
&lt;ol>
&lt;li>下载预编译的 &lt;a class="link" href="https://github.com/EAimTY/tuic/releases" target="_blank" rel="noopener"
>tuic-client(windows-gnu)&lt;/a>，放置到 V2RayN 工程根目录下。&lt;/li>
&lt;li>添加自定义配置服务器，复制粘贴配置模版，替换掉占位符 &lt;code>YOUR SERVER DOMAIN&lt;/code>以及 &lt;code>YOUR SERVER IP&lt;/code>，修改 local port 为 50001。如果你改变了上文给出的服务端口 &lt;code>ip&lt;/code> 以及身份令牌 &lt;code>token&lt;/code>，则此处对照改变即可。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.echosec.top/p/tuic/image-20221110085635390.png"
width="920"
height="525"
srcset="https://blog.echosec.top/p/tuic/image-20221110085635390_hu490b8fafa18c1755074671a7770284a6_37771_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221110085635390_hu490b8fafa18c1755074671a7770284a6_37771_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="「V2RayN - 自定义配置服务器」"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;h3 id="sagernet">SagerNet&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>从 Google Play 下载软件（搜索关键词 SagerNet），或从项目仓库拉取 &lt;a class="link" href="https://github.com/SagerNet/SagerNet/releases/tag/0.8.1-rc03" target="_blank" rel="noopener"
>apk 程序&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加服务器配置「手动输入 - TUIC」，对照配置模版填入必要信息：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.echosec.top/p/tuic/image-20221110103616402.png"
width="1080"
height="2583"
srcset="https://blog.echosec.top/p/tuic/image-20221110103616402_hu72fbec67810d1b9fce6b74e920f1ef80_379680_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221110103616402_hu72fbec67810d1b9fce6b74e920f1ef80_379680_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="「SagerNet - 手动添加 TUIC 服务器」"
class="gallery-image"
data-flex-grow="41"
data-flex-basis="100px"
>&lt;/p>
&lt;ol start="3">
&lt;li>首次使用时根据提示下载 SagerNet - TUIC 插件，主流安卓设备选择 arm64-v8a 的版本。参考&lt;a class="link" href="https://blog.echosec.top/p/matsuri-hysteria/" >这篇文章&lt;/a>的软件配置，解除插件和主程序的限制。首先，长按 SagertNet，设置应用信息，提供自启动，联网控制和无限制省电的权限，然后再通过「系统设置 - 应用管理」查找 TUIC Plugin，给予自启动和无限制省电的权限。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.echosec.top/p/tuic/image-20221110104128245.png"
width="1037"
height="1818"
srcset="https://blog.echosec.top/p/tuic/image-20221110104128245_hu62487ad32fa812ea315ea184d58923a4_233320_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221110104128245_hu62487ad32fa812ea315ea184d58923a4_233320_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="57"
data-flex-basis="136px"
>&lt;img src="https://blog.echosec.top/p/tuic/image-20221110104108682.png"
width="887"
height="1818"
srcset="https://blog.echosec.top/p/tuic/image-20221110104108682_hu217a5832f5276278a5b4f5f6a322e282_220634_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221110104108682_hu217a5832f5276278a5b4f5f6a322e282_220634_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="48"
data-flex-basis="117px"
>&lt;/p>
&lt;h2 id="网络对比测试">网络对比测试&lt;/h2>
&lt;p>使用 NekoRay 对同一服务器上监听不同端口的代理服务进行对比测试，核心版本及客户端配置如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;relay&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;congestion_controller&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;bbr&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;alpn&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;h3&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;reduce_rtt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下方对比中，选用来自 &lt;strong>PacificRack&lt;/strong> 提供商的网络环境较有挑战的云服务器，本地带宽 300Mbps，调整 Hysteria &lt;code>down_mbps: 110&lt;/code>，&lt;a class="link" href="https://www.youtube.com/watch?v=1La4QzGeaaQ&amp;amp;ab_channel=Jacob%2BKatieSchwarz" target="_blank" rel="noopener"
>YouTube 4K 视频&lt;/a>，大文件下载速度测试选用 &lt;a class="link" href="https://storage.googleapis.com/openimages/web/download_v7.html#download-manually" target="_blank" rel="noopener"
>Open Images Dataset V7&lt;/a> 的 Boxes 训练集。&lt;/p>
&lt;ul>
&lt;li>Speedtest ：两种协议均能跑满理论上限，微量损耗误差忽略不计。&lt;/li>
&lt;li>YouTube4K：两种协议连接速度均溢出（一般认为连接速度超过 2W Kbps 即可流畅播放）。其中，Hysteria 略有优势，但实测中连接速度不稳定，出现「间接抽风」的情况，波动非常大。&lt;/li>
&lt;li>FileDownload：Hysteria 下载速度接近&lt;code>down_mbps&lt;/code>理论上限，而 TUIC 的下载速度则稳定在 3~5 MB/s。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>来源/协议&lt;/th>
&lt;th>TUIC&lt;/th>
&lt;th>Hysteria&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Speedtest&lt;/strong>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/13920026472.png"
width="750"
height="400"
srcset="https://blog.echosec.top/p/tuic/13920026472_hu2dc2fd2d3ad3309adccde7fd04596d9e_52826_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/13920026472_hu2dc2fd2d3ad3309adccde7fd04596d9e_52826_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/13919999266.png"
width="750"
height="400"
srcset="https://blog.echosec.top/p/tuic/13919999266_hub18e768a60167d6c2eda971ea2aceea2_50628_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/13919999266_hub18e768a60167d6c2eda971ea2aceea2_50628_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>YouTube Connection Speed&lt;/strong>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/image-20221110101649533.png"
width="747"
height="339"
srcset="https://blog.echosec.top/p/tuic/image-20221110101649533_hu7f50eb217ce7faad7e8dedb0a12d7174_265891_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221110101649533_hu7f50eb217ce7faad7e8dedb0a12d7174_265891_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20221110101649533"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="528px"
>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/image-20221110101315538.png"
width="747"
height="315"
srcset="https://blog.echosec.top/p/tuic/image-20221110101315538_hu4df07fdbcec90d519b9ad1a101ac4a37_213571_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221110101315538_hu4df07fdbcec90d519b9ad1a101ac4a37_213571_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20221110101315538"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="569px"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Download&lt;/strong>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/image-20221110100624503.png"
width="529"
height="89"
srcset="https://blog.echosec.top/p/tuic/image-20221110100624503_hubff774464f8c2e10e2f422f669a5f539_7561_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221110100624503_hubff774464f8c2e10e2f422f669a5f539_7561_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20221110100624503"
class="gallery-image"
data-flex-grow="594"
data-flex-basis="1426px"
>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/image-20221110100734660.png"
width="534"
height="90"
srcset="https://blog.echosec.top/p/tuic/image-20221110100734660_hu839e7091bce89cc8411c7b840a9be5b3_7393_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221110100734660_hu839e7091bce89cc8411c7b840a9be5b3_7393_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20221110100734660"
class="gallery-image"
data-flex-grow="593"
data-flex-basis="1424px"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>现将服务器调整为 &lt;strong>V.PS&lt;/strong> 提供的线路质量较好的 Tokyo Micro Pro 服务器，调整 Hysteria &lt;code>down_mbps: 187&lt;/code>，其他环境条件不变。&lt;/p>
&lt;ul>
&lt;li>Speedtest：趋势相同。&lt;/li>
&lt;li>YouTube4K：连接速度同样已溢出，但 Hysteria 已能跑出一倍之差的测试成绩&lt;/li>
&lt;li>FileDownload：Hysteria 下载速度接近&lt;code>down_mbps&lt;/code>理论上限，而 TUIC 的下载速度稳定在 9MB/s 左右。&lt;/li>
&lt;/ul>
&lt;p>值得一提的是，先前 Hysteria 在 YouTube 测试中的抖动情况不再出现。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>来源/协议&lt;/th>
&lt;th>TUIC&lt;/th>
&lt;th>Hysteria&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Speedtest&lt;/strong>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/13927396378.png"
width="750"
height="400"
srcset="https://blog.echosec.top/p/tuic/13927396378_hu068435353ecbad0f45c0b926800f8279_50250_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/13927396378_hu068435353ecbad0f45c0b926800f8279_50250_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/13927419994.png"
width="750"
height="400"
srcset="https://blog.echosec.top/p/tuic/13927419994_hu3e7b1e1b025c2dd34a35e1e695856209_50295_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/13927419994_hu3e7b1e1b025c2dd34a35e1e695856209_50295_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>YouTube Connection Speed&lt;/strong>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/image-20221111234649105.png"
width="755"
height="320"
srcset="https://blog.echosec.top/p/tuic/image-20221111234649105_hu22311f120c3eb486f41b505ad31bd463_188860_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221111234649105_hu22311f120c3eb486f41b505ad31bd463_188860_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20221111234649105"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="566px"
>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/image-20221111235300137.png"
width="764"
height="318"
srcset="https://blog.echosec.top/p/tuic/image-20221111235300137_hud29a1ebcbf8690c6ddabd88a37e8436f_206359_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221111235300137_hud29a1ebcbf8690c6ddabd88a37e8436f_206359_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20221111235300137"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="576px"
>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Download&lt;/strong>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/image-20221112010449698.png"
width="536"
height="77"
srcset="https://blog.echosec.top/p/tuic/image-20221112010449698_hue3d3c341024741a1b39543f3a7c84dd7_7208_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221112010449698_hue3d3c341024741a1b39543f3a7c84dd7_7208_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20221112010449698"
class="gallery-image"
data-flex-grow="696"
data-flex-basis="1670px"
>&lt;/td>
&lt;td>&lt;img src="https://blog.echosec.top/p/tuic/image-20221112010520098.png"
width="536"
height="77"
srcset="https://blog.echosec.top/p/tuic/image-20221112010520098_huf4af3df0742cc563a511322a933861fe_17152_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/tuic/image-20221112010520098_huf4af3df0742cc563a511322a933861fe_17152_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20221112010520098"
class="gallery-image"
data-flex-grow="696"
data-flex-basis="1670px"
>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="tuic">TUIC&lt;/h2>
&lt;h3 id="协议简介">协议简介&lt;/h3>
&lt;blockquote>
&lt;p>REF: &lt;a class="link" href="https://github.com/EAimTY/tuic/tree/dev/protocol" target="_blank" rel="noopener"
>https://github.com/EAimTY/tuic/tree/dev/protocol&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>TUIC 是一个基于 QUIC 的有状态协议，目前的版本是 &lt;code>0x04&lt;/code>。&lt;/p>
&lt;h3 id="协议特性">协议特性&lt;/h3>
&lt;blockquote>
&lt;p>REF: &lt;a class="link" href="https://github.com/EAimTY/tuic#design" target="_blank" rel="noopener"
>https://github.com/EAimTY/tuic#design&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>1-RTT TCP 中继&lt;/li>
&lt;li>0-RTT UDP 中继，且 NAT 类型为 FullCone&lt;/li>
&lt;li>在用户空间的拥塞控制，也就是说可以在任何系统平台实现双向的 BBR&lt;/li>
&lt;li>两种 UDP 中继模式: &lt;code>native&lt;/code> （原生 UDP 特性，数据仍被 TLS 加密）和 &lt;code>quic&lt;/code> (100% 送达率，每个包单独单独作为一个 QUIC 「流」，一个包的确认重传不会阻塞其它包)&lt;/li>
&lt;li>完全多路复用，服务器和客户端之间始终只需要一条 QUIC 连接，所有任务作为这个连接中的 “流” 进行传输（一个流的暂时阻塞不会影响其它流），所以除连接第一个中继任务外的其它任务都不需要经过 QUIC 握手和 TUIC 的鉴权&lt;/li>
&lt;li>网络切换时的会话平滑转移，例如在从 Wi-Fi 切换到移动数据时连接不会像 TCP 一样直接断开&lt;/li>
&lt;li>0-RTT 、与中继任务并行的鉴权&lt;/li>
&lt;li>支持 QUIC 的 0-RTT 握手（开启之后能达到 真・ 1 -RTT TCP 和 0-RTT UDP ，但是就算不开启，多路复用的特性也能保证在绝大多数情况下 1-RTT 和 0-RTT ）&lt;/li>
&lt;/ul>
&lt;h2 id="总结对比">总结对比&lt;/h2>
&lt;p>&lt;strong>TUIC 设计目标是「尽可能减少握手造成的网络往返时延」&lt;/strong>，相比之下，更加适合「&lt;strong>湍流&lt;/strong>」应用场景，即，快速响应的持续不断的小流量请求，如快速加载 YouTube/TikTok/Twitter 首帧内容，访问素材网站快速加载缩略图等。&lt;/p>
&lt;p>&lt;strong>Hysteria 的设计目标是「最大化数据吞吐量」&lt;/strong>，相比之下，社区更加活跃，协议完成度更高，例如：已于 1.3.0 支持 &lt;a class="link" href="https://hysteria.network/zh/docs/port-hopping/" target="_blank" rel="noopener"
>port-hopping&lt;/a>，可在一定程度上缓解 UDP 单端口长连接被运营商丢包的风险；支持 obfs 流量混淆；内部实现 TUN 以及ACL路由；相比之下，Hysteria 更加适合「&lt;strong>激流&lt;/strong>」应用场景，即，非即时响应的高速流量，如数据集拉取，YouTube 8K 视频播放。&lt;/p>
&lt;p>总得来说，TUIC 更适合移动端（蜂窝流量）使用场景。TUIC 的较低的网络往返时延，性能损耗以及带宽开销能够在短视频，即时通信等应用场景带来不错的体感升级，而当 VPS 线路质量较差时（如骨干网晚高峰）TUIC 发挥的作用非常有限。&lt;/p>
&lt;p>Hysteria 更适合大流量应用场景，绝大多数的单节点 VPS 直连线路质量都很一般，Hysteria 微调后的拥塞控制策略的确能给劣质网络环境带来质变，但也需警惕错误的客户端配置带来的负优化。在服务器带宽盈余时，Hysteria 更符合大多数普通用户的综合需求，尤其在链路拥堵时段，代理中继延时在用户层面感知不强，反倒是数倍之差的下载速度体验成为矛盾焦点。&lt;/p>
&lt;p>最后，在条件允许的情况下，直连线路搭配使用 QUIC 变种协议簇而非 VMESS，Trojan，VLESS 是更加明智的选择。如果你喜欢或依赖 CDN/Relay 则可以选择 「Shadowsocks + ShadowTLS」 或 「VMESS + TLS + WS + CDN」 等更加复杂的解决方案。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.eaimty.com/2022/03/tuic.html" target="_blank" rel="noopener"
>基于 QUIC 的代理软件：TUIC - EAimTY 的博客&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/chika0801/tuic-install" target="_blank" rel="noopener"
>chika0801/tuic-install: TUIC安装指南&lt;/a>&lt;/p></description></item><item><title>『Blog』VMware 虚拟机流量代理最佳实践</title><link>https://blog.echosec.top/p/vmware-proxy-2023/</link><pubDate>Sun, 30 Oct 2022 00:54:18 +0800</pubDate><guid>https://blog.echosec.top/p/vmware-proxy-2023/</guid><description>&lt;img src="https://blog.echosec.top/p/vmware-proxy-2023/anato1.jpg" alt="Featured image of post 『Blog』VMware 虚拟机流量代理最佳实践" />&lt;h2 id="前言">前言&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>本文内容较为硬核，读者不应是 Linux 小白且应对 NekoRay ，VMware 以及操作系统代理有基本的了解。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文探讨的场景是 Linux 图形化操作系统，在命令行系统无法运行 NekoRay（也没有必要）直接运行代理核心即可。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>我们曾在 &lt;a class="link" href="https://blog.echosec.top/p/vmware-proxy/" >『Blog』VMware 虚拟机流量代理&lt;/a> 介绍过一种虚拟机借助宿主机局域网代理实现「间接代理」的方案，it works fine 但不够优雅，代理端口的配置让人摸不着头脑，宿主机内网 IP:PORT 变动后，虚拟机代理设置也需要跟着变动，非常繁琐。&lt;/p>
&lt;p>如今，我们可以借助一些优秀的开源项目直接在 Linux 操作系统上管理代理服务器，即，直接在虚拟机上启动客户端代理内核实现流量代理。此时，虚拟机代理和宿主机代理相互独立，虚拟机系统代理无需跟随宿主机网络环境变动。本文以 VMware Ubuntu20.04LTS 为例介绍虚拟机流量代理的最佳实践，这是目前个人使用场景代理效率最高且配置最简单的方案（暴论）。&lt;/p>
&lt;p>本文涉及的开源项目如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">项目名&lt;/th>
&lt;th style="text-align:center">版本号&lt;/th>
&lt;th style="text-align:center">用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://github.com/MatsuriDayo/nekoray" target="_blank" rel="noopener"
>MatsuriDayo/nekoray&lt;/a>&lt;/td>
&lt;td style="text-align:center">v2.2&lt;/td>
&lt;td style="text-align:center">图形化代理客户端&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://github.com/HyNetwork/hysteria" target="_blank" rel="noopener"
>HyNetwork/hysteria&lt;/a>&lt;/td>
&lt;td style="text-align:center">v1.2.2&lt;/td>
&lt;td style="text-align:center">代理核心&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://github.com/klzgrad/naiveproxy" target="_blank" rel="noopener"
>klzgrad/naiveproxy&lt;/a>&lt;/td>
&lt;td style="text-align:center">v106.0.5249.91-1&lt;/td>
&lt;td style="text-align:center">代理核心&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="虚拟机设置">虚拟机设置&lt;/h2>
&lt;p>将虚拟机镜像的网络适配器的网络连接模式改成 &lt;strong>NAT 模式&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://blog.echosec.top/p/vmware-proxy-2023/image-20221030011821220.png"
width="1028"
height="555"
srcset="https://blog.echosec.top/p/vmware-proxy-2023/image-20221030011821220_hu69c7d3be5e90b1ec2f31090859e22746_58949_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/vmware-proxy-2023/image-20221030011821220_hu69c7d3be5e90b1ec2f31090859e22746_58949_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" 图 1 NAT 模式"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
>&lt;/p>
&lt;h2 id="代理设置">代理设置&lt;/h2>
&lt;p>从这一步开始均为玄学的操作，因为后文中涉及到的开源项目均部署在 GitHub 上，需要优先使用代理才能下载。&lt;/p>
&lt;p>这里有两种解决方法，要么先在宿主机上下载好必要的软件，再把它们「拖入」虚拟机窗口传输文件；要么通过反代服务解决 wget 等命令的路由问题。下文以「命令行」方案为例梳理配置思路。若随时间推移反代接口失效或脚本执行错误，读者可手动分步执行命令或基于第一种方案照葫芦画瓢。&lt;/p>
&lt;p>&lt;strong>Script&lt;/strong>: 如果你使用 Ubuntu 20.04 以及 python3 开发环境，可以运行一键安装脚本，直接跳过 NekoRay 下载以及代理核心下载步骤。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wget -qO- https://gitee.com/yaoqinse/hello-world/raw/develop/npstart.py &lt;span class="p">|&lt;/span> python3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="download-nekoray">Download NekoRay&lt;/h3>
&lt;p>行为链：从 GitHub 下载 NekoRay 预编译压缩包，解压到桌面，修改控制权限，启动 NekoRay。&lt;/p>
&lt;p>其中 &lt;code>https://dl.capoo.xyz/&lt;/code> 为作者开放使用的反代接口，去掉这段内容后剩下的部分为正常的 GitHub 的资源链接。如果你的虚拟机此时不存在路由问题，应该去掉这段内容。&lt;/p>
&lt;p>此外，为保证操作的连贯性，这里写死了 NekoRay v2.2 的下载地址，你可以在部署完毕后通过 NekoRay 内置的在线更新功能追平最新特性。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ~/Desktop/ &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> wget https://dl.capoo.xyz/https://github.com/MatsuriDayo/nekoray/releases/download/2.2/nekoray-2.2-2022-10-30-linux64.zip &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> unzip nekoray-2.2-2022-10-30-linux64.zip &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm nekoray-2.2-2022-10-30-linux64.zip &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> ~/Desktop/nekoray &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ./launcher
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你是第一次使用 NekoRay ，可以在 &lt;a class="link" href="https://blog.echosec.top/p/nekoray-hysteria/" >之前的文章&lt;/a> 中了解更多的使用细节，此处不再赘述。&lt;/p>
&lt;h3 id="download-proxy-core">Download Proxy Core&lt;/h3>
&lt;p>下文以 Hysteria 及 Naiveproxy 作演示，同样，相关文章可在本站历史查找。&lt;/p>
&lt;p>行为链：从 GitHub 上游仓库下载预编译代理核心并存放至 NekoRay 的配置路径下，最后赋予 hysteria-core 额外的执行权限。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ~/Desktop/nekoray/config &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> wget https://dl.capoo.xyz/https://github.com/HyNetwork/hysteria/releases/download/v1.2.2/hysteria-linux-amd64 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> chmod +x ./hysteria-linux-amd64 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> wget -O naiveproxy.tar.xz https://dl.capoo.xyz/https://github.com/klzgrad/naiveproxy/releases/download/v106.0.5249.91-1/naiveproxy-v106.0.5249.91-1-linux-x64.tar.xz &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> tar -xvf naiveproxy.tar.xz &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> mv naiveproxy-v106.0.5249.91-1-linux-x64/naive . &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm naiveproxy.tar.xz &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> rm -r naiveproxy-v106.0.5249.91-1-linux-x64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下载完后，参照 &lt;a class="link" href="https://blog.echosec.top/p/nekoray-hysteria/" >之前的文章&lt;/a> &lt;strong>启用 HTTP 监听端口&lt;/strong> 并 &lt;strong>指定 hysteria-core 以及 naive-core 的绝对路径&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://blog.echosec.top/p/vmware-proxy-2023/image-20221030181001877.png"
width="992"
height="670"
srcset="https://blog.echosec.top/p/vmware-proxy-2023/image-20221030181001877_hu0881c7e6d4401659acf4e07325570ca8_87479_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/vmware-proxy-2023/image-20221030181001877_hu0881c7e6d4401659acf4e07325570ca8_87479_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="图 2 添加代理核心"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="355px"
>&lt;/p>
&lt;h3 id="enable-system-proxy">Enable System Proxy&lt;/h3>
&lt;p>至此， NekoRay 已配置完毕可以直接投入使用。接下来，以你喜欢的方式添加 Hysteria 或 Naiveproxy 的代理服务器，例如从宿主机已配置好的 NekoRay 中导出分享链接并粘贴过来。&lt;/p>
&lt;p>选中需要激活的服务器，启动系统代理。你可以访问 Google 或 YouTube 等站点检测系统代理连通性，也可以通过 fast.com 或 speedtest.net 甚至是 YouTube 码流速度估算代理最大下行速度，如图 3,4,5 所示。&lt;/p>
&lt;p>之后，你可以通过双击 &lt;code>~/Desktop/nekoray/launcher&lt;/code> 启动软件本体，也可以设置开机自启。&lt;/p>
&lt;p>&lt;img src="https://blog.echosec.top/p/vmware-proxy-2023/image-20221030032844192.png"
width="1802"
height="1464"
srcset="https://blog.echosec.top/p/vmware-proxy-2023/image-20221030032844192_hud4f69e9f2686dca641de36ce27ec0924_868107_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/vmware-proxy-2023/image-20221030032844192_hud4f69e9f2686dca641de36ce27ec0924_868107_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="图 3 檢測系統代理連通性"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="295px"
>&lt;/p>
&lt;p>&lt;img src="https://blog.echosec.top/p/vmware-proxy-2023/image-20221030033059858.png"
width="1802"
height="1465"
srcset="https://blog.echosec.top/p/vmware-proxy-2023/image-20221030033059858_hudcd8f62db5fb6c42e30cb0329ff4b977_424091_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/vmware-proxy-2023/image-20221030033059858_hudcd8f62db5fb6c42e30cb0329ff4b977_424091_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="图 4 簡單跑個分"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="295px"
>&lt;/p>
&lt;p>&lt;img src="https://blog.echosec.top/p/vmware-proxy-2023/Snipaste_2022-10-30_03-44-46.png"
width="1795"
height="1293"
srcset="https://blog.echosec.top/p/vmware-proxy-2023/Snipaste_2022-10-30_03-44-46_huf0637cd9ffe9eb3fec00fc57e4bff552_1096315_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/vmware-proxy-2023/Snipaste_2022-10-30_03-44-46_huf0637cd9ffe9eb3fec00fc57e4bff552_1096315_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="图 5 YouTube 4K Video Connection Speed"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/p>
&lt;h2 id="开发中的代理问题">开发中的代理问题&lt;/h2>
&lt;p>介绍常见的虚拟机代理错误设置并给出相应的解决方法。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>浏览器代理&lt;/strong>&lt;/p>
&lt;p>浏览器代理选择系统代理即可。Google，Edge 默认走系统代理（且不可更改），Firefox 则给出眼花缭乱的选项，将「配置访问互联网的代理服务器」手动置为「使用系统代理」即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>wget | git | pip |curl 等命令的路由通路&lt;/strong>&lt;/p>
&lt;p>这些命令默认走系统代理。如果你配置了优先级更高的回源代理（如 pip 清华镜像源）那么它大概率会和系统代理打架，针对回源代理的说明可看后文小节部分。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>apt 等命令的路由通路&lt;/strong>&lt;/p>
&lt;p>建议保持国内镜像源。本地与 Ubuntu 软件源服务器是直连关系，流量不走系统代理，选择国内镜像源直连是不错的选择。当然你也可以修改 Ubuntu 软件源指回主根服务器，并保持 NekoRay VPN 模式为开启状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ping 命令的连通性&lt;/strong>&lt;/p>
&lt;p>我想你应该不会惊讶于「为什么我开启了系统代理，能 ping 通 baidu.com 却 ping 不通 google.com」。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>JetBrains 家族产品的代理设置&lt;/strong>&lt;/p>
&lt;p>（如：PyCharm，Goland，IDE）&lt;/p>
&lt;p>这类软件设置项中的代理仅对软件本身有效，如插件商城，而软件运行代码是通过 shell 脚本命令执行的，即，你的代码中的网络请求是否使用代理与这个库的底层逻辑以及你是否传入代理参数有关，而与软件设置的代理无关。&lt;/p>
&lt;p>比如 Python3 的 &lt;code>requests.get()&lt;/code> 在你不指定参数 &lt;code>proxies&lt;/code> 时会检索环境变量 &lt;code>*_proxy&lt;/code> 自动填充 &lt;code>proxies&lt;/code> 参数，即，reqeusts 流量默认走系统代理。而 &lt;code>aiohttp&lt;/code> 中基于 &lt;code>ClientSession&lt;/code> 对象的网络请求默认直连，即，不指定参数 &lt;code>proxy&lt;/code> 代理不生效。但无论如何，它们都与软件设置的代理无关。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>TLS in TLS&lt;/code> 陷阱&lt;/strong>&lt;/p>
&lt;p>如果你使用 Python3 进行开发，你一定经历过： pip 下载速度慢；换源；镜像源和系统代理打架；自己写的网络请求没法过墙，指定了系统代理却出现了连锁的 &lt;code>SSLError&lt;/code> 异常。这是一个史前巨坑，是一个仅会在中国大陆发生的奇妙化学反应，urllib3 的导演组都自愧不如。这一切的一切都指向一个 &lt;strong>TLS in TLS 陷阱&lt;/strong>。你可以在 &lt;a class="link" href="https://github.com/conda/conda/issues/10590#issuecomment-880196074" target="_blank" rel="noopener"
>conda issues&lt;/a> 继续吃瓜。&lt;/p>
&lt;p>解决方法如下，根据你的需求和应用场景择优：&lt;/p>
&lt;p>&lt;strong>Solution1&lt;/strong>：调整 urllib3 版本，即，&lt;code>pip install urllib3==1.25.11&lt;/code>；&lt;/p>
&lt;p>&lt;strong>Solution2&lt;/strong>：调整代理软件配置&lt;/p>
&lt;ul>
&lt;li>
&lt;p>v2rayN v5.36+, 「参数设置 &amp;ndash; 系统代理设置 &amp;ndash; 高级代理设置」选择 &lt;code>http=http://{ip}:{http_port};https=http://{ip}:{http_port}&lt;/code>。在「例外」中添加 &lt;code>pypi.tuna.tsinghua.edu.cn;&lt;/code> 绕过 pip 清华源的代理请求，如果你使用其他 pip 源，填写相应的域名即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Clash（cfw/verge/&amp;hellip;）开启 TAP/TUN。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>NekoRay 切换至 VPN 模式。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Solution3&lt;/strong>：以你喜欢的方式调整系统代理的协议格式&lt;/p>
&lt;p>核心操作是让 HTTPS 与 HTTP 的代理流量公用一个端口，并且绕过系统代理的 TLS 认证问题。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">proxies&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:10809&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;https&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:10809&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="相关文章">相关文章&lt;/h2>
&lt;p>&lt;a class="link" href="https://blog.echosec.top/p/nekoray-hysteria/" >『Blog』Use Hysteria through NekoRay in Windows&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.echosec.top/p/naiveproxy/" >『Blog』Naiveproxy Quick Start&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.echosec.top/p/v2rayn-hysteria-tutorial/" >『Blog』V2rayN 配置 Hysteria&lt;/a>&lt;/p></description></item><item><title>『Blog』Naiveproxy Quick Start</title><link>https://blog.echosec.top/p/naiveproxy/</link><pubDate>Wed, 19 Oct 2022 20:09:33 +0800</pubDate><guid>https://blog.echosec.top/p/naiveproxy/</guid><description>&lt;img src="https://blog.echosec.top/p/naiveproxy/anato-finnstark.jpg" alt="Featured image of post 『Blog』Naiveproxy Quick Start" />&lt;h2 id="introduce">Introduce&lt;/h2>
&lt;p>本文以 Ubuntu20.04 为例简要介绍 Naiveproxy 服务端的敏捷部署流程，再分别借助 NekoRay/v2rayN 在 Windows 以及 Matsuri（茉莉） 在 Android 启动图形化代理的解决方案。&lt;/p>
&lt;p>下文均以 Matsuri &amp;amp; NekoRay 统称 NekoRay 以及 Matsuri。这两个项目拥有同样的维护社区和协议解析后端，服务器导入操作无需额外声明。&lt;/p>
&lt;p>本文涉及的开源项目如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>项目名&lt;/th>
&lt;th>发行版本号&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/klzgrad/naiveproxy" target="_blank" rel="noopener"
>klzgrad/naiveproxy&lt;/a>&lt;/td>
&lt;td>v106.0.5249.91-1&lt;/td>
&lt;td>双端代理核心&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/QIN2DIM/np-start" target="_blank" rel="noopener"
>QIN2DIM/np-start&lt;/a>&lt;/td>
&lt;td>main-branch&lt;/td>
&lt;td>Naiveproxy 服务端自动编译脚本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/MatsuriDayo/nekoray" target="_blank" rel="noopener"
>MatsuriDayo/nekoray&lt;/a>&lt;/td>
&lt;td>v2.0&lt;/td>
&lt;td>GUI 客户端（Windows/Linux）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/MatsuriDayo/Matsuri" target="_blank" rel="noopener"
>MatsuriDayo/Matsuri&lt;/a>&lt;/td>
&lt;td>v0.5.1&lt;/td>
&lt;td>GUI 客户端（Android）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/caddyserver/caddy" target="_blank" rel="noopener"
>caddyserver/caddy&lt;/a>&lt;/td>
&lt;td>v2.6.2&lt;/td>
&lt;td>承载代理的 Web 服务器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/caddyserver/xcaddy" target="_blank" rel="noopener"
>caddyserver/xcaddy&lt;/a>&lt;/td>
&lt;td>v0.3.1&lt;/td>
&lt;td>编译携带 Naiveproxy 插件的 Caddy2 服务器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="caddy-server-agile-development">Caddy Server Agile Development&lt;/h2>
&lt;h3 id="compile-the-naiveproxy-server">Compile the Naiveproxy Server&lt;/h3>
&lt;p>在 &lt;strong>Ubuntu20.04+&lt;/strong> 环境中自动编译 Naiveproxy，其他环境可参见「&lt;a class="link" href="https://github.com/klzgrad/naiveproxy/wiki/%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener"
>原理及步骤说明&lt;/a>」进行配置。&lt;/p>
&lt;p>首次运行后，你可以通过快捷指令 &lt;code>npstart&lt;/code> 运行脚本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">wget -qO /home/npstart.py https://raw.githubusercontent.com/QIN2DIM/np-start/main/main.py &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> python3 /home/npstart.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首次运行时，除敏捷部署外的功能被锁定，Naiveproxy 编译成功后解锁。自动编译耗时取决于硬件性能和网络带宽配置，一般 1 ~ 5 分钟内可以完成。&lt;/p>
&lt;p>下图为 npstart 的命令行控制面板，可以实现基本的 Naiveproxy 生命周期管理工作。&lt;/p>
&lt;p>&lt;img src="https://blog.echosec.top/p/naiveproxy/image-20221101072516050.png"
width="630"
height="913"
srcset="https://blog.echosec.top/p/naiveproxy/image-20221101072516050_hu1a3beec754b3aa0f121606a074b65836_223278_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/naiveproxy/image-20221101072516050_hu1a3beec754b3aa0f121606a074b65836_223278_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="npstart v0.1.0 - CMD Panel"
class="gallery-image"
data-flex-grow="69"
data-flex-basis="165px"
>&lt;/p>
&lt;h3 id="check-the-generated-configuration">Check the Generated Configuration&lt;/h3>
&lt;p>脚本编译结束后，按任意键自动部署 Naiveproxy 系统服务。&lt;/p>
&lt;p>脚本会在 &lt;code>/home/naiveproxy&lt;/code> 目录下生成编译产出的 &lt;code>caddy&lt;/code> 以及 &lt;code>Caddyfile&lt;/code>并在屏幕上依次打印：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>用于启动 V2rayN Custom Server 的配置信息&lt;/strong>&lt;/li>
&lt;li>&lt;strong>用于启动 Matsuri &amp;amp; NekoRay Naiveproxy 的分享链接&lt;/strong>&lt;/li>
&lt;li>&lt;strong>用于启动 Shadowrocket HTTP/2 代理的分享链接&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>对于 Matsuri &amp;amp; NekoRay 以及 Shadowrocket，复制分享链接后，可以通过粘贴或从剪贴板导入的方式直接在图形化客户端中导入节点；而 V2rayN 则需要编写自定义配置，复制粘贴配置信息即可。&lt;/p>
&lt;p>Matsuri &amp;amp; NekoRay 以及 V2rayN 需要在客户端安装 naive-core 或 naive plugin 才能正常使用，详细内容文末介绍。&lt;/p>
&lt;h2 id="windows-pc-configuration">Windows PC Configuration&lt;/h2>
&lt;blockquote>
&lt;p>建议每间隔一个月主动更替 naive-core 以追平上游的最新特性&lt;/p>
&lt;/blockquote>
&lt;h3 id="v2rayn-custom-server">V2rayN Custom Server&lt;/h3>
&lt;ol>
&lt;li>访问 &lt;a class="link" href="https://github.com/klzgrad/naiveproxy/releases" target="_blank" rel="noopener"
>Releases · klzgrad/naiveproxy&lt;/a> 下载匹配操作系统的最新发行客户端。解压后将其中的 &lt;code>naive.exe&lt;/code> 放置到 v2rayN 工程根目录下。&lt;/li>
&lt;li>添加自定义配置服务器，复制粘贴 &lt;code>v2rayN custom server&lt;/code> 的配置信息， Core类型 选择 naiveproxy，Socks端口 与配置文件给出的 listen-port 保持一致。下图为参考配置：&lt;img src="https://blog.echosec.top/p/naiveproxy/image-20221019212555596.png"
width="915"
height="373"
srcset="https://blog.echosec.top/p/naiveproxy/image-20221019212555596_hu050c1885ecf7a8209d02ff113beb1585_28405_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/naiveproxy/image-20221019212555596_hu050c1885ecf7a8209d02ff113beb1585_28405_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20221019212555596"
class="gallery-image"
data-flex-grow="245"
data-flex-basis="588px"
>&lt;/li>
&lt;/ol>
&lt;h3 id="nekoray-naiveproxy-node">NekoRay Naiveproxy Node&lt;/h3>
&lt;p>如果你从未使用过 NekoRay，可通过 &lt;a class="link" href="https://blog.echosec.top/p/nekoray-hysteria/" >这篇博客&lt;/a> 了解预热内容。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>访问 &lt;a class="link" href="https://github.com/klzgrad/naiveproxy/releases" target="_blank" rel="noopener"
>Releases · klzgrad/naiveproxy&lt;/a> 下载匹配操作系统的最新发行客户端。解压后将其中的 &lt;code>naive.exe&lt;/code> 放置到 NekoRay 工程目录下的 config 文件夹。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开 NekoRay，依次选择 「首选项 → 基本设置 → 核心」添加 &lt;code>naive-core&lt;/code>。&lt;img src="https://blog.echosec.top/p/naiveproxy/image-20221019211804619.png"
width="1246"
height="851"
srcset="https://blog.echosec.top/p/naiveproxy/image-20221019211804619_hu49d8ef0737b3aaf21e583fcb0e5d482b_124841_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/naiveproxy/image-20221019211804619_hu49d8ef0737b3aaf21e583fcb0e5d482b_124841_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20221019211804619"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复制 &lt;code>NekoRay/Matsuri 分享链接 &lt;/code>，CTRL + V 从剪切板导入 naiveproxy node。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="matsuri-configuration">Matsuri Configuration&lt;/h3>
&lt;blockquote>
&lt;p>Matsuri with Naiveproxy Plugin&lt;/p>
&lt;/blockquote>
&lt;p>如果你从未使用过 Matsuri，可通过 &lt;a class="link" href="https://blog.echosec.top/p/matsuri-hysteria/" >这篇博客&lt;/a> 了解预热内容。若首次使用 Naiveproxy，依据提示安装 naive-plugin 即可（导入并启动服务器后自动弹出提示）。&lt;/p>
&lt;h3 id="shadowrocket-configuration">Shadowrocket Configuration&lt;/h3>
&lt;p>软件自带插件，无需手动安装，直接复制粘贴分享链接即可。&lt;/p></description></item><item><title>『Blog』Use Hysteria through Matsuri in Android</title><link>https://blog.echosec.top/p/matsuri-hysteria/</link><pubDate>Wed, 31 Aug 2022 06:57:23 +0800</pubDate><guid>https://blog.echosec.top/p/matsuri-hysteria/</guid><description>&lt;img src="https://blog.echosec.top/p/matsuri-hysteria/webpti.jpg" alt="Featured image of post 『Blog』Use Hysteria through Matsuri in Android" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在以往文章中我们介绍了在 Windows 上以图形化界面的形式管理 Hysteria 的解决方案：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://blog.echosec.top/p/nekoray-hysteria" >『Blog』NekoRay 配置 Hysteria&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.echosec.top/p/v2rayn-hysteria-tutorial/" target="_blank" rel="noopener"
>『Blog』V2rayN 配置 Hysteria&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>本文继续介绍有关 Hysteria 代理核心更多内容。本篇以 Matsuri 为切入点，介绍在 Android 手机上启动 Hysteria 代理核心的 quick-start 入门步骤，开箱即用。&lt;/p>
&lt;p>如果你已持有一枚可用的 Hysteria 节点链接，只需要花费不到 3 分钟的时间便可在自己的手机上架起代理与互联国际完成「友好交互」。&lt;/p>
&lt;h2 id="注意事项">注意事项&lt;/h2>
&lt;p>本文涉及的开源项目如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>项目名&lt;/th>
&lt;th>发行版本号&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/HyNetwork/hysteria" target="_blank" rel="noopener"
>HyNetwork/hysteria&lt;/a>&lt;/td>
&lt;td>v1.2.0&lt;/td>
&lt;td>代理核心&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/MatsuriDayo/Matsuri" target="_blank" rel="noopener"
>MatsuriDayo/Matsuri&lt;/a>&lt;/td>
&lt;td>v0.4.1&lt;/td>
&lt;td>图形化客户端&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/MatsuriDayo/plugins/releases/tag/Hysteria-v1.2.0-2" target="_blank" rel="noopener"
>MatsuriDayo/Hysteria-Plugin&lt;/a>&lt;/td>
&lt;td>v1.2.0-2&lt;/td>
&lt;td>兼容性插件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>注意 →&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>本文不面向零基础的小白读者，且仅涉及与 Matsuri Android 客户端相关的操作演示，hysteria 服务端的配置详见&lt;a class="link" href="https://blog.echosec.top/p/v2rayn-hysteria-tutorial/" target="_blank" rel="noopener"
>『Blog』V2rayN 配置 Hysteria&lt;/a>。&lt;/li>
&lt;li>该项目仍处于成长期，且因开发者精力有限，无法保证 SagerNet 的最新特性得到及时迁移。本人在相关测试后认为该项目已能实现有关 Hysteria 代理的核心功能，可以正常使用，也即，本文不涉及该软件兼容的其他代理类型的介绍，玩家需要根据自己的喜好和需求选择适合自己的产品。&lt;/li>
&lt;/ol>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>如果你已是 Hysteria 其他桌面系统的玩家，那你一定参阅过 &lt;a class="link" href="https://github.com/HyNetwork/hysteria/wiki/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85" target="_blank" rel="noopener"
>Hysteria 的 Wiki 文档&lt;/a>，你会发现，早在一年前， SagerNet 就以插件的形式支持了 Hysteria 在安卓手机上的运行。然而，该上游项目欠缺维护，实际情况是大量型号的安卓设备并不能正常启动 Hysteria 代理核心，乃至在作者撰文的现在，大量潜在 BUG 仍未得到妥善处理，常见的问题是弹出如下提示：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>缺少插件&lt;/strong>：&amp;hellip; 专有设备提供商篡改了你的安卓系统，使该插件无法使用。&lt;/p>
&lt;/blockquote>
&lt;p>那么，该主角出场了！&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/MatsuriDayo/Matsuri" target="_blank" rel="noopener"
>Matsuri&lt;/a>，是一个用 Kotlin 编写的 Android 代理工具链，是 &lt;a class="link" href="https://github.com/SagerNet/SagerNet" target="_blank" rel="noopener"
>SagerNet&lt;/a> 的一个子分支。Matsuri 继承了 SagerNet 的诸多优良特性，并在此基础上修补了一些历史遗留问题。相关内容可访问 Matsuri 仓库文档，本文仅介绍有关 Hysteria 代理核心相关的内容。&lt;/p>
&lt;h2 id="快速上手">快速上手&lt;/h2>
&lt;h3 id="下载-matsuri">下载 Matsuri&lt;/h3>
&lt;p>Matsuri 支持从 &lt;a class="link" href="https://github.com/MatsuriDayo/Matsuri/releases" target="_blank" rel="noopener"
>GitHub Releases&lt;/a> 以及 &lt;a class="link" href="https://play.google.com/store/apps/details?id=moe.matsuri.lite" target="_blank" rel="noopener"
>Google Play&lt;/a> 两种途径下载。目前，谷歌商店上架的版本与 GitHub 发行版的版本号一致，两者均支持在线更新。如果条件允许，从谷歌商店下载比较方便。&lt;/p>
&lt;h4 id="从-github-下载">从 GitHub 下载&lt;/h4>
&lt;p>访问 &lt;a class="link" href="https://github.com/MatsuriDayo/Matsuri/releases" target="_blank" rel="noopener"
>GitHub Releases&lt;/a> ，下载最新发行版即可。主流的安卓手机适合使用 &lt;code>arm64-v8a&lt;/code> 类型 APK 客户端。&lt;/p>
&lt;h4 id="从-google-play-下载">从 Google Play 下载&lt;/h4>
&lt;p>访问内联链接 &lt;a class="link" href="https://play.google.com/store/apps/details?id=moe.matsuri.lite" target="_blank" rel="noopener"
>Google Play&lt;/a> 或手动搜索关键词 &lt;code>Matsuri Makubaro&lt;/code> 。&lt;/p>
&lt;figure align="center">
&lt;img src="image-20220831131748008.png" alt=" Download CMFA release arm64-v8a." width="33%"/>&lt;br>
&lt;/figure>
&lt;h3 id="导入-hysteria-节点">导入 Hysteria 节点&lt;/h3>
&lt;p>此处推荐的操作是先导入一个可用的 Hysteria 节点，再进行插件的（自动）安装。&lt;/p>
&lt;p>与同世代项目操作逻辑一致，Matsuri 支持从二维码，剪切板，配置文件以及手动编辑 4 种方式导入代理。推荐从剪切板导入 Hysteria 节点分享链接。&lt;/p>
&lt;h3 id="下载-hysteria-plugin">下载 Hysteria-Plugin&lt;/h3>
&lt;p>选中导入的节点，点击下方的启动开关，此时会弹出如下警告交互框：&lt;/p>
&lt;div align="center">&lt;img src="image-20220831133400876.png" alt="image-20220831133400876" style="zoom: 25%;" />&lt;/div>
&lt;p>点击「下载」自动打开浏览器前往 &lt;a class="link" href="https://github.com/MatsuriDayo/plugins/releases" target="_blank" rel="noopener"
>Hysteria 插件页面&lt;/a>，根据你自己的设备情况选择最新发行版的软件即可。如骁龙系列产品通常选择 &lt;code>arm64-v8a.apk&lt;/code>，相关截屏如下所示：&lt;/p>
&lt;div align="center">
&lt;img src="image-20220831133813986.png" alt="image-20220831133813986" style="zoom: 15%;" />
&lt;img src="image-20220831133819439.png" alt="image-20220831133819439" style="zoom:15%;" />
&lt;/div>
下载完后正常安装即可，不要点击多余的东西。
&lt;div align="center">&lt;img src="image-20220831134255535.png" alt="image-20220831134255535" style="zoom:25%;" />&lt;/div>
&lt;h3 id="配置-matsuri-代理核心">配置 Matsuri 代理核心&lt;/h3>
&lt;h4 id="解除插件限制">解除插件限制&lt;/h4>
&lt;p>首先，下载好的 plugin 在桌面上不显示快捷方式，需要在你自己设备中的「应用管理」中查找（不同设备操作路径不一致，此处不多赘述，大体上从设置界面进入）Hysteria Plugin，如下图所示：&lt;/p>
&lt;div align="center">
&lt;img src="image-20220831134752294.png" alt="image-20220831134752294" style="zoom:25%;" />
&lt;img src="image-20220831134958164.png" alt="image-20220831134958164" style="zoom:25%;" />
&lt;/div>
&lt;h4 id="解除主程序限制">解除主程序限制&lt;/h4>
&lt;p>同样，需要在应用信息界面调整 Matsuri 的软件权限。具体来说有 3 点，联网权限，自启动以及省电策略。&lt;/p>
&lt;p>最后，你需要锁定驻台进程，防止一键清除后台缓存时退出代理。&lt;/p>
&lt;div align="center">&lt;img src="image-20220831135551288.png" alt="image-20220831135551288" style="zoom:25%;" />&lt;/div>
&lt;h4 id="启用-http-入站">启用 HTTP 入站&lt;/h4>
&lt;p>回到主程序界面，从侧边栏中进入到「设置」界面，下滑找到「入站设置」板块，勾选「启动 HTTP 入站」。&lt;/p>
&lt;p>软件默认的 SOCKS5 入站代理端口为 2080，本地 DNS 端口为 6540，HTTP 代理端口为 9080。若有端口冲突更改代理端口即可。&lt;/p>
&lt;div align="center">&lt;img src="image-20220831142427900.png" alt="image-20220831142427900" style="zoom:25%;" />&lt;/div>
&lt;h3 id="启动-hysteria-节点">启动 Hysteria 节点&lt;/h3>
&lt;p>配置完成后回到主程序界面，点击启动开关。若节点服务正常，此时已能正常通过代理连接互联网。你可以访问 Google 以及 YouTube 等站点进行行为测试。&lt;/p>
&lt;h2 id="网络优化">网络优化&lt;/h2>
&lt;p>介绍推荐使用的最佳实践方案，可在网络质量较差时明显提升网路冲浪体验，下文未提及的配置项保持默认即可。&lt;/p>
&lt;h3 id="设置">设置&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># Matsuri v0.5.2 play&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">软件设置&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">运行模式&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">VPN&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">TUN实现&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Tun2Socket&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">MTU&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1500&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">路由设置&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">分应用代理&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">域名解析策略&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">AsIs&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">启动流量探测&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">IPv6路由&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">禁用&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">路由资源更新&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">官方&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">协议设置&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">复用最大并发&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># If enable&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">DNS设置&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">增强域名解析&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">远程DNS&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://8.8.8.8/dns-query&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">直连DNS&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https+local://233.5.5.5/dns-query&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">启动DNS路由&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">入站设置&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">启用HTTP入站&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">追加HTTP代理至VPN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">杂项&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">首选插件提供者&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Matsuri&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="路由规则">路由规则&lt;/h3>
&lt;p>Matsuri 提供了一些默认的路由规则，路由规则的优先级高于分应用代理。改动路由规则和分应用代理都需要重启代理服务才能生效。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">屏蔽QUIC:（屏蔽）&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">屏蔽跟踪器（屏蔽）&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">屏蔽广告（屏蔽）&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">中国Play商店规则（代理）&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">中国域名规则（绕过）&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">中国IP规则（绕过）&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>场景优化：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>通用场景。建议在「设置 - 分应用代理」中&lt;strong>绕过&lt;/strong>「国产应用」并将「中国域名」以及「中国 IP 」的路由规则关闭。你可以借助软件内置的「扫描中国应用」一键添加。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>覆盖某些国产应用中的 IP 位置显示。先保持通用场景设置，再将指定的国产应用从绕过列表中移除。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>『Blog』Use Hysteria through NekoRay in Windows</title><link>https://blog.echosec.top/p/nekoray-hysteria/</link><pubDate>Fri, 26 Aug 2022 05:51:00 +0800</pubDate><guid>https://blog.echosec.top/p/nekoray-hysteria/</guid><description>&lt;img src="https://blog.echosec.top/p/nekoray-hysteria/finnstark.jpg" alt="Featured image of post 『Blog』Use Hysteria through NekoRay in Windows" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>2022年3月，我们在&lt;a class="link" href="https://blog.echosec.top/p/v2rayn-hysteria-tutorial/" target="_blank" rel="noopener"
>《V2rayN 配置 Hysteria》&lt;/a> 一文中简要介绍了一种 Windows 环境下借助 V2rayN 运行并管理 Hysteria 代理核心的可视化解决方案。行文中，我们提到了一些该种解决方案未能处理的问题，即，无法将 Hysteria 节点的启动与测试集成到一个 action 上，需要自行添加一个 Socks5 驻台线程并手动运行 hysteria-core 才能完成节点测试。在 V2rayN v5.32 中，软件作者 2dust 使用了一种妥协的方法尝试处理这种需求，但仍不够优雅，且方案可行性有待考究。&lt;/p>
&lt;p>为了达成上述「检测 + 管理」的集成体验，本文介绍一个仍处于成长期的开源项目——&lt;a class="link" href="https://github.com/MatsuriDayo/nekoray" target="_blank" rel="noopener"
>NekoRay&lt;/a>，基于 Qt/C++ 跨平台代理配置管理器。NekoRay 不仅能优雅地解决这个问题，还先于 V2rayN 支持了 &lt;code>hysteria://&lt;/code> 协议头的解析，在一定程度上促进 hysteria 节点的社区传播。&lt;/p>
&lt;div align="center">&lt;img src="nekoray.png" alt="NekoRay 虚拟形象" style="zoom:67%;" />&lt;/div>
&lt;p>本文从「快速上手」及「进阶指南」两个阶段介绍这个项目。你如果已持有一枚可以使用的 hysteria 节点分享链接，那么只需 1 分钟即可完成与启动系统代理有关的一切操作，开箱机用，十分方便。&lt;/p>
&lt;h2 id="注意事项">注意事项&lt;/h2>
&lt;p>本文最后更新时间 &lt;code>2022-08-26&lt;/code>， 请注意甄别本文中可能过时的内容，谨慎参考。&lt;/p>
&lt;p>本文涉及的开源项目如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>项目名&lt;/th>
&lt;th>发行版本号&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/HyNetwork/hysteria" target="_blank" rel="noopener"
>HyNetwork/hysteria&lt;/a>&lt;/td>
&lt;td>v1.2.0&lt;/td>
&lt;td>代理核心&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="https://github.com/MatsuriDayo/nekoray" target="_blank" rel="noopener"
>MatsuriDayo/nekoray&lt;/a>&lt;/td>
&lt;td>v1.4&lt;/td>
&lt;td>图形化客户端&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>注意 →&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本文不面向零基础的小白读者，且仅涉及与 NekoRay &lt;strong>Win10+&lt;/strong> 客户端相关的操作演示，hysteria 服务端的配置详见&lt;a class="link" href="https://blog.echosec.top/p/v2rayn-hysteria-tutorial/" target="_blank" rel="noopener"
>『Blog』V2rayN 配置 Hysteria&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该项目仍处于成长期，其成熟度仍与 V2rayN 有较大差距。本文仅提供解决方案的演示说明，玩家需要根据自己的喜好和需求选择适合自己的产品。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="快速上手">快速上手&lt;/h2>
&lt;h3 id="下载-nekoray">下载 NekoRay&lt;/h3>
&lt;p>进入 &lt;a class="link" href="https://github.com/MatsuriDayo/nekoray/releases" target="_blank" rel="noopener"
>Releases · MatsuriDayo/nekoray&lt;/a>，下载最新版的 NekoRay Windows 压缩包。免安装，开箱即用。此处假设解压目录为 &lt;code>C:\\nekoray&lt;/code>，则主程序路径为 &lt;code>C:\\nekoray\\nekoray.exe&lt;/code>。&lt;/p>
&lt;h3 id="下载-hysteria-windows">下载 hysteria-windows&lt;/h3>
&lt;p>进入 &lt;a class="link" href="https://github.com/HyNetwork/hysteria/releases" target="_blank" rel="noopener"
>Releases · HyNetwork/hysteria&lt;/a>，下载最新版的 &lt;code>hysteria-windows-amd64.exe&lt;/code>，将其放置在解压后的 NekoRay 配置目录下，例如：&lt;code>C:\\nekoray\\config\\hysteria-windows-amd64.exe&lt;/code>（此处随意，但 config 为核心界面的默认启动路径，这样放置方面找文件）。&lt;/p>
&lt;h3 id="配置-nekoray-代理核心">配置 NekoRay 代理核心&lt;/h3>
&lt;p>持续进入「首选项」「基本设置」「核心」界面，选择 &lt;strong>hysteria-core&lt;/strong> 的绝对路径，即刚下载的 &lt;code>hysteria-windows-amd64.exe&lt;/code> 文件绝对路径。&lt;/p>
&lt;p>选定后切换到「基本设置 - 通用」界面，&lt;strong>将 HTTP 监听端口启用&lt;/strong>。其他设置保持默认，点击确定，保存设置。&lt;/p>
&lt;div align="center">&lt;img src="image-20220826075323108.png" alt="首选项 - 基本设置 - 核心 - hysteria" style="zoom:48%;" />&lt;/div>
&lt;p>需要注意的是，若在后续操作中出现端口重用或冲突的弹窗警告，需要回到「基本设置 - 通用」中修改 Socks 监听端口或 HTTP 监听端口。下图为改变后的端口值：&lt;/p>
&lt;div align="center">&lt;img src="image-20220831145659642.png" alt="image-20220831145659642" style="zoom:67%;" />&lt;/div>
&lt;h3 id="导入-hysteria-节点">导入 hysteria 节点&lt;/h3>
&lt;h4 id="从分享链接或剪切板添加">从分享链接或剪切板添加&lt;/h4>
&lt;p>NekoRay 支持 &lt;code>hysteria://&lt;/code> 协议头的解析，可以直接将订阅链接粘贴进来自动获取节点的配置信息，如下图所示:&lt;/p>
&lt;div align="center">&lt;img src="image-20220826075502047.png" alt="NekoRay - 从剪切板添加 hysteria 节点分享链接" style="zoom: 48%;" />&lt;/div>
&lt;p>值得一提的是，我们在经典的 hysteria 客户端配置文件中设定字段 &lt;code>acl&lt;/code>以及 &lt;code>mmdb&lt;/code> 用以调取分流策略，还能额外设置 &lt;code>recv_window_conn&lt;/code> ，&lt;code>recv_window&lt;/code>以及 &lt;code>resolver&lt;/code> 等参数更细粒度地控制代理行为。但我们观察&lt;code>hysteria://&lt;/code> 的节点分享链接的参数后发现，其只保留了 C/S 通信的必要参数，即 &lt;code>host&lt;/code>，&lt;code>protocol&lt;/code>，&lt;code>auth_str&lt;/code> 等字段。&lt;/p>
&lt;p>显然，在最佳实践中，我们不应在为传播的设计的参数结构体中携带诸如文件路径等奇怪的东西，这会让整个分享体系变得非常冗余，十分不优雅。但我又偏有分流这样的需求怎么办呢？非常简单，我们可以通过 NekoRay 间接地为代理核心提供相关的配置信息（相关操作其实也非常简单，自己玩一玩就会了，具体操作我会在下文的进阶部分补充）。&lt;/p>
&lt;h4 id="手动编辑">手动编辑&lt;/h4>
&lt;p>有关 hysteria 服务端的配置介绍及最佳实践可见&lt;a class="link" href="https://blog.echosec.top/p/v2rayn-hysteria-tutorial/" target="_blank" rel="noopener"
>另一篇博客&lt;/a>。&lt;/p>
&lt;p>相关配置的注释及生成后的面板预览结果如下图所示：&lt;/p>
&lt;div align="center">&lt;img src="image-20220826074722587.png" alt="NekoRay - Hysteria 配置生成面板" style="zoom: 67%;" />&lt;/div>
&lt;div align="center">&lt;img src="image-20220826075056836.png" alt="NekoRay - Hysteria 配置生成预览" style="zoom:63%;" />&lt;/div>
&lt;p>此处出现了被称为 &lt;code>替换串&lt;/code> 的占位符，即 &lt;code>%mapping_port%&lt;/code> 与 &lt;code>%socks_port%&lt;/code> ，不需要修改，保持默认即可。&lt;/p>
&lt;h3 id="启动-hysteria-节点">启动 hysteria 节点&lt;/h3>
&lt;p>初次使用时，选中目标节点，并依次点击「程序 &amp;ndash; 系统代理 &amp;ndash; 启动系统代理」。当控制台开始持续输出来自 hysteria-core 的日志信息时，说明节点启动成功，你可以访问 Google 或 YouTube 等站点进行行为校验。&lt;/p>
&lt;div align="center">&lt;img src="image-20220826081449835.png" alt="image-20220826081449835" style="zoom:48%;" />&lt;/div>
&lt;p>值得一提的是，NekoRay 的 &amp;lt;系统代理启动&amp;gt; 及 &amp;lt;代理核心运行&amp;gt; 的业务是分离的，也即对着节点敲回车的作用是启动/重启代理核心，只有勾选「启动系统代理」后才能连接互联网，这点与 V2rayN 相似。&lt;/p>
&lt;h3 id="测试-hysteria-节点">测试 hysteria 节点&lt;/h3>
&lt;p>在合理配置前置代理选项后，你可以将「节点激活 + 节点测试」集成到一个 action 中，这比 V2rayN 目前(~v5.32)的解决方案要更加优雅。&lt;/p>
&lt;p>若你按照本文档介绍的步骤走，你只需要在默认分组状态下，依次点击「服务器 – 当前分组」即可调出测试控件的接口，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://blog.echosec.top/p/nekoray-hysteria/image-20220826082130683.png"
width="323"
height="224"
srcset="https://blog.echosec.top/p/nekoray-hysteria/image-20220826082130683_hu0a171cb7f6b55220a14afee1c80b5a6a_6909_480x0_resize_box_3.png 480w, https://blog.echosec.top/p/nekoray-hysteria/image-20220826082130683_hu0a171cb7f6b55220a14afee1c80b5a6a_6909_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;p>NekoRay 集成了一些主流的测试工具，直接运行「完整测试」即可。测试包含以下四个项目（点击跳转源码）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">测试项目&lt;/th>
&lt;th style="text-align:center">简介&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://github.com/MatsuriDayo/nekoray/blob/4ed46c10feef17831398d7daf5829e01b446d3f5/go/grpc_core.go#L204" target="_blank" rel="noopener"
>Latency 延迟测试&lt;/a>&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://github.com/MatsuriDayo/nekoray/blob/4ed46c10feef17831398d7daf5829e01b446d3f5/go/grpc_core.go#L247" target="_blank" rel="noopener"
>下载速度测试&lt;/a>&lt;/td>
&lt;td style="text-align:center">使用代理下载 10MiB 文件，计算下载速度。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://github.com/MatsuriDayo/nekoray/blob/4ed46c10feef17831398d7daf5829e01b446d3f5/go/grpc_core.go#L216" target="_blank" rel="noopener"
>入口IP&lt;/a>， &lt;a class="link" href="https://github.com/MatsuriDayo/nekoray/blob/4ed46c10feef17831398d7daf5829e01b446d3f5/go/grpc_core.go#L229" target="_blank" rel="noopener"
>出口IP&lt;/a>&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://github.com/MatsuriDayo/nekoray/blob/4ed46c10feef17831398d7daf5829e01b446d3f5/go/grpc_core.go#L263" target="_blank" rel="noopener"
>NAT类型&lt;/a>&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>常见的（玄学）速度测试分布如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>0~5 MiB/s&lt;/code>，绝大多数免费节点，山路十八弯的自建节点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>4~6 MiB/s&lt;/code>，优选IP，反代优选IP，机场普通节点，自建普通线路节点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>~10MiB/s&lt;/code>，机场上游质量节点，自建优质线路节点，hysteria+自建普通线路节点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;gt;18MiB/s&lt;/code>，机场上游至最贵一档的机场节点，hysteria+自建优质线路节点（家宽 200Mpbs 起且服务端未限制 100Mbps 的下行速度）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>上不封顶&lt;/code>，hysteria 一般用于普通或劣质线路的环境改善，在G口档做 UDP 发包是非常睿智的行为。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>测试的输出结果如下图所示：&lt;/p>
&lt;div align="center">&lt;img src="image-20220826083252485.png" alt="image-20220826083024670" style="zoom:48%;" />&lt;/div>
&lt;p>我们在经典的 hysteria 代理拓扑中使用的是最简单的 QUIC 直连方案，也即入口地址 In 和出口地址 Out 是相同的，其值均为你的代理服务器的真实 IP。&lt;/p>
&lt;p>需要注意的是，hysteria 的通信协议是基于 quic-go 实现的，TCPing 测试不可用。&lt;/p>
&lt;h2 id="进阶教程">进阶教程&lt;/h2>
&lt;blockquote>
&lt;p>（必读）官方文档：&lt;a class="link" href="https://matsuridayo.github.io/n-configuration/" target="_blank" rel="noopener"
>Nekoray-配置 - Matsuri &amp;amp; NekoRay &lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="vpn模式">VPN模式&lt;/h3>
&lt;h3 id="服务器组">服务器组&lt;/h3>
&lt;p>NekoRay 以组的形式管理和编排代理对象，因此，所有的测试都是基于组进行的，即，所有组内节点都会被测。&lt;/p>
&lt;h3 id="必读分流策略">[必读]分流策略&lt;/h3>
&lt;p>在 Windows 上，NekoRay 默认以全局代理的形式启动。因此，我们需要通过设置基础的路由策略来提升网上冲浪的体验，否则会有大量的代理流量被浪费，还会无端加大断流风险。&lt;/p>
&lt;p>此处举个简单的例子说明设置分流的必要性。如果你使用过 Bilibili 你应该知道 B站番剧对「不同地区」用户有着不一样的版权策略，而界定「不同地区」用户的规则是基于「访客IP」编写的（目前），即，使用不同的 IP 访问 B站，推荐系统，搜索引擎，页面布局等服务的响应均有所不同。&lt;/p>
&lt;ul>
&lt;li>US Global Proxy&lt;/li>
&lt;/ul>
&lt;img src="image-20220831151213827.png" alt="image-20220831151213827" style="zoom:33%;" />
&lt;ul>
&lt;li>GEOIP-CN Bypass（简单理解为访问B站不用代理）&lt;/li>
&lt;/ul>
&lt;img src="image-20220831151428355.png" alt="image-20220831151428355" style="zoom:33%;" />
&lt;p>访问国内站点却绕行国外代理除了在评论区装逼我想不出任何动机。由于本篇文章属于「入门介绍」，不过多深入自定义规则或高级路由分流策略之类的东西，只需要按照下图所示操作开启 NekoRay 预设的路由规则即可。&lt;/p>
&lt;p>&lt;strong>TL;TD&lt;/strong>&lt;/p>
&lt;p>进入「首选项 &amp;ndash; 路由 VPN 设置」，选择预设「绕过局域网和大陆」，确定保存，重启代理。&lt;/p>
&lt;div align="center">&lt;img src="image-20220831152027353.png" alt="image-20220831152027353" style="zoom: 67%;" />&lt;/div></description></item></channel></rss>